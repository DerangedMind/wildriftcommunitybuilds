[{"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\index.tsx":"1","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\index.ts":"3","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\App\\App.tsx":"4","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\gameData.ts":"5","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\reCaptcha.ts":"6","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\snackbarControls.ts":"7","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\user.ts":"8","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\build.ts":"9","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\actions.ts":"10","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\gameDataRequests.ts":"11","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\useQueriesTyped.ts":"12","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\App\\Routes.tsx":"13","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Layout.tsx":"14","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\constants.ts":"15","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\defaultSelectedState.ts":"16","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\config\\config.ts":"17","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageError\\PageNotFound\\PageNotFound.tsx":"18","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\AboutPage\\index.tsx":"19","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\index.tsx":"20","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PrivacyPolicyPage\\index.tsx":"21","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\index.tsx":"22","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\index.tsx":"23","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQPage\\index.tsx":"24","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\index.tsx":"25","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\buildsRequests.ts":"26","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\validationMessages.ts":"27","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\buildValidationHelpers.ts":"28","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\sessionStorage.ts":"29","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\AlertPopup\\AlertPopup.tsx":"30","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\GoogleAd\\GoogleAd.tsx":"31","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\Backdrop.tsx":"32","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\isValidUser.ts":"33","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\firebaseApp.ts":"34","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\requiredLength.ts":"35","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\buildValidation.ts":"36","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Stepper\\index.tsx":"37","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Header\\index.tsx":"38","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\index.tsx":"39","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\index.tsx":"40","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\index.tsx":"41","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQPage\\Accordion\\index.tsx":"42","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\Spellitem\\index.tsx":"43","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\SectionDivider\\index.tsx":"44","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\RuneItem\\index.tsx":"45","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\index.tsx":"46","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildHeader\\index.tsx":"47","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\BuildItem\\index.tsx":"48","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\BuildDescription\\index.tsx":"49","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\ChampionsList\\index.tsx":"50","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\imagePath.ts":"51","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\index.tsx":"52","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\SpellPopover.tsx":"53","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\RunePopover.tsx":"54","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\ItemPopover.tsx":"55","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\championNameToUrlString.ts":"56","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\index.tsx":"57","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildDescription\\index.tsx":"58","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildGameMode\\index.tsx":"59","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildTitle\\index.tsx":"60","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildRole\\index.tsx":"61","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerRank\\index.tsx":"62","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerUsername\\index.tsx":"63","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerRegion\\index.tsx":"64","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Stepper\\StepperButtons\\index.tsx":"65","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ChampionSelect\\index.tsx":"66","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelect\\index.tsx":"67","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\SpellsSelect\\index.tsx":"68","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\index.tsx":"69","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\ReCaptcha\\index.tsx":"70","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildHeader\\BuildChip\\index.tsx":"71","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\CopyBuildLink\\index.tsx":"72","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\ViewMoreBuilds\\index.tsx":"73","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\Lanes\\index.tsx":"74","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\Counters\\index.tsx":"75","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Domination.tsx":"76","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Resolve.tsx":"77","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Keystone.tsx":"78","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Inspiration.tsx":"79","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\SpellsSelect\\Spell\\index.tsx":"80","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\index.tsx":"81","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\NoBuilds\\index.tsx":"82","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelected\\index.tsx":"83","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildItem\\index.tsx":"84","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildDate\\index.tsx":"85","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildRune\\index.tsx":"86","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildSpell\\index.tsx":"87","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildRankUser\\index.tsx":"88","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelected\\BuildItem\\index.tsx":"89","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Footer\\Footer.tsx":"90","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Header\\Header.tsx":"91","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Header\\AppBar\\AppBar.tsx":"92","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\PageLoading.tsx":"93","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageHelmet\\index.tsx":"94","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\FilterChampionsBy\\index.tsx":"95","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\FilterChampionsBy\\RoleFilterItem\\index.tsx":"96"},{"size":1181,"mtime":1620001169867,"results":"97","hashOfConfig":"98"},{"size":425,"mtime":499162500000,"results":"99","hashOfConfig":"98"},{"size":855,"mtime":1619762997848,"results":"100","hashOfConfig":"98"},{"size":4604,"mtime":1621690219004,"results":"101","hashOfConfig":"98"},{"size":1018,"mtime":1619233599746,"results":"102","hashOfConfig":"98"},{"size":566,"mtime":1619233599745,"results":"103","hashOfConfig":"98"},{"size":398,"mtime":1619233599747,"results":"104","hashOfConfig":"98"},{"size":309,"mtime":1619866006766,"results":"105","hashOfConfig":"98"},{"size":2118,"mtime":1619233813338,"results":"106","hashOfConfig":"98"},{"size":1988,"mtime":1619762536505,"results":"107","hashOfConfig":"98"},{"size":1968,"mtime":1619510219431,"results":"108","hashOfConfig":"98"},{"size":1045,"mtime":1619596573057,"results":"109","hashOfConfig":"98"},{"size":1205,"mtime":1619777894454,"results":"110","hashOfConfig":"98"},{"size":891,"mtime":1621689430231,"results":"111","hashOfConfig":"98"},{"size":1257,"mtime":1621692118721,"results":"112","hashOfConfig":"98"},{"size":3895,"mtime":1619570887179,"results":"113","hashOfConfig":"98"},{"size":854,"mtime":1619750980383,"results":"114","hashOfConfig":"98"},{"size":1817,"mtime":1619485089496,"results":"115","hashOfConfig":"98"},{"size":2387,"mtime":1619781566791,"results":"116","hashOfConfig":"98"},{"size":6136,"mtime":1621690465067,"results":"117","hashOfConfig":"98"},{"size":4515,"mtime":1619779341478,"results":"118","hashOfConfig":"98"},{"size":3461,"mtime":1621693131554,"results":"119","hashOfConfig":"98"},{"size":4740,"mtime":1621690465067,"results":"120","hashOfConfig":"98"},{"size":1321,"mtime":1619779231214,"results":"121","hashOfConfig":"98"},{"size":7640,"mtime":1620001966163,"results":"122","hashOfConfig":"98"},{"size":783,"mtime":1619575614555,"results":"123","hashOfConfig":"98"},{"size":2388,"mtime":1617875669211,"results":"124","hashOfConfig":"98"},{"size":7688,"mtime":1619233492151,"results":"125","hashOfConfig":"98"},{"size":716,"mtime":1619409950491,"results":"126","hashOfConfig":"98"},{"size":2155,"mtime":1619233599747,"results":"127","hashOfConfig":"98"},{"size":596,"mtime":1620002390850,"results":"128","hashOfConfig":"98"},{"size":614,"mtime":1618569757965,"results":"129","hashOfConfig":"98"},{"size":181,"mtime":1619866158798,"results":"130","hashOfConfig":"98"},{"size":993,"mtime":1619863657510,"results":"131","hashOfConfig":"98"},{"size":337,"mtime":1619089926304,"results":"132","hashOfConfig":"98"},{"size":10547,"mtime":1619233454171,"results":"133","hashOfConfig":"98"},{"size":1953,"mtime":1619509274170,"results":"134","hashOfConfig":"98"},{"size":743,"mtime":1619491039822,"results":"135","hashOfConfig":"98"},{"size":929,"mtime":1619509344427,"results":"136","hashOfConfig":"98"},{"size":589,"mtime":1619490975799,"results":"137","hashOfConfig":"98"},{"size":863,"mtime":1619509316674,"results":"138","hashOfConfig":"98"},{"size":5972,"mtime":1619491387466,"results":"139","hashOfConfig":"98"},{"size":1773,"mtime":1619491760215,"results":"140","hashOfConfig":"98"},{"size":539,"mtime":1619491785220,"results":"141","hashOfConfig":"98"},{"size":2009,"mtime":1619491801460,"results":"142","hashOfConfig":"98"},{"size":739,"mtime":1619491847138,"results":"143","hashOfConfig":"98"},{"size":3197,"mtime":1619491817448,"results":"144","hashOfConfig":"98"},{"size":2186,"mtime":1619491891797,"results":"145","hashOfConfig":"98"},{"size":1753,"mtime":1619491902265,"results":"146","hashOfConfig":"98"},{"size":1449,"mtime":1621691869925,"results":"147","hashOfConfig":"98"},{"size":487,"mtime":1619402479197,"results":"148","hashOfConfig":"98"},{"size":2009,"mtime":1619490709082,"results":"149","hashOfConfig":"98"},{"size":2850,"mtime":1619232958146,"results":"150","hashOfConfig":"98"},{"size":2240,"mtime":1619232954947,"results":"151","hashOfConfig":"98"},{"size":2548,"mtime":1619235168527,"results":"152","hashOfConfig":"98"},{"size":435,"mtime":1619416273917,"results":"153","hashOfConfig":"98"},{"size":858,"mtime":1619490749388,"results":"154","hashOfConfig":"98"},{"size":1943,"mtime":1619491117995,"results":"155","hashOfConfig":"98"},{"size":2852,"mtime":1619491123832,"results":"156","hashOfConfig":"98"},{"size":2080,"mtime":1619491069705,"results":"157","hashOfConfig":"98"},{"size":3408,"mtime":1619491084906,"results":"158","hashOfConfig":"98"},{"size":2335,"mtime":1619491031277,"results":"159","hashOfConfig":"98"},{"size":1813,"mtime":1619490994145,"results":"160","hashOfConfig":"98"},{"size":2039,"mtime":1619509301541,"results":"161","hashOfConfig":"98"},{"size":1290,"mtime":1619490958356,"results":"162","hashOfConfig":"98"},{"size":2533,"mtime":1619491347420,"results":"163","hashOfConfig":"98"},{"size":5855,"mtime":1619491331608,"results":"164","hashOfConfig":"98"},{"size":3212,"mtime":1619509358828,"results":"165","hashOfConfig":"98"},{"size":4382,"mtime":1619509115859,"results":"166","hashOfConfig":"98"},{"size":1495,"mtime":1619233599747,"results":"167","hashOfConfig":"98"},{"size":572,"mtime":1619491838834,"results":"168","hashOfConfig":"98"},{"size":1481,"mtime":1619595496367,"results":"169","hashOfConfig":"98"},{"size":1039,"mtime":1619491862063,"results":"170","hashOfConfig":"98"},{"size":1801,"mtime":1619490720702,"results":"171","hashOfConfig":"98"},{"size":3321,"mtime":1619490734096,"results":"172","hashOfConfig":"98"},{"size":3326,"mtime":1619491296593,"results":"173","hashOfConfig":"98"},{"size":3278,"mtime":1619491270997,"results":"174","hashOfConfig":"98"},{"size":3277,"mtime":1619491277863,"results":"175","hashOfConfig":"98"},{"size":3383,"mtime":1619491289064,"results":"176","hashOfConfig":"98"},{"size":2255,"mtime":1619491176499,"results":"177","hashOfConfig":"98"},{"size":4196,"mtime":1619490789324,"results":"178","hashOfConfig":"98"},{"size":1573,"mtime":1619607948848,"results":"179","hashOfConfig":"98"},{"size":6017,"mtime":1619491248387,"results":"180","hashOfConfig":"98"},{"size":1180,"mtime":1619490847071,"results":"181","hashOfConfig":"98"},{"size":733,"mtime":1619226506670,"results":"182","hashOfConfig":"98"},{"size":1851,"mtime":1619490825256,"results":"183","hashOfConfig":"98"},{"size":1192,"mtime":1619490806509,"results":"184","hashOfConfig":"98"},{"size":971,"mtime":1619490834925,"results":"185","hashOfConfig":"98"},{"size":1709,"mtime":1619491310652,"results":"186","hashOfConfig":"98"},{"size":2147,"mtime":1621689430231,"results":"187","hashOfConfig":"98"},{"size":274,"mtime":1619234568277,"results":"188","hashOfConfig":"98"},{"size":3365,"mtime":1621690389078,"results":"189","hashOfConfig":"98"},{"size":545,"mtime":1621690453957,"results":"190","hashOfConfig":"98"},{"size":295,"mtime":1621691304338,"results":"191","hashOfConfig":"98"},{"size":1730,"mtime":1621693304699,"results":"192","hashOfConfig":"98"},{"size":627,"mtime":1621693241981,"results":"193","hashOfConfig":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"197"},"tz6yw1",{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"197"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"197"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"197"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"197"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"197"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"197"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"197"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"197"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"197"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"197"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"197"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"197"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\index.tsx",["400","401"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\n// Redux\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './shared/store/index';\n\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\n// Create a client\nconst queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\trefetchOnWindowFocus: false,\n\t\t},\n\t},\n});\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<Provider store={store}>\n\t\t\t\t{/* <PersistGate loading={null} persistor={persistor}> */}\n\t\t\t\t<App />\n\t\t\t\t{/* </PersistGate> */}\n\t\t\t</Provider>\n\t\t\t<ReactQueryDevtools initialIsOpen={false} />\n\t\t</QueryClientProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["402","403"],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\index.ts",["404"],"// Redux\nimport { createStore, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport buildReducer from './reducers/build';\nimport gameDataReducer from './reducers/gameData';\nimport recaptchaReducer from './reducers/reCaptcha';\nimport snackbarControlsReducer from './reducers/snackbarControls';\nimport userReducer from './reducers/user';\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage: storage,\n};\n\nconst rootReducer = combineReducers({\n\tbuild: buildReducer,\n\tgameData: gameDataReducer,\n\trecaptcha: recaptchaReducer,\n\tsnackbarControls: snackbarControlsReducer,\n\tuser: userReducer,\n});\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(rootReducer);\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\App\\App.tsx",["405"],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\gameData.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\reCaptcha.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\snackbarControls.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\user.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\reducers\\build.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\store\\actions.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\gameDataRequests.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\useQueriesTyped.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\App\\Routes.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Layout.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\constants.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\defaultSelectedState.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\config\\config.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageError\\PageNotFound\\PageNotFound.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\AboutPage\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\index.tsx",["406","407","408"],"import React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\n// @ts-ignore - No types for this module\nimport { Helmet } from 'react-helmet';\nimport { useQuery } from 'react-query';\n\n// Shared\nimport { useQueriesTyped } from '../../shared/services/useQueriesTyped';\nimport { getOneChampion } from '../../shared/services/gameDataRequests';\nimport { getBuildsForChampion } from '../../shared/services/buildsRequests';\nimport { storeItem } from '../../shared/utils/sessionStorage';\n\n// MaterialUI\n\n// Components\nimport Box from '@material-ui/core/Box';\nimport BuildsList from './BuildsList';\nimport Button from '@material-ui/core/Button';\nimport ChampionData from './Header/index';\nimport ComponentLoading from '../../shared/components/Loading/PageLoading';\nimport GoogleAd from '../../shared/components/GoogleAd/GoogleAd';\nimport PageNotFound from '../../shared/components/PageError/PageNotFound/PageNotFound';\n\n// CSS\nimport styles from './Styles.module.css';\n\n// Types\n\ninterface ChampionBuildsProps\n\textends RouteComponentProps<{ championName: string }> {}\n\nconst ChampionBuildsPage: React.FC<ChampionBuildsProps> = (props) => {\n\tconst { match } = props;\n\tconst { championName } = match.params;\n\n\tconst [championInformation, setChampionInformation] = useState({\n\t\tchampionBuilds: [],\n\t\tchampionBuildsCount: 0,\n\t\tchampionData: {\n\t\t\tid: '',\n\t\t\tchampionName: '',\n\t\t\tcounters: {\n\t\t\t\tweakAgainst: [],\n\t\t\t\tstrongAgainst: [],\n\t\t\t},\n\t\t\tlane: [],\n\t\t\ttier: {\n\t\t\t\tTop: '',\n\t\t\t\tJungle: '',\n\t\t\t\tMiddle: '',\n\t\t\t\tBottom: '',\n\t\t\t\tSupport: '',\n\t\t\t},\n\t\t\ttitle: '',\n\t\t},\n\t});\n\tconst [renderErrorComponent, setRenderErrorComponent] = useState(false);\n\tconst [getMoreBuildsClick, setGetMoreBuildsClick] = useState(false);\n\tconst [disableLoadMoreBuilds, setDisableLoadMoreBuilds] = useState(false);\n\n\t// For pagination\n\tconst page = useRef(1);\n\n\tconst getMoreBuilds = () => {\n\t\tsetGetMoreBuildsClick(true);\n\n\t\treturn getBuildsForChampion(championName, page.current);\n\t};\n\n\tconst handleCreateMoreBuildsForChampion = () => {\n\t\tstoreItem('championToCreateBuild', championInformation.championData);\n\t};\n\n\tconst championBuildsQueries = useQueriesTyped([\n\t\t{\n\t\t\tqueryKey: 'championBuilds',\n\t\t\tqueryFn: () => getBuildsForChampion(championName, page.current),\n\t\t\tonError: () => setRenderErrorComponent(true),\n\t\t},\n\t\t{\n\t\t\tqueryKey: 'championData',\n\t\t\tqueryFn: () => getOneChampion(championName),\n\t\t\tonError: () => setRenderErrorComponent(true),\n\t\t},\n\t]);\n\n\tconst eachQueryHasLoaded = championBuildsQueries.every(\n\t\t(query) => query.isFetched && query.isSuccess\n\t);\n\n\t// Query to get more builds\n\tconst { data: newBuildsRetrieved, status, error, isError } = useQuery(\n\t\t'moreBuilds',\n\t\tgetMoreBuilds,\n\t\t{\n\t\t\tenabled: getMoreBuildsClick,\n\t\t}\n\t);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tchampionBuildsQueries[0].data && // Champion Builds\n\t\t\tchampionBuildsQueries[1].data && // Champion Data\n\t\t\teachQueryHasLoaded\n\t\t) {\n\t\t\tconst [\n\t\t\t\t{ data: championBuilds },\n\t\t\t\t{ data: championData },\n\t\t\t] = championBuildsQueries;\n\t\t\tconst { buildsCount, builds } = championBuilds.data;\n\n\t\t\tsetChampionInformation({\n\t\t\t\tchampionBuilds: builds,\n\t\t\t\tchampionBuildsCount: buildsCount,\n\t\t\t\tchampionData: championData.data[0],\n\t\t\t});\n\t\t}\n\t}, [eachQueryHasLoaded]);\n\n\tuseEffect(() => {\n\t\tif (newBuildsRetrieved) {\n\t\t\tconst { data } = newBuildsRetrieved;\n\t\t\tconst { hasNextPage, builds: newBuilds } = data;\n\n\t\t\t// REMOVES LOAD MORE BUTTON\n\t\t\t// If there is no more next page\n\t\t\tif (!hasNextPage) {\n\t\t\t\tsetDisableLoadMoreBuilds(true);\n\t\t\t}\n\n\t\t\t// but still display the remaining builds from the previous pages\n\t\t\tsetChampionInformation((prev: any) => {\n\t\t\t\treturn {\n\t\t\t\t\t...prev,\n\t\t\t\t\tchampionBuilds: [...prev.championBuilds, ...newBuilds],\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}, [newBuildsRetrieved]);\n\n\tuseEffect(() => {\n\t\tpage.current = page.current + 1;\n\n\t\tif (getMoreBuildsClick) {\n\t\t\tsetGetMoreBuildsClick(false);\n\t\t}\n\t}, [getMoreBuildsClick]);\n\n\treturn (\n\t\t<>\n\t\t\t<Helmet>\n\t\t\t\t<title>\n\t\t\t\t\t{championInformation.championData.championName} Builds and Guides -\n\t\t\t\t\tLeague of Legends: Wild Rift | Rift Builds\n\t\t\t\t</title>\n\t\t\t</Helmet>\n\n\t\t\t<div className='page-container'>\n\t\t\t\t<GoogleAd slot='2632263898' />\n\n\t\t\t\t{renderErrorComponent ? <PageNotFound /> : null}\n\n\t\t\t\t{!eachQueryHasLoaded && !renderErrorComponent ? (\n\t\t\t\t\t<ComponentLoading />\n\t\t\t\t) : null}\n\n\t\t\t\t{eachQueryHasLoaded && !renderErrorComponent ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{/* Champion Data */}\n\t\t\t\t\t\t<ChampionData\n\t\t\t\t\t\t\tchampionData={championInformation.championData}\n\t\t\t\t\t\t\tbuildsCount={championInformation.championBuildsCount}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* Builds */}\n\t\t\t\t\t\t<BuildsList\n\t\t\t\t\t\t\tbuilds={championInformation.championBuilds}\n\t\t\t\t\t\t\tchampionData={championInformation.championData}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* \n\t\t\t\t\t\t\tLoad More Button \n\t\t\t\t\t\t\t\t- Display button if length of builds is greater than or equal to five\n\t\t\t\t\t\t\t\t  which is the number of items per load AND haven't viewed all the builds yet\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t{championInformation.championBuilds.length >= 5 &&\n\t\t\t\t\t\t!disableLoadMoreBuilds ? (\n\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\tdisplay='flex'\n\t\t\t\t\t\t\t\tjustifyContent='center'\n\t\t\t\t\t\t\t\tclassName={styles.loadMoreContainer}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={getMoreBuilds}\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tclassName={`${styles.loadMoreButton} text-white-primary`}\n\t\t\t\t\t\t\t\t\tdisabled={disableLoadMoreBuilds}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{status === 'loading' ? 'Loading...' : 'Load more builds'}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{disableLoadMoreBuilds && (\n\t\t\t\t\t\t\t<p className={`${styles.noMoreBuildsCTA} text-white-secondary`}>\n\t\t\t\t\t\t\t\tThere are no more builds available.{' '}\n\t\t\t\t\t\t\t\t<span className='text-primary'>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\thref='/build/create'\n\t\t\t\t\t\t\t\t\t\tonClick={handleCreateMoreBuildsForChampion}\n\t\t\t\t\t\t\t\t\t\tclassName='text-primary'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate a build for&nbsp;\n\t\t\t\t\t\t\t\t\t\t{championInformation.championData.championName}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t&nbsp;instead.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\n\t\t\t\t<GoogleAd slot='8493312270' />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default withRouter(ChampionBuildsPage);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PrivacyPolicyPage\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\index.tsx",["409","410","411"],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\index.tsx",["412","413","414"],"import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\n// @ts-ignore - No types for this module\nimport { Helmet } from 'react-helmet';\nimport { RouteComponentProps } from 'react-router';\nimport { useQuery, useQueryClient } from 'react-query';\n\n// Shared\nimport { getPlayerBuild } from '../../shared/services/buildsRequests';\nimport { ItemType } from '../../shared/constants/constants';\n\n// MaterialUI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n\n// Components\nimport BuildDescription from './BuildDescription';\nimport BuildItem from './BuildItem';\nimport ComponentLoading from '../../shared/components/Loading/ComponentLoading';\nimport GoogleAd from '../../shared/components/GoogleAd/GoogleAd';\nimport PageNotFound from '../../shared/components/PageError/PageNotFound/PageNotFound';\nimport PlayerBuildHeader from './PlayerBuildHeader';\nimport PlayerBuildFooter from './PlayerBuildFooter';\nimport RuneItem from './RuneItem';\nimport SectionDivider from './SectionDivider';\nimport SpellItem from './Spellitem';\n\n// Types\nimport { BuildInterface } from '../../shared/interfaces/Build';\nimport { ItemInterface } from '../../shared/interfaces/GameData';\n\n// CSS\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tlarge: {\n\t\twidth: theme.spacing(7),\n\t\theight: theme.spacing(7),\n\t},\n}));\n\ninterface PlayerBuildProps extends RouteComponentProps<{ buildId: string }> {}\n\nconst PlayerBuild: React.FC<PlayerBuildProps> = (props) => {\n\tconst { match } = props;\n\tconst classes = useStyles();\n\n\t// Access the query client\n\tconst queryClient = useQueryClient();\n\n\tconst { data, status, error, isError, isLoading } = useQuery(\n\t\t'playerBuild',\n\t\t() => getPlayerBuild(match.params.buildId)\n\t);\n\n\tconst [build, setBuild] = useState<BuildInterface>();\n\n\tconst [renderErrorComponent, setRenderErrorComponent] = useState(false);\n\n\tuseEffect(() => {\n\t\t// \"&& data\" to get rid of \"data.data is possibly undefined\"\n\t\tif (status === 'success' && data) {\n\t\t\tsetBuild(data.data);\n\t\t} else if (isError && error) {\n\t\t\tsetRenderErrorComponent(true);\n\t\t}\n\t}, [status]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className={`${classes.root} page-container`}>\n\t\t\t\t<GoogleAd slot='2632263898' />\n\n\t\t\t\t{!queryClient.isFetching() && !renderErrorComponent && build ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t\t<title>\n\t\t\t\t\t\t\t\t{build.champion.championName} Build and Guide by{' '}\n\t\t\t\t\t\t\t\t{build.username}\n\t\t\t\t\t\t\t\t&nbsp;| Rift Builds\n\t\t\t\t\t\t\t</title>\n\t\t\t\t\t\t</Helmet>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Box className='text-white-pure'>\n\t\t\t\t\t\t\t\t<PlayerBuildHeader build={build} />\n\n\t\t\t\t\t\t\t\t<BuildDescription description={build.description} />\n\n\t\t\t\t\t\t\t\t{/* PRIMARY ITEMS */}\n\t\t\t\t\t\t\t\t<SectionDivider title='Primary Items' />\n\t\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t{build.itemsConfirmed\n\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t(item: ItemInterface) => item.type !== ItemType.OPTIONAL\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.map((item: ItemInterface, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn <BuildItem key={index} item={item} />;\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t{/* OPTIONAL ITEMS */}\n\t\t\t\t\t\t\t\t<SectionDivider title='Optional Items' />\n\t\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t{build.itemsConfirmed\n\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t(item: ItemInterface) => item.type !== ItemType.PRIMARY\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.map((item: ItemInterface, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn <BuildItem key={index} item={item} />;\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t{/* RUNES */}\n\t\t\t\t\t\t\t\t<SectionDivider title='Runes' />\n\t\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t{/* KEYSTONE RUNE */}\n\t\t\t\t\t\t\t\t\t\t<RuneItem rune={build.runes.keystone} />\n\n\t\t\t\t\t\t\t\t\t\t{/* DOMINATION RUNE */}\n\t\t\t\t\t\t\t\t\t\t<RuneItem rune={build.runes.domination} />\n\n\t\t\t\t\t\t\t\t\t\t{/* RESOLVE RUNE */}\n\t\t\t\t\t\t\t\t\t\t<RuneItem rune={build.runes.resolve} />\n\n\t\t\t\t\t\t\t\t\t\t{/* INSPIRATION RUNE BOX */}\n\t\t\t\t\t\t\t\t\t\t<RuneItem rune={build.runes.inspiration} />\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t{/* SPELLS */}\n\t\t\t\t\t\t\t\t<SectionDivider title='Summoner Spells' />\n\t\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Box p={1}>\n\t\t\t\t\t\t\t\t\t\t\t<SpellItem spell={build.spells.spellOne} />\n\t\t\t\t\t\t\t\t\t\t\t<SpellItem spell={build.spells.spellTwo} />\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t{/* FOOTER*/}\n\t\t\t\t\t\t\t\t<PlayerBuildFooter\n\t\t\t\t\t\t\t\t\tbuildId={build.id}\n\t\t\t\t\t\t\t\t\tchampionName={build.champion.championName}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<ComponentLoading />\n\t\t\t\t)}\n\n\t\t\t\t<GoogleAd slot='8493312270' />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default withRouter(PlayerBuild);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQPage\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\index.tsx",["415","416"],"import React, { useState, useEffect } from 'react';\nimport { Redirect, withRouter, RouteComponentProps } from 'react-router-dom';\n// @ts-ignore - No types for this module\nimport { Helmet } from 'react-helmet';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../shared/store/actions';\n\n// Shared\nimport {\n\tgetItemFromSession,\n\tremoveItemFromSession,\n} from '../../../shared/utils/sessionStorage';\nimport { saveBuild } from '../../../shared/services/buildsRequests';\nimport { Message } from '../../../shared/constants/validationMessages';\nimport { BuildValidationHelper } from '../../../shared/utils/buildValidationHelpers';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\n\n// Components\nimport BackdropLoading from '../../../shared/components/Loading/Backdrop';\nimport BuildInformation from './BuildInformation';\nimport CreateBuildHeader from './Header';\nimport GeneralInformation from './GeneralInformation';\nimport GoogleAd from '../../../shared/components/GoogleAd/GoogleAd';\nimport PlayerInformation from './PlayerInformation';\nimport Stepper from './Stepper';\nimport Snackbars from '../../../shared/components/AlertPopup/AlertPopup';\n\n// CSS\n\n// Types\nimport {\n\tsnackbarControlsInterface,\n\tValidationResult,\n} from '../../../shared/interfaces/interfaces';\nimport { ChampionInterface } from '../../../shared/interfaces/GameData';\nimport { RootState } from '../../../shared/interfaces/GlobalStore';\n\nconst CreateBuild: React.FC<CreateBuildProps> = (props) => {\n\t// Game Data PROPS\n\tconst { gameData } = props;\n\tconst { roles, champions, items, runes, spells, ranks } = gameData;\n\t// Build PROPS\n\tconst { completeBuild, resetBuild, setChampionSelected } = props;\n\t// ReCaptcha PROPS\n\tconst { recaptcha } = props;\n\tconst { recaptchaRef, recaptchaToken } = recaptcha;\n\tconst { resetRecaptchToken } = props;\n\t// Snackbar Controls PROPS\n\tconst { setSnackbarControls } = props;\n\n\t// Stores build data from database after successful creation\n\tconst [savedBuild, setSavedBuild] = useState({\n\t\t// has \"id\" property for page redirection ( if(hasSubmittedBuild) )\n\t\t// else gives an error that savedBuild.id isn't defined\n\t\tid: '',\n\t});\n\tconst [activeStep, setActiveStep] = useState(0);\n\tconst [openBackdrop, setOpenBackdrop] = useState<boolean>(false);\n\tconst [hasSubmittedBuild, setHasSubmittedBuild] = useState(false);\n\n\tconst [openRecaptcha, setOpenRecaptcha] = useState(false);\n\n\tconst resetCaptcha = () => {\n\t\t// recaptchaRef.current is possibly null so it needs to be validated before reset\n\t\tif (recaptchaRef.current) {\n\t\t\trecaptchaRef.current.reset();\n\t\t\tresetRecaptchToken('');\n\t\t}\n\t};\n\n\tlet componentToDisplay;\n\tif (activeStep === 0) {\n\t\tcomponentToDisplay = <GeneralInformation />;\n\t} else if (activeStep === 1) {\n\t\tcomponentToDisplay = <BuildInformation />;\n\t} else if (activeStep === 2) {\n\t\tcomponentToDisplay = <PlayerInformation />;\n\t}\n\n\tconst validateStep = () => {\n\t\t// Validations for EACH step\n\t\t// isValidStep returns ValidationResult Interface\n\t\tconst isValidStep: ValidationResult = BuildValidationHelper.validateStep(\n\t\t\tactiveStep,\n\t\t\tcompleteBuild,\n\t\t\tchampions,\n\t\t\titems,\n\t\t\trunes,\n\t\t\tspells,\n\t\t\troles\n\t\t);\n\n\t\t// Check if step is not valid\n\t\t// If not valid, return false - show error snackbar\n\t\t// If valid, return true\n\t\tif (!isValidStep.result) {\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: isValidStep.message,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst submitBuild = async () => {\n\t\t// Validations for WHOLE build\n\t\t// isValidBuild returns ValidationResult Interface\n\t\tconst isValidBuild: ValidationResult = BuildValidationHelper.validateBuild(\n\t\t\tcompleteBuild,\n\t\t\tchampions,\n\t\t\titems,\n\t\t\trunes,\n\t\t\tspells,\n\t\t\tranks,\n\t\t\troles\n\t\t);\n\n\t\tif (isValidBuild.result) {\n\t\t\tsetOpenRecaptcha(true);\n\n\t\t\tif (!recaptchaToken) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetOpenBackdrop(true);\n\n\t\t\tconst saveToDatabase = await saveBuild(completeBuild, recaptchaToken)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tsetSavedBuild(res.data);\n\t\t\t\t\tsetHasSubmittedBuild(true);\n\t\t\t\t\tresetBuild();\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tsetOpenBackdrop(false);\n\n\t\t\t\t\t// Check what's the error\n\t\t\t\t\t// If error is from rate limiter, return creating too many builds message,\n\t\t\t\t\t// else, return generic error message\n\t\t\t\t\tif (\n\t\t\t\t\t\terr.response.status === 429 &&\n\t\t\t\t\t\t// Check if error message is the same as ERROR.CREATING_TOO_MANY_BUILDS\n\t\t\t\t\t\terr.response.data === Message.ERROR.CREATING_TOO_MANY_BUILDS\n\t\t\t\t\t) {\n\t\t\t\t\t\tsetSnackbarControls({\n\t\t\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\t\t\tmessage: Message.ERROR.CREATING_TOO_MANY_BUILDS,\n\t\t\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetSnackbarControls({\n\t\t\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\t\t\tmessage: Message.ERROR.FAILED_TO_SAVE_BUILD,\n\t\t\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\t// Check if there's a value for message property,\n\t\t\t// else, use a generic error message\n\t\t\tif (isValidBuild.message) {\n\t\t\t\tsetSnackbarControls({\n\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\tmessage: isValidBuild.message,\n\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetSnackbarControls({\n\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\tmessage: Message.ERROR.FAILED_TO_SAVE_BUILD,\n\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresetCaptcha();\n\n\t\t\treturn;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\t// Retrieve session data for the champion a user will create a build for\n\t\t// This one is used if there are no builds for a champion and a user wants to create a build for that champion\n\t\tconst championSelectedToCreateBuild:\n\t\t\t| string\n\t\t\t| null\n\t\t\t| undefined = getItemFromSession('championToCreateBuild');\n\n\t\tif (championSelectedToCreateBuild) {\n\t\t\tsetChampionSelected(JSON.parse(championSelectedToCreateBuild));\n\t\t}\n\n\t\treturn removeItemFromSession('championToCreateBuild');\n\t}, []);\n\n\tif (hasSubmittedBuild) {\n\t\treturn (\n\t\t\t<Redirect\n\t\t\t\tto={{\n\t\t\t\t\tpathname: `/build/${savedBuild.id}`,\n\t\t\t\t\tstate: { from: props.location },\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Helmet>\n\t\t\t\t<title>Create a build - Rift Builds</title>\n\t\t\t</Helmet>\n\t\t\t<Box>\n\t\t\t\t<GoogleAd slot='2632263898' />\n\n\t\t\t\t<BackdropLoading openBackdrop={openBackdrop} />\n\t\t\t\t<Snackbars />\n\t\t\t\t<CreateBuildHeader />\n\n\t\t\t\t<Stepper\n\t\t\t\t\tactiveStep={activeStep}\n\t\t\t\t\tcomponentToDisplay={componentToDisplay}\n\t\t\t\t\topenRecaptcha={openRecaptcha}\n\t\t\t\t\tresetCaptcha={resetCaptcha}\n\t\t\t\t\tsetActiveStep={setActiveStep}\n\t\t\t\t\tsubmitBuild={submitBuild}\n\t\t\t\t\tvalidateStep={validateStep}\n\t\t\t\t/>\n\n\t\t\t\t<GoogleAd slot='8493312270' />\n\t\t\t</Box>\n\t\t</>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tgameData: state.gameData,\n\t\tcompleteBuild: state.build,\n\t\trecaptcha: state.recaptcha,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tresetBuild: () => dispatch({ type: actionTypes.BUILD_RESET }),\n\t\tresetRecaptchToken: (token: string) =>\n\t\t\tdispatch({ type: actionTypes.RECAPTCHA_SET_TOKEN, data: token }),\n\t\tsetSnackbarControls: (newControls: snackbarControlsInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.SNACKBAR_SET_CONTROLS,\n\t\t\t\tdata: newControls.snackbarControls,\n\t\t\t}),\n\t\tsetChampionSelected: (newChampionSelected: ChampionInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.BUILD_SET_CHAMPIONSELECTED,\n\t\t\t\tdata: newChampionSelected,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype CreateBuildProps = PropsFromRedux & RouteComponentProps;\n\nexport default connector(withRouter(CreateBuild));\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\buildsRequests.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\validationMessages.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\buildValidationHelpers.ts",["417"],"import {\n\tChampionInterface,\n\tItemInterface,\n\tRankInterface,\n\tRoleInterface,\n\tRuneInterface,\n\tSpellInterface,\n} from '../interfaces/GameData';\nimport { BuildInterface } from '../interfaces/Build';\nimport { ValidationResult } from '../interfaces/interfaces';\nimport { BuildValidation } from './buildValidation';\nimport { RequiredLength } from '../constants/requiredLength';\n\n// resultHandler is the object that gets returned for each validation\n// and the value of CreateBuild.tsx's isValidBuild variable\nconst resultHandler = (message: string | null, result: boolean) => {\n\treturn {\n\t\tmessage,\n\t\tresult,\n\t};\n};\n\nconst trimString = (text: string) => {\n\treturn text.trim();\n};\n\nconst turnToString = (text: string) => {\n\treturn String(text);\n};\n\nconst isValidString = (text: string) => {\n\treturn typeof text === 'string';\n};\n\nconst isValidReasonLength = (text: string) => {\n\treturn (\n\t\ttext.length >= RequiredLength.REASON.MIN_LENGTH &&\n\t\ttext.length <= RequiredLength.REASON.MAX_LENGTH\n\t);\n};\n\nconst isValidReasonTypeAndLength = (\n\tobjectToCheck: RuneInterface | ItemInterface\n) => {\n\tconst { reason } = objectToCheck;\n\n\t// If there's a reason property, check if it's the right type\n\t// and right length\n\t// This will always return true if it doesn't fail any of the\n\t// two conditions\n\tif (reason) {\n\t\tconst isValidType = isValidString(reason);\n\t\tconst isValidLength = isValidReasonLength(reason);\n\n\t\tif (!(isValidType && isValidLength)) return false;\n\t}\n\n\treturn true;\n};\n\n// Find all validations that returned false\n// Return first validation that failed, hence [0]\nconst findFailedValidation = (\n\tvalidationsCollection: Array<ValidationResult>\n) => {\n\treturn validationsCollection.filter((validation) => {\n\t\tconst { result } = validation;\n\n\t\tif (result === false) {\n\t\t\treturn validation;\n\t\t}\n\t})[0];\n};\n\nconst checkAllValidationsAreValid = (\n\tvalidationsCollection: Array<ValidationResult>\n) => {\n\treturn validationsCollection.every((validation: ValidationResult) => {\n\t\tconst { result } = validation;\n\n\t\treturn result === true;\n\t});\n};\n\n// Applies toString() and trim() to each text input\nconst sanitizeBuildTextInputs = (build: BuildInterface) => {\n\tconst { buildTitle, description, username, itemsConfirmed } = build;\n\n\t// run turnToString() on each item reason property, if it's defined\n\tconst sanitizeItemReasons = itemsConfirmed.map((item: ItemInterface) => {\n\t\tconst { reason } = item;\n\n\t\tif (reason) {\n\t\t\treturn {\n\t\t\t\t...item,\n\t\t\t\treason: turnToString(trimString(reason)),\n\t\t\t};\n\t\t}\n\n\t\t// return item if there's no reason property\n\t\treturn item;\n\t});\n\n\treturn {\n\t\t...build,\n\t\tbuildTitle: turnToString(trimString(buildTitle)),\n\t\tdescription: turnToString(trimString(description)),\n\t\tusername: turnToString(trimString(username)),\n\t\titemsConfirmed: sanitizeItemReasons,\n\t};\n};\n\n// Validations for each step\nconst validateStep = (\n\tactiveStep: number,\n\tcompleteBuild: BuildInterface,\n\tchampions: Array<ChampionInterface>,\n\titems: Array<ItemInterface>,\n\trunes: Array<RuneInterface>,\n\tspells: Array<SpellInterface>,\n\troles: Array<RoleInterface>\n) => {\n\tlet allValidationsAreValid = false;\n\tlet validationsCollection: Array<ValidationResult> = [];\n\n\tif (activeStep === 0) {\n\t\tconst HAS_BUILD_TITLE = BuildValidation.HAS_BUILD_TITLE(completeBuild);\n\t\tconst IS_VALID_BUILD_TITLE = BuildValidation.IS_VALID_BUILD_TITLE(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_ROLE = BuildValidation.IS_VALID_ROLE(completeBuild, roles);\n\t\tconst IS_VALID_GAME_MODE = BuildValidation.IS_VALID_GAME_MODE(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_BUILD_DESCRIPTION = BuildValidation.IS_VALID_BUILD_DESCRIPTION(\n\t\t\tcompleteBuild\n\t\t);\n\n\t\tvalidationsCollection = [\n\t\t\tHAS_BUILD_TITLE,\n\t\t\tIS_VALID_BUILD_TITLE,\n\t\t\tIS_VALID_ROLE,\n\t\t\tIS_VALID_GAME_MODE,\n\t\t\tIS_VALID_BUILD_DESCRIPTION,\n\t\t];\n\n\t\tallValidationsAreValid = checkAllValidationsAreValid(validationsCollection);\n\t} else if (activeStep === 1) {\n\t\tconst IS_VALID_CHAMPION = BuildValidation.IS_VALID_CHAMPION(\n\t\t\tcompleteBuild,\n\t\t\tchampions\n\t\t);\n\t\tconst HAS_ITEMS_SELECTED = BuildValidation.HAS_ITEMS_SELECTED(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = BuildValidation.HAS_THREE_TO_SIX_PRIMARY_ITEMS(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_ITEMS_SELECTED = BuildValidation.IS_VALID_ITEMS_SELECTED(\n\t\t\tcompleteBuild,\n\t\t\titems\n\t\t);\n\t\tconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = BuildValidation.IS_VALID_NUMBER_OF_ITEMS_SELECTED(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_RUNES = BuildValidation.IS_VALID_RUNES(completeBuild, runes);\n\t\tconst IS_VALID_SPELLS = BuildValidation.IS_VALID_SPELLS(\n\t\t\tcompleteBuild,\n\t\t\tspells\n\t\t);\n\n\t\tvalidationsCollection = [\n\t\t\tIS_VALID_CHAMPION,\n\t\t\tHAS_ITEMS_SELECTED,\n\t\t\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\t\tIS_VALID_ITEMS_SELECTED,\n\t\t\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\t\t\tIS_VALID_RUNES,\n\t\t\tIS_VALID_SPELLS,\n\t\t];\n\n\t\tallValidationsAreValid = checkAllValidationsAreValid(validationsCollection);\n\t}\n\n\tif (allValidationsAreValid) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\t// Find all validations that returned false\n\t// Return first validation that failed, hence [0]\n\tconst invalidValidation = findFailedValidation(validationsCollection);\n\n\treturn resultHandler(invalidValidation.message, false);\n};\n\n// For FINAL validation\nconst validateBuild = (\n\tcompleteBuild: BuildInterface,\n\tchampions: Array<ChampionInterface>,\n\titems: Array<ItemInterface>,\n\trunes: Array<RuneInterface>,\n\tspells: Array<SpellInterface>,\n\tranks: Array<RankInterface>,\n\troles: Array<RoleInterface>\n) => {\n\tconst HAS_BUILD_TITLE = BuildValidation.HAS_BUILD_TITLE(completeBuild);\n\tconst IS_VALID_BUILD_TITLE = BuildValidation.IS_VALID_BUILD_TITLE(\n\t\tcompleteBuild\n\t);\n\tconst HAS_ITEMS_SELECTED = BuildValidation.HAS_ITEMS_SELECTED(completeBuild);\n\tconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = BuildValidation.HAS_THREE_TO_SIX_PRIMARY_ITEMS(\n\t\tcompleteBuild\n\t);\n\tconst HAS_USERNAME = BuildValidation.HAS_USERNAME(completeBuild);\n\tconst IS_VALID_USERNAME = BuildValidation.IS_VALID_USERNAME(completeBuild);\n\tconst IS_VALID_ROLE = BuildValidation.IS_VALID_ROLE(completeBuild, roles);\n\tconst IS_VALID_GAME_MODE = BuildValidation.IS_VALID_GAME_MODE(completeBuild);\n\tconst IS_VALID_BUILD_DESCRIPTION = BuildValidation.IS_VALID_BUILD_DESCRIPTION(\n\t\tcompleteBuild\n\t);\n\tconst IS_VALID_CHAMPION = BuildValidation.IS_VALID_CHAMPION(\n\t\tcompleteBuild,\n\t\tchampions\n\t);\n\tconst IS_VALID_ITEMS_SELECTED = BuildValidation.IS_VALID_ITEMS_SELECTED(\n\t\tcompleteBuild,\n\t\titems\n\t);\n\tconst IS_VALID_RUNES = BuildValidation.IS_VALID_RUNES(completeBuild, runes);\n\tconst IS_VALID_SPELLS = BuildValidation.IS_VALID_SPELLS(\n\t\tcompleteBuild,\n\t\tspells\n\t);\n\tconst IS_VALID_RANK = BuildValidation.IS_VALID_RANK(completeBuild, ranks);\n\tconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = BuildValidation.IS_VALID_NUMBER_OF_ITEMS_SELECTED(\n\t\tcompleteBuild\n\t);\n\tconst IS_VALID_REGION = BuildValidation.IS_VALID_REGION(completeBuild);\n\n\tconst validationsCollection = [\n\t\tHAS_BUILD_TITLE,\n\t\tIS_VALID_BUILD_TITLE,\n\t\tHAS_ITEMS_SELECTED,\n\t\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\tHAS_USERNAME,\n\t\tIS_VALID_USERNAME,\n\t\tIS_VALID_ROLE,\n\t\tIS_VALID_GAME_MODE,\n\t\tIS_VALID_BUILD_DESCRIPTION,\n\t\tIS_VALID_CHAMPION,\n\t\tIS_VALID_ITEMS_SELECTED,\n\t\tIS_VALID_RUNES,\n\t\tIS_VALID_SPELLS,\n\t\tIS_VALID_RANK,\n\t\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\t\tIS_VALID_REGION,\n\t];\n\n\tconst allValidationsAreValid = checkAllValidationsAreValid(\n\t\tvalidationsCollection\n\t);\n\n\tif (allValidationsAreValid) {\n\t\treturn {\n\t\t\tmessage: null,\n\t\t\tresult: true,\n\t\t};\n\t}\n\n\treturn findFailedValidation(validationsCollection);\n};\n\nexport const BuildValidationHelper = {\n\tresultHandler,\n\tvalidateBuild,\n\tvalidateStep,\n\tfindFailedValidation,\n\tcheckAllValidationsAreValid,\n\tsanitizeBuildTextInputs,\n\tisValidReasonTypeAndLength,\n\tisValidString,\n\tisValidReasonLength,\n};\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\sessionStorage.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\AlertPopup\\AlertPopup.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\GoogleAd\\GoogleAd.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\Backdrop.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\isValidUser.ts",["418"],"import { UserInterface } from '../interfaces/GlobalStore';\n\nexport const isValidUser = (user: any) => {\n\tif (user && Object.keys(user).length) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\services\\firebaseApp.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\requiredLength.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\buildValidation.ts",["419"],"import {\n\tChampionInterface,\n\tItemInterface,\n\tRankInterface,\n\tRoleInterface,\n\tRuneInterface,\n\tSpellInterface,\n} from '../interfaces/GameData';\nimport { BuildInterface } from '../interfaces/Build';\nimport { BuildValidationHelper } from './buildValidationHelpers';\nimport { ItemType, GameMode, GameRegion } from '../constants/constants';\nimport { RequiredLength } from '../constants/requiredLength';\nimport { Message } from '../constants/validationMessages';\n\nconst HAS_BUILD_TITLE = (build: BuildInterface) => {\n\tif (build.buildTitle) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NO_BUILD_TITLE,\n\t\tfalse\n\t);\n};\n\nconst HAS_ITEMS_SELECTED = (build: BuildInterface) => {\n\tif (build.itemsConfirmed.length !== 0) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NO_ITEMS_SELECTED,\n\t\tfalse\n\t);\n};\n\nconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = (build: BuildInterface) => {\n\tconst lengthOfPrimaryItems = build.itemsConfirmed.filter(\n\t\t(item: ItemInterface) => item.type === 'primary'\n\t).length;\n\n\tconst hasThreeToSixPrimaryItems =\n\t\tlengthOfPrimaryItems >= RequiredLength.ITEMS.PRIMARY.MIN_LENGTH &&\n\t\tlengthOfPrimaryItems <= RequiredLength.ITEMS.PRIMARY.MAX_LENGTH;\n\n\tif (hasThreeToSixPrimaryItems) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.DOES_NOT_HAVE_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\tfalse\n\t);\n};\n\nconst HAS_USERNAME = (build: BuildInterface) => {\n\tif (build.username) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(Message.ERROR.NO_USERNAME, false);\n};\n\nconst IS_VALID_BUILD_TITLE = (build: BuildInterface) => {\n\tconst { buildTitle } = build;\n\n\tconst isTypeString = BuildValidationHelper.isValidString(buildTitle);\n\tconst isValidLength =\n\t\tbuildTitle.length >= RequiredLength.BUILD_TITLE.MIN_LENGTH &&\n\t\tbuildTitle.length <= RequiredLength.BUILD_TITLE.MAX_LENGTH;\n\n\tif (isTypeString && isValidLength) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_BUILD_TITLE,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_USERNAME = (build: BuildInterface) => {\n\tconst { username } = build;\n\n\tconst isTypeString = BuildValidationHelper.isValidString(username);\n\tconst isValidLength =\n\t\tusername.length >= RequiredLength.USERNAME.MIN_LENGTH &&\n\t\tusername.length <= RequiredLength.USERNAME.MAX_LENGTH;\n\n\tif (isTypeString && isValidLength) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_USERNAME,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_ROLE = (build: BuildInterface, roles: Array<RoleInterface>) => {\n\tconst { buildRole } = build;\n\n\t// Checks if buildRole.id and buildRole.roleName has a corresponding object to roles\n\tconst isValidRole =\n\t\troles.filter((role) => {\n\t\t\treturn JSON.stringify(buildRole) === JSON.stringify(role);\n\t\t}).length === 1;\n\n\tif (isValidRole) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_ROLE,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_GAME_MODE = (build: BuildInterface) => {\n\tconst { gameMode } = build;\n\n\tconst isValidGameMode =\n\t\tgameMode === GameMode.NORMAL || gameMode === GameMode.ARAM;\n\tconst isTypeString = BuildValidationHelper.isValidString(gameMode);\n\n\tif (isValidGameMode && isTypeString) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_GAME_MODE,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_BUILD_DESCRIPTION = (build: BuildInterface) => {\n\tconst { description } = build;\n\n\tconst isTypeString = BuildValidationHelper.isValidString(description);\n\tconst isValidLength = BuildValidationHelper.isValidReasonLength(description);\n\n\tif (isTypeString && isValidLength) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_BUILD_DESCRIPTION,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_CHAMPION = (\n\tbuild: BuildInterface,\n\tchampions: Array<ChampionInterface>\n) => {\n\tconst { champion: buildChampion } = build;\n\n\tconst isValidChampion =\n\t\tchampions.filter((champion) => {\n\t\t\t// Checks if both objects have same properties and corresponding values\n\t\t\t// THE ORDER OF PROPERTIES IS IMPORTANT\n\t\t\t// Source: https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n\n\t\t\treturn JSON.stringify(buildChampion) === JSON.stringify(champion);\n\t\t}).length === 1;\n\n\tif (isValidChampion) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_CHAMPION,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_ITEMS_SELECTED = (\n\tbuild: BuildInterface,\n\titems: Array<ItemInterface>\n) => {\n\tconst { itemsConfirmed } = build;\n\n\t// Checks if every reason property of an item is type string and has valid length\n\tconst validReasonTypeAndLength = itemsConfirmed\n\t\t.map((item: ItemInterface) =>\n\t\t\tBuildValidationHelper.isValidReasonTypeAndLength(item)\n\t\t)\n\t\t.every((boolIsTrue) => boolIsTrue);\n\n\t// Removes \"reason\" and \"type\" property which is defined by user\n\tconst modifiedItemsConfirmed = itemsConfirmed.map((item: ItemInterface) => {\n\t\tconst { reason, type, ...modifiedObject } = item;\n\n\t\treturn modifiedObject;\n\t});\n\n\t// Return items from ITEMSCONFIRMED that are in ITEMS\n\tconst validatedItems = items.filter((item) => {\n\t\t// Check if \"some\" items from MODIFIEDITEMSCONFIRMED are found in ITEMS\n\t\tif (\n\t\t\tmodifiedItemsConfirmed.some(\n\t\t\t\t(buildItem) => JSON.stringify(buildItem) === JSON.stringify(item)\n\t\t\t)\n\t\t) {\n\t\t\treturn item;\n\t\t}\n\t});\n\n\t// Check if valid items' (items that are in ITEMS array) length is\n\t// equal to length of ITEMSCONFIRMED\n\tif (\n\t\tvalidatedItems.length === itemsConfirmed.length &&\n\t\tvalidReasonTypeAndLength\n\t) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_ITEMS_SELECTED,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = (build: BuildInterface) => {\n\tconst { itemsConfirmed } = build;\n\n\tconst primaryItems = itemsConfirmed.filter(\n\t\t(item) => item.type === ItemType.PRIMARY\n\t).length;\n\tconst optionalItems = itemsConfirmed.filter(\n\t\t(item) => item.type === ItemType.OPTIONAL\n\t).length;\n\n\tconst isValidPrimaryItemsLength =\n\t\tprimaryItems >= RequiredLength.ITEMS.PRIMARY.MIN_LENGTH &&\n\t\tprimaryItems <= RequiredLength.ITEMS.PRIMARY.MAX_LENGTH;\n\tconst isValidOptionalItemsLength =\n\t\toptionalItems >= RequiredLength.ITEMS.OPTIONAL.MIN_LENGTH &&\n\t\toptionalItems <= RequiredLength.ITEMS.OPTIONAL.MAX_LENGTH;\n\n\tif (isValidPrimaryItemsLength && isValidOptionalItemsLength) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_NUMBER_OF_ITEMS_SELECTED,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_RUNES = (build: BuildInterface, runes: Array<RuneInterface>) => {\n\tconst { runes: buildRunes } = build;\n\tconst { keystone, domination, resolve, inspiration } = buildRunes;\n\n\tconst VALID_KEYSTONE =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...keystoneCopy } = keystone;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(keystoneCopy);\n\t\t}).length === 1 &&\n\t\tBuildValidationHelper.isValidReasonTypeAndLength(keystone);\n\n\tconst VALID_DOMINATION =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...dominationCopy } = domination;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(dominationCopy);\n\t\t}).length === 1 &&\n\t\tBuildValidationHelper.isValidReasonTypeAndLength(domination);\n\n\tconst VALID_RESOLVE =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...resolveCopy } = resolve;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(resolveCopy);\n\t\t}).length === 1 &&\n\t\tBuildValidationHelper.isValidReasonTypeAndLength(resolve);\n\n\tconst VALID_INSPIRATION =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...inspirationCopy } = inspiration;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(inspirationCopy);\n\t\t}).length === 1 &&\n\t\tBuildValidationHelper.isValidReasonTypeAndLength(inspiration);\n\n\tif (\n\t\tVALID_KEYSTONE &&\n\t\tVALID_DOMINATION &&\n\t\tVALID_RESOLVE &&\n\t\tVALID_INSPIRATION\n\t) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_RUNES,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_SPELLS = (\n\tbuild: BuildInterface,\n\tspells: Array<SpellInterface>\n) => {\n\tconst { spells: buildSpells } = build;\n\tconst { spellOne, spellTwo } = buildSpells;\n\n\tconst VALID_SPELL_ONE =\n\t\tspells.filter((spell) => {\n\t\t\treturn JSON.stringify(spell) === JSON.stringify(spellOne);\n\t\t}).length === 1;\n\n\tconst VALID_SPELL_TWO =\n\t\tspells.filter((spell) => {\n\t\t\treturn JSON.stringify(spell) === JSON.stringify(spellTwo);\n\t\t}).length === 1;\n\n\tif (VALID_SPELL_ONE && VALID_SPELL_TWO) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_SPELLS,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_RANK = (build: BuildInterface, ranks: Array<RankInterface>) => {\n\tconst { rank: buildRank } = build;\n\n\tconst isValidRank =\n\t\tranks.filter((rank) => {\n\t\t\treturn JSON.stringify(rank) === JSON.stringify(buildRank);\n\t\t}).length === 1;\n\n\tif (isValidRank) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_RANK,\n\t\tfalse\n\t);\n};\n\nconst IS_VALID_REGION = (build: BuildInterface) => {\n\tconst { region } = build;\n\n\tconst isValidRegion =\n\t\tregion === GameRegion.SEA ||\n\t\tregion === GameRegion.NA ||\n\t\tregion === GameRegion.EUW;\n\tconst isTypeString = BuildValidationHelper.isValidString(region);\n\n\tif (isValidRegion && isTypeString) {\n\t\treturn BuildValidationHelper.resultHandler(null, true);\n\t}\n\n\treturn BuildValidationHelper.resultHandler(\n\t\tMessage.ERROR.NOT_VALID_REGION,\n\t\tfalse\n\t);\n};\n\nexport const BuildValidation = {\n\tHAS_BUILD_TITLE,\n\tHAS_ITEMS_SELECTED,\n\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\tHAS_USERNAME,\n\tIS_VALID_BUILD_TITLE,\n\tIS_VALID_USERNAME,\n\tIS_VALID_ROLE,\n\tIS_VALID_GAME_MODE,\n\tIS_VALID_BUILD_DESCRIPTION,\n\tIS_VALID_CHAMPION,\n\tIS_VALID_ITEMS_SELECTED,\n\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\tIS_VALID_RUNES,\n\tIS_VALID_SPELLS,\n\tIS_VALID_RANK,\n\tIS_VALID_REGION,\n};\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Stepper\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Header\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQPage\\Accordion\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\Spellitem\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\SectionDivider\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\RuneItem\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildHeader\\index.tsx",["420","421"],"import React from 'react';\nimport moment from 'moment';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\n// Shared\nimport { ImagePath } from '../../../shared/utils/imagePath';\nimport { GameMode } from '../../../shared/constants/constants';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n\n// Components\nimport BuildChip from './BuildChip';\n\n// CSS\nimport styles from './Styles.module.css';\n\n// Types\nimport { BuildInterface } from '../../../shared/interfaces/Build';\n\ntype PlayerBuildHeaderProps = {\n\tbuild: BuildInterface;\n};\n\nconst PlayerBuildHeader = (props: PlayerBuildHeaderProps) => {\n\tconst { build } = props;\n\tconst {\n\t\tbuildTitle,\n\t\tbuildRole,\n\t\tchampion,\n\t\tdateSubmitted,\n\t\tgameMode,\n\t\tpatchVersion,\n\t\trank,\n\t\tregion,\n\t\tusername,\n\t} = build;\n\tconst { id: roleId, roleName } = buildRole;\n\n\tlet gameModeToDisplay;\n\tswitch (gameMode) {\n\t\tcase GameMode.NORMAL:\n\t\t\tgameModeToDisplay = 'Normal';\n\t\t\tbreak;\n\t\tcase GameMode.ARAM:\n\t\t\tgameModeToDisplay = 'ARAM';\n\t\t\tbreak;\n\t}\n\n\treturn (\n\t\t<Grid container spacing={2} className={styles.playerBuildHeaderContainer}>\n\t\t\t{/* Champion Image */}\n\t\t\t<Grid item>\n\t\t\t\t<Box className={styles.championImageContainer}>\n\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\tsrc={ImagePath.Champion(champion.id)}\n\t\t\t\t\t\tclassName={styles.championImage}\n\t\t\t\t\t\ttitle={champion.championName}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <Box\n\t\t\t\t\t\tclassName={styles.buildChampionContainer}\n\t\t\t\t\t\tdisplay='flex'\n\t\t\t\t\t\tjustifyContent='center'\n\t\t\t\t\t>\n\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\tsrc={`/images/wildriftroles/${roleId}.png`}\n\t\t\t\t\t\t\tclassName={styles.buildRoleImage}\n\t\t\t\t\t\t\ttitle={roleName}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span className={`${styles.buildChampionText} text-white-primary`}>\n\t\t\t\t\t\t\t{champion.championName}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Box> */}\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\n\t\t\t{/* Champion Name, Build Title, and Username */}\n\t\t\t<Grid item xs={12} sm>\n\t\t\t\t<Box\n\t\t\t\t\tclassName={`${styles.buildInformationContainer} text-white-primary playerBuildBuildInformationContainer`}\n\t\t\t\t>\n\t\t\t\t\t<p\n\t\t\t\t\t\tclassName={`${styles.buildTitleText} text-white-secondary text-bold`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{buildTitle.toString()}&nbsp;\n\t\t\t\t\t</p>\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<p className={`${styles.usernameText} text-white-primary`}>\n\t\t\t\t\t\t\t\tBuild by {username}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<Box className={styles.buildChipsContainer}>\n\t\t\t\t\t\t\t{/* Capitalize first letter of Game Mode */}\n\t\t\t\t\t\t\t<BuildChip property='Mode' value={gameModeToDisplay} />\n\t\t\t\t\t\t\t<BuildChip property='Lane' value={buildRole.roleName} />\n\t\t\t\t\t\t\t<BuildChip property='Rank' value={rank.rankName} />\n\t\t\t\t\t\t\t<BuildChip property='Region' value={region.toUpperCase()} />\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\n\t\t\t<Grid item xs={12} sm className='playerBuildHeaderMiscDataGrid'>\n\t\t\t\t<Box\n\t\t\t\t\tclassName={`${styles.miscellaneousDataContainer} playerBuildHeaderMiscDataContainer`}\n\t\t\t\t>\n\t\t\t\t\t<p className={`${styles.patchText} buildPatchText`}>\n\t\t\t\t\t\tPatch {patchVersion}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p\n\t\t\t\t\t\tclassName={`${styles.buildDateSubmitted} text-white-secondary buildDateSubmittedText`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{moment(dateSubmitted).format('MM/DD/YYYY')}\n\t\t\t\t\t</p>\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default PlayerBuildHeader;\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\BuildItem\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\BuildDescription\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\ChampionsList\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\imagePath.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\SpellPopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\RunePopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\ItemPopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\championNameToUrlString.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildDescription\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildGameMode\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildTitle\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\GeneralInformation\\BuildRole\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerRank\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerUsername\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\PlayerInformation\\PlayerRegion\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\Stepper\\StepperButtons\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ChampionSelect\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelect\\index.tsx",["422"],"import React, { useState } from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../shared/store/actions';\n\n// Shared\nimport { ImagePath } from '../../../../../shared/utils/imagePath';\nimport {\n\tItemType,\n\tItemStatus,\n} from '../../../../../shared/constants/constants';\nimport { DefaultSelectedState } from '../../../../../shared/constants/defaultSelectedState';\nimport { RequiredLength } from '../../../../../shared/constants/requiredLength';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\n// Components\nimport ItemsSelected from '../ItemsSelected';\n\n// CSS\nimport globalstyles from '../../Styles.module.css';\nimport styles from './Styles.module.css';\n\n// Types\nimport { ItemInterface } from '../../../../../shared/interfaces/GameData';\nimport { RootState } from '../../../../../shared/interfaces/GlobalStore';\n\nconst ItemsSelect = (props: ItemsSelectProps) => {\n\t// Game Data PROPS\n\tconst { items } = props;\n\t// Build PROPS\n\tconst { itemsConfirmed, setItemsConfirmed } = props;\n\n\tconst [itemSelected, setItemSelected] = useState<ItemInterface>(\n\t\t// Defaults to Item: 'Abyssal Mask' which is the first option\n\t\tDefaultSelectedState.ITEM\n\t);\n\tconst [itemType, setItemType] = useState(ItemType.PRIMARY);\n\tconst [itemReason, setItemReason] = useState('');\n\n\tconst handleItemSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tconst { value: itemId } = e.target;\n\n\t\tconst getItem = items.find((item: ItemInterface) => item.id === itemId);\n\n\t\tif (getItem) {\n\t\t\tsetItemSelected(getItem);\n\t\t}\n\t};\n\n\tconst handleItemTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetItemType(e.target.value);\n\t};\n\n\tconst handleItemExplanationChange = (\n\t\te: React.ChangeEvent<HTMLTextAreaElement>\n\t) => {\n\t\tsetItemReason(e.target.value);\n\t};\n\n\tconst handleDeleteItemClick = (itemId: string) => {\n\t\tconst filteredItems = itemsConfirmed.filter(\n\t\t\t(item: ItemInterface) => item.id !== itemId\n\t\t);\n\n\t\tif (filteredItems) {\n\t\t\tsetItemsConfirmed(filteredItems);\n\t\t}\n\t};\n\n\tconst handleAddItemClick = () => {\n\t\t// Pushes item to itemsConfirmed Array\n\t\tsetItemsConfirmed([\n\t\t\t...itemsConfirmed,\n\t\t\t{ ...itemSelected, type: itemType, reason: itemReason },\n\t\t]);\n\t\tsetItemReason('');\n\t};\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>\n\t\t\t\t6. Items <span className={globalstyles.requiredInput}>*</span>\n\t\t\t</p>\n\t\t\t<p className={globalstyles.inputDescription}>\n\t\t\t\tSelect the items for your build&nbsp;\n\t\t\t</p>\n\n\t\t\t<Box>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t{/* ITEM IMAGE */}\n\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\tsrc={ImagePath.Item(itemSelected.id)}\n\t\t\t\t\t\t\t\tclassName={styles.itemImage}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{/* <SELECT> */}\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tonChange={handleItemSelectChange}\n\t\t\t\t\t\t\t\tclassName={globalstyles.buildSelectInput}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{items.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, status } = item;\n\n\t\t\t\t\t\t\t\t\tif (status !== ItemStatus.REMOVED) {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={itemId}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={globalstyles.buildSelectOption}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\n\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\n\t\t\t\t\t\t\t{/* ITEM TYPE */}\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\t\t\trow\n\t\t\t\t\t\t\t\t\tname='position'\n\t\t\t\t\t\t\t\t\tdefaultValue={ItemType.PRIMARY}\n\t\t\t\t\t\t\t\t\tclassName={styles.radioGroup}\n\t\t\t\t\t\t\t\t\tonChange={handleItemTypeChange}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue={ItemType.PRIMARY}\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\n\t\t\t\t\t\t\t\t\t\tlabel='Primary'\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\n\t\t\t\t\t\t\t\t\t\tclassName={styles.radioButtonContainer}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue={ItemType.OPTIONAL}\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\n\t\t\t\t\t\t\t\t\t\tlabel='Optional'\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\n\t\t\t\t\t\t\t\t\t\tclassName={styles.radioButtonContainer}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t{/* Item Explanation */}\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\tid='itemReason'\n\t\t\t\t\t\t\t\tname='itemReason'\n\t\t\t\t\t\t\t\trows={5}\n\t\t\t\t\t\t\t\tvalue={itemReason}\n\t\t\t\t\t\t\t\tplaceholder='Explanation'\n\t\t\t\t\t\t\t\tclassName={`${styles.explanationTextArea} text-white-disabled`}\n\t\t\t\t\t\t\t\tmaxLength={RequiredLength.REASON.MAX_LENGTH}\n\t\t\t\t\t\t\t\tonChange={(e) => handleItemExplanationChange(e)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\tdisplay='flex'\n\t\t\t\t\t\t\t\tflexDirection='row-reverse'\n\t\t\t\t\t\t\t\tclassName={styles.addItemButtonContainer}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: '#326cac' }}\n\t\t\t\t\t\t\t\t\tonClick={handleAddItemClick}\n\t\t\t\t\t\t\t\t\tclassName={styles.addItemButton}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd Item\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t{/* Items List */}\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t<ItemsSelected handleDeleteItemClick={handleDeleteItemClick} />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\titemsConfirmed: state.build.itemsConfirmed,\n\t\titems: state.gameData.items,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetItemsConfirmed: (items: Array<ItemInterface>) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_ITEMSCONFIRMED, data: items }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype ItemsSelectProps = PropsFromRedux;\n\nexport default connector(ItemsSelect);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\SpellsSelect\\index.tsx",["423"],"import React from 'react';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../shared/store/actions';\n\n// Shared\nimport {\n\tGameMode,\n\tMaps,\n\tSpellNumber,\n} from '../../../../../shared/constants/constants';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n\n// Components\nimport Spell from './Spell/index';\n\n// CSS\nimport globalstyles from '../../Styles.module.css';\n\n// Types\nimport { SpellInterface } from '../../../../../shared/interfaces/GameData';\nimport { RootState } from '../../../../../shared/interfaces/GlobalStore';\n\nconst SpellsSelect = (props: SpellsSelectProps) => {\n\t// Game Data PROPS\n\tconst { spells } = props;\n\t// Build PROPS\n\tconst { gameMode, spellsSelected, setSpellsSelected } = props;\n\n\tconst handleSpellSelectChange = (\n\t\te: React.ChangeEvent<HTMLSelectElement>,\n\t\tspellNumber: number\n\t) => {\n\t\tconst { value: spellId } = e.target;\n\n\t\tconst getSpell = spells.find(\n\t\t\t(spell: SpellInterface) => spell.id === spellId\n\t\t);\n\n\t\tif (getSpell) {\n\t\t\tswitch (spellNumber) {\n\t\t\t\tcase 1:\n\t\t\t\t\tsetSpellsSelected(SpellNumber.SPELL_ONE, getSpell);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsetSpellsSelected(SpellNumber.SPELL_TWO, getSpell);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Filter spells to display based on game mode selected\n\t// Gamemode = NORMAL ? w/o Mark n Dash, Clarity\n\t// Gamemode = ARAM ? w/o Smite\n\t// GameMode = NORMAL ? Display spells that has wild_rift applicable map\n\t// GameMode = ARAM ? Display spells that has howling_abyss applicable map\n\tconst buildSpellsToDisplay = spells.filter((spell: SpellInterface) => {\n\t\tconst { applicableMaps } = spell;\n\n\t\tconst hasHowlingAbyss = applicableMaps.some(\n\t\t\t(map: string) => map === Maps.HOWLING_ABYSS\n\t\t);\n\t\tconst hasWildRift = applicableMaps.some(\n\t\t\t(map: string) => map === Maps.WILD_RIFT\n\t\t);\n\n\t\tif (gameMode === GameMode.NORMAL && hasWildRift) {\n\t\t\treturn spell;\n\t\t} else if (gameMode === GameMode.ARAM && hasHowlingAbyss) {\n\t\t\treturn spell;\n\t\t}\n\t});\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>8. Summoner Spells</p>\n\t\t\t<p className={globalstyles.inputDescription}>\n\t\t\t\tSelect the spells for your build\n\t\t\t</p>\n\n\t\t\t<Grid container item xs={12}>\n\t\t\t\t{/* Spell One */}\n\t\t\t\t<Spell\n\t\t\t\t\tspells={buildSpellsToDisplay}\n\t\t\t\t\tspellNumber={1}\n\t\t\t\t\tspellsSelected={spellsSelected}\n\t\t\t\t\thandleSpellSelectChange={handleSpellSelectChange}\n\t\t\t\t/>\n\n\t\t\t\t{/* Spell Two */}\n\t\t\t\t<Spell\n\t\t\t\t\tspells={buildSpellsToDisplay}\n\t\t\t\t\tspellNumber={2}\n\t\t\t\t\tspellsSelected={spellsSelected}\n\t\t\t\t\thandleSpellSelectChange={handleSpellSelectChange}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tgameMode: state.build.gameMode,\n\t\tspellsSelected: state.build.spells,\n\t\tspells: state.gameData.spells,\n\t};\n};\n\nconst mapDispatchToprops = (dispatch: any) => {\n\treturn {\n\t\tsetSpellsSelected: (spellKey: string, data: SpellInterface) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_SPELLSSELECTED, spellKey, data }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToprops);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype SpellsSelectProps = PropsFromRedux;\n\nexport default connector(SpellsSelect);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\ReCaptcha\\index.tsx",["424"],"import React, { useEffect, useRef, RefObject } from 'react';\nimport { ReCaptcha } from '../../../../shared/config/config';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../shared/store/actions';\n\nconst ReCaptchaComponent = (props: ReCaptchaComponentProps) => {\n\tconst { resetCaptcha } = props;\n\t// RECAPTCHA Props\n\tconst { setRecaptchRef, setRecaptchaToken } = props;\n\n\t// ===== ReCaptcha ===== //\n\tlet ref = useRef<ReCAPTCHA | null>(null);\n\n\tconst recaptchaHandleChange = (value: string | null) => {\n\t\tsetRecaptchaToken(value);\n\t};\n\n\tuseEffect(() => {\n\t\tsetRecaptchRef(ref);\n\t}, []);\n\n\treturn (\n\t\t<ReCAPTCHA\n\t\t\tref={(r) => (ref.current = r)}\n\t\t\tsitekey={ReCaptcha.PUBLIC_KEY!} // Always has a value hence !\n\t\t\tonChange={recaptchaHandleChange}\n\t\t\tonExpired={() => resetCaptcha()}\n\t\t/>\n\t);\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetRecaptchRef: (recaptchaRef: RefObject<ReCAPTCHA | null>) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.RECAPTCHA_SET_REF,\n\t\t\t\tdata: recaptchaRef,\n\t\t\t}),\n\t\tsetRecaptchaToken: (recaptchaToken: string | null) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.RECAPTCHA_SET_TOKEN,\n\t\t\t\tdata: recaptchaToken,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector> & {\n\tresetCaptcha: () => void;\n};\n\ntype ReCaptchaComponentProps = PropsFromRedux;\n\nexport default connector(ReCaptchaComponent);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildHeader\\BuildChip\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\CopyBuildLink\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuildPage\\PlayerBuildFooter\\ViewMoreBuilds\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\Lanes\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\Header\\Counters\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Domination.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Resolve.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Keystone.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\RunesSelect\\components\\Inspiration.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\SpellsSelect\\Spell\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\NoBuilds\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelected\\index.tsx",["425"],"import React, { useEffect } from 'react';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../shared/store/actions';\n\n// Shared\nimport { ItemType } from '../../../../../shared/constants/constants';\nimport { RequiredLength } from '../../../../../shared/constants/requiredLength';\nimport { Message } from '../../../../../shared/constants/validationMessages';\n\n// MaterialUI\nimport { Theme, makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n// Components\nimport BuildItem from './BuildItem';\n\n// Types\nimport { ItemInterface } from '../../../../../shared/interfaces/GameData';\nimport { snackbarControlsInterface } from '../../../../../shared/interfaces/interfaces';\nimport { RootState } from '../../../../../shared/interfaces/GlobalStore';\n\n// CSS\nimport styles from './Styles.module.css';\n\nconst useStylesBootstrap = makeStyles((theme: Theme) => ({\n\ttooltip: {\n\t\tletterSpacing: '0.1px',\n\t\tbackgroundColor: '#171717',\n\t\tfontSize: '12px',\n\t\tpadding: '12px',\n\t},\n}));\n\nconst ItemsSelected = (props: ItemsSelectedProps) => {\n\tconst { handleDeleteItemClick } = props;\n\t// Build PROPS\n\tconst { itemsConfirmed, setItemsConfirmed } = props;\n\t// Snackbar Control PROPS\n\tconst { setSnackbarControls } = props;\n\n\tconst classes = useStylesBootstrap();\n\n\t// Check for duplicate items selected\n\t// Check for primary items limit\n\tuseEffect(() => {\n\t\tconst primaryItems = itemsConfirmed.filter(\n\t\t\t(item) => item.type === ItemType.PRIMARY\n\t\t);\n\n\t\tvar itemArray = itemsConfirmed.map((item) => {\n\t\t\treturn item.id;\n\t\t});\n\t\tvar isDuplicate = itemArray.some((item, index) => {\n\t\t\treturn itemArray.indexOf(item) !== index;\n\t\t});\n\n\t\t// Remove duplicates from itemsConfirmed Array\n\t\tconst filteredItemsConfirmed = itemsConfirmed.filter(\n\t\t\t(item, index, arr) => arr.findIndex((t) => t.id === item.id) === index\n\t\t);\n\n\t\tif (isDuplicate) {\n\t\t\tsetItemsConfirmed(filteredItemsConfirmed);\n\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: Message.ERROR.ITEM_IS_ALREADY_IN_BUILD,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\t\t} else if (primaryItems.length > RequiredLength.ITEMS.PRIMARY.MAX_LENGTH) {\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: Message.ERROR.CAN_ONLY_HAVE_SIX_PRIMARY_ITEMS,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst itemsConfirmedCopy = [...itemsConfirmed];\n\n\t\t\t// Remove last item added to array\n\t\t\titemsConfirmedCopy.pop();\n\n\t\t\tsetItemsConfirmed(itemsConfirmedCopy);\n\t\t}\n\t}, [itemsConfirmed]);\n\n\treturn (\n\t\t<Box>\n\t\t\t<Box className={styles.itemsSelectedContainer}>\n\t\t\t\t{itemsConfirmed.length !== 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{/* TYPE: MAIN */}\n\t\t\t\t\t\t<Box display='flex'>\n\t\t\t\t\t\t\t<Box flexGrow={1}>\n\t\t\t\t\t\t\t\t<p className={styles.itemsSelectedHeader}>Primary Items</p>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t\t<div className={styles.tooltipContainer}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tPrimary:&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.PRIMARY.MIN_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.PRIMARY.MAX_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;items\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tOptional:&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.OPTIONAL.MIN_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.OPTIONAL.MAX_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;items\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p className={styles.tooltipWarning}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tClick on an item to <i>delete</i> it from your list\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplacement='top'\n\t\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\t\tarrow\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<InfoIcon className={styles.infoIcon} />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t{/* TYPE: PRIMARY */}\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t{itemsConfirmed\n\t\t\t\t\t\t\t\t.filter((item: ItemInterface) => item.type === ItemType.PRIMARY)\n\t\t\t\t\t\t\t\t.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<BuildItem\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\t\t\thandleDeleteItemClick={handleDeleteItemClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* TYPE: OPTIONAL */}\n\t\t\t\t\t\t<p className={styles.itemsSelectedHeader}>Optional Items</p>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t{itemsConfirmed\n\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t(item: ItemInterface) => item.type === ItemType.OPTIONAL\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<BuildItem\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\t\t\thandleDeleteItemClick={handleDeleteItemClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>You haven't added any items to your build yet.</p>\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\titemsConfirmed: state.build.itemsConfirmed,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetItemsConfirmed: (newItemsConfirmed: Array<ItemInterface>) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.BUILD_SET_ITEMSCONFIRMED,\n\t\t\t\tdata: newItemsConfirmed,\n\t\t\t}),\n\t\tsetSnackbarControls: (newControls: snackbarControlsInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.SNACKBAR_SET_CONTROLS,\n\t\t\t\tdata: newControls.snackbarControls,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype ItemsSelectedProps = PropsFromRedux & {\n\thandleDeleteItemClick: (itemId: string) => void;\n};\n\nexport default connector(ItemsSelected);\n","C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildItem\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildDate\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildRune\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildSpell\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\ChampionBuildsPage\\BuildsList\\BuildBox\\BuildRankUser\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\BuildInformation\\ItemsSelected\\BuildItem\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Footer\\Footer.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Header\\Header.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageLayout\\Header\\AppBar\\AppBar.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\PageLoading.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageHelmet\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\FilterChampionsBy\\index.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming PROJECTS\\wildriftbuildsdatabase\\frontend\\src\\pages\\LandingPage\\FilterChampionsBy\\RoleFilterItem\\index.tsx",[],{"ruleId":"426","severity":1,"message":"427","line":7,"column":10,"nodeType":"428","messageId":"429","endLine":7,"endColumn":21},{"ruleId":"426","severity":1,"message":"430","line":9,"column":17,"nodeType":"428","messageId":"429","endLine":9,"endColumn":26},{"ruleId":"431","replacedBy":"432"},{"ruleId":"433","replacedBy":"434"},{"ruleId":"426","severity":1,"message":"435","line":25,"column":7,"nodeType":"428","messageId":"429","endLine":25,"endColumn":15},{"ruleId":"436","severity":1,"message":"437","line":121,"column":5,"nodeType":"438","endLine":121,"endColumn":25,"suggestions":"439"},{"ruleId":"426","severity":1,"message":"440","line":93,"column":44,"nodeType":"428","messageId":"429","endLine":93,"endColumn":49},{"ruleId":"426","severity":1,"message":"441","line":93,"column":51,"nodeType":"428","messageId":"429","endLine":93,"endColumn":58},{"ruleId":"436","severity":1,"message":"442","line":119,"column":5,"nodeType":"438","endLine":119,"endColumn":25,"suggestions":"443"},{"ruleId":"444","severity":1,"message":"445","line":54,"column":73,"nodeType":"446","messageId":"447","endLine":54,"endColumn":75},{"ruleId":"436","severity":1,"message":"448","line":73,"column":5,"nodeType":"438","endLine":73,"endColumn":17,"suggestions":"449"},{"ruleId":"436","severity":1,"message":"448","line":84,"column":5,"nodeType":"438","endLine":84,"endColumn":23,"suggestions":"450"},{"ruleId":"426","severity":1,"message":"451","line":22,"column":8,"nodeType":"428","messageId":"429","endLine":22,"endColumn":20},{"ruleId":"426","severity":1,"message":"452","line":54,"column":40,"nodeType":"428","messageId":"429","endLine":54,"endColumn":49},{"ruleId":"436","severity":1,"message":"453","line":70,"column":5,"nodeType":"438","endLine":70,"endColumn":13,"suggestions":"454"},{"ruleId":"426","severity":1,"message":"455","line":137,"column":10,"nodeType":"428","messageId":"429","endLine":137,"endColumn":24},{"ruleId":"436","severity":1,"message":"456","line":211,"column":5,"nodeType":"438","endLine":211,"endColumn":7,"suggestions":"457"},{"ruleId":"444","severity":1,"message":"445","line":66,"column":51,"nodeType":"446","messageId":"447","endLine":66,"endColumn":53},{"ruleId":"426","severity":1,"message":"458","line":1,"column":10,"nodeType":"428","messageId":"429","endLine":1,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":198,"column":45,"nodeType":"446","messageId":"447","endLine":198,"endColumn":47},{"ruleId":"426","severity":1,"message":"459","line":39,"column":14,"nodeType":"428","messageId":"429","endLine":39,"endColumn":20},{"ruleId":"426","severity":1,"message":"460","line":39,"column":22,"nodeType":"428","messageId":"429","endLine":39,"endColumn":30},{"ruleId":"444","severity":1,"message":"461","line":112,"column":57,"nodeType":"446","messageId":"447","endLine":112,"endColumn":59},{"ruleId":"444","severity":1,"message":"445","line":61,"column":69,"nodeType":"446","messageId":"447","endLine":61,"endColumn":71},{"ruleId":"436","severity":1,"message":"462","line":23,"column":5,"nodeType":"438","endLine":23,"endColumn":7,"suggestions":"463"},{"ruleId":"436","severity":1,"message":"464","line":94,"column":5,"nodeType":"438","endLine":94,"endColumn":21,"suggestions":"465"},"@typescript-eslint/no-unused-vars","'PersistGate' is defined but never used.","Identifier","unusedVar","'persistor' is defined but never used.","no-native-reassign",["466"],"no-negated-in-lhs",["467"],"'pReducer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameDataQueries', 'setChampions', 'setItems', 'setRanks', 'setRoles', 'setRunes', and 'setSpells'. Either include them or remove the dependency array.","ArrayExpression",["468"],"'error' is assigned a value but never used.","'isError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'championBuildsQueries'. Either include it or remove the dependency array.",["469"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'champions'. Either include it or remove the dependency array.",["470"],["471"],"'PageNotFound' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'error', and 'isError'. Either include them or remove the dependency array.",["472"],"'saveToDatabase' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setChampionSelected'. Either include it or remove the dependency array.",["473"],"'UserInterface' is defined but never used.","'roleId' is assigned a value but never used.","'roleName' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","React Hook useEffect has a missing dependency: 'setRecaptchRef'. Either include it or remove the dependency array.",["474"],"React Hook useEffect has missing dependencies: 'setItemsConfirmed' and 'setSnackbarControls'. Either include them or remove the dependency array.",["475"],"no-global-assign","no-unsafe-negation",{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},"Update the dependencies array to be: [eachQueryHasLoaded, gameDataQueries, setChampions, setItems, setRanks, setRoles, setRunes, setSpells]",{"range":"492","text":"493"},"Update the dependencies array to be: [championBuildsQueries, eachQueryHasLoaded]",{"range":"494","text":"495"},"Update the dependencies array to be: [champions, roleFilter]",{"range":"496","text":"497"},"Update the dependencies array to be: [championSearched, champions]",{"range":"498","text":"499"},"Update the dependencies array to be: [data, error, isError, status]",{"range":"500","text":"501"},"Update the dependencies array to be: [setChampionSelected]",{"range":"502","text":"503"},"Update the dependencies array to be: [setRecaptchRef]",{"range":"504","text":"505"},"Update the dependencies array to be: [itemsConfirmed, setItemsConfirmed, setSnackbarControls]",{"range":"506","text":"507"},[2990,3010],"[eachQueryHasLoaded, gameDataQueries, setChampions, setItems, setRanks, setRoles, setRunes, setSpells]",[3279,3299],"[championBuildsQueries, eachQueryHasLoaded]",[2153,2165],"[champions, roleFilter]",[2467,2485],"[championSearched, champions]",[2188,2196],"[data, error, isError, status]",[5948,5950],"[setChampionSelected]",[681,683],"[setRecaptchRef]",[2684,2700],"[itemsConfirmed, setItemsConfirmed, setSnackbarControls]"]