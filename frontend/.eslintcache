[{"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx":"1","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\App\\App.tsx":"3","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Layout.tsx":"4","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\Header.tsx":"5","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Footer\\Footer.tsx":"6","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx":"7","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx":"8","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\AppBar.tsx":"9","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuild\\PlayerBuild.tsx":"10","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\HeroBuilds.tsx":"11","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\Filter.tsx":"12","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\errorPopups.js":"13","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\LoadingText.tsx":"14","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\components\\NoBuilds.tsx":"15","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\ChampionsList.tsx":"16","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\components\\BuildBox.tsx":"17","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\interfaces.ts":"18"},{"size":505,"mtime":1611338810358,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1337,"mtime":1612783328915,"results":"22","hashOfConfig":"20"},{"size":561,"mtime":1612254535168,"results":"23","hashOfConfig":"20"},{"size":425,"mtime":1612258984161,"results":"24","hashOfConfig":"20"},{"size":1440,"mtime":1612431354281,"results":"25","hashOfConfig":"20"},{"size":3164,"mtime":1612778558304,"results":"26","hashOfConfig":"20"},{"size":42181,"mtime":1612857018377,"results":"27","hashOfConfig":"20"},{"size":2003,"mtime":1612257750223,"results":"28","hashOfConfig":"20"},{"size":10734,"mtime":1612432501056,"results":"29","hashOfConfig":"20"},{"size":4157,"mtime":1612782002624,"results":"30","hashOfConfig":"20"},{"size":1338,"mtime":1612777645595,"results":"31","hashOfConfig":"20"},{"size":653,"mtime":1612774641129,"results":"32","hashOfConfig":"20"},{"size":197,"mtime":1612778212817,"results":"33","hashOfConfig":"20"},{"size":758,"mtime":1612778743221,"results":"34","hashOfConfig":"20"},{"size":719,"mtime":1612778574511,"results":"35","hashOfConfig":"20"},{"size":4458,"mtime":1612783480902,"results":"36","hashOfConfig":"20"},{"size":1113,"mtime":1612783024609,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"q16prs",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx",[],["84","85"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\App\\App.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Layout.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\Header.tsx",["86","87","88"],"import React from 'react';\n\n// MaterialUI\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport AppBar from './AppBar';\n// CSS\n//Types\n\nexport default function Header() {\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<AppBar />\n\t\t\t\t</Grid>\n\t\t\t</header>\n\t\t</>\n\t);\n}\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Footer\\Footer.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx",["89","90","91","92"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// MaterialUI\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\n// Components\r\nimport Filter from './components/Filter';\r\nimport ChampionList from './components/ChampionsList';\r\nimport LoadingText from '../../components/LoadingText';\r\n// Types\r\nimport { ChampionInterface } from '../../utils/interfaces';\r\n// CSS\r\nimport styles from './landing.module.css';\r\n\r\nexport default function Landing() {\r\n\tconst [champions, setChampions] = useState<Array<ChampionInterface>>([]);\r\n\tconst [filteredChampions, setFilteredChampions] = useState<\r\n\t\tArray<ChampionInterface>\r\n\t>([]);\r\n\tconst [championSearch, setChampionSearch] = useState('');\r\n\tconst [roleFilter, setRoleFilter] = useState('all');\r\n\r\n\t// Get ALL CHAMPIONS and Sort Alphabetically\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t// .get('https://wildriftbuilds.herokuapp.com/api/champion/all')\r\n\t\t\t.get('/api/champion/all')\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst { data } = res;\r\n\r\n\t\t\t\tdata.sort(function (a: ChampionInterface, b: ChampionInterface) {\r\n\t\t\t\t\tif (a.championName < b.championName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.championName > b.championName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsetChampions(data);\r\n\t\t\t\tsetFilteredChampions(data);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.error('Something went wrong');\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\t// Handler for \"Search for a champion\" input\r\n\tuseEffect(() => {\r\n\t\tconst filterChampions = champions.filter((champion) =>\r\n\t\t\tchampion.championName.toLocaleLowerCase().includes(championSearch)\r\n\t\t);\r\n\r\n\t\tsetFilteredChampions(filterChampions);\r\n\t}, [championSearch]);\r\n\r\n\t// Handler for Role Filter by \"All, Top, Jungle, Middle, Bottom, Support\"\r\n\tuseEffect(() => {\r\n\t\tconst filterRoles = champions.filter((champion) => {\r\n\t\t\tconst { lane } = champion;\r\n\r\n\t\t\t// Check if champion has \"lane\" property\r\n\t\t\tif (lane) {\r\n\t\t\t\tif (roleFilter === 'all') {\r\n\t\t\t\t\treturn champion;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i = 0; i < lane.length; i++) {\r\n\t\t\t\t\t\tif (lane[i].toLocaleLowerCase() === roleFilter) {\r\n\t\t\t\t\t\t\treturn champion;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsetFilteredChampions(filterRoles);\r\n\t}, [roleFilter]);\r\n\r\n\tconst handleChampionSearchChange = (e: any) => {\r\n\t\tsetChampionSearch(e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Container>\r\n\t\t\t\t{/* Filter by */}\r\n\t\t\t\t<Filter\r\n\t\t\t\t\tsetRoleFilter={setRoleFilter}\r\n\t\t\t\t\tchampionSearch={championSearch}\r\n\t\t\t\t\thandleChampionSearchChange={handleChampionSearchChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{/* Heroes List */}\r\n\t\t\t\t<Box display='flex' flexWrap='wrap' className={styles.heroesContainer}>\r\n\t\t\t\t\t{champions && champions.length !== 0 ? (\r\n\t\t\t\t\t\tfilteredChampions.map((champion, index) => {\r\n\t\t\t\t\t\t\tconst { id: championId, championName } = champion;\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<ChampionList\r\n\t\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t\tchampionId={championId}\r\n\t\t\t\t\t\t\t\t\tchampionName={championName}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<LoadingText />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Box>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx",["93","94","95","96"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport {\r\n\terrorNoUsername,\r\n\terrorNoItemSelected,\r\n\terrorItemDuplicate,\r\n\terrorBuildSaved,\r\n\terrorPrimaryItemsLimit,\r\n\tsuccessBuildSaved,\r\n} from '../../../utils/errorPopups';\r\n\r\n// MaterialUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Components\r\nimport Layout from '../../../components/Layout';\r\n// Types\r\nimport {\r\n\tItemInterface,\r\n\tCountersInterface,\r\n\tChampionInterface,\r\n\tRankInterface,\r\n\tRuneInterface,\r\n\tSpellInterface,\r\n\tBuildInterface,\r\n} from '../../../utils/interfaces';\r\n// CSS\r\nimport styles from './CreateBuild.module.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t},\r\n\tbackdrop: {\r\n\t\tzIndex: theme.zIndex.drawer + 1,\r\n\t\tcolor: '#fff',\r\n\t},\r\n}));\r\n\r\nexport default function Landing() {\r\n\tconst [tabValue, setTabValue] = useState(0);\r\n\tconst [openBackdrop, setOpenBackdrop] = useState(false);\r\n\tconst [hasSubmittedBuild, setHasSubmittedBuild] = useState(false);\r\n\r\n\tconst [username, setUsername] = useState('');\r\n\tconst [champions, setChampions] = useState<Array<ChampionInterface>>([]);\r\n\tconst [items, setItems] = useState<Array<ItemInterface>>([]);\r\n\tconst [ranks, setRanks] = useState<Array<RankInterface>>([]);\r\n\r\n\tconst [runes, setRunes] = useState<Array<RuneInterface>>([]);\r\n\tconst [runeKeystone, setRuneKeystone] = useState<RuneInterface>({\r\n\t\tid: 'feadf691-c740-4e7d-a4e8-9c705a48ea6a',\r\n\t\truneName: 'Aery',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/c/ce/Aery_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713114442',\r\n\t\ttype: 'keystone',\r\n\t\tdescription: [\r\n\t\t\t'Basic attacks and abilities against an enemy champion signals Aery to dash to them, dealing 10 - 60 (based on level) (+ 20% bonus AD) (+ 10% AP) Adaptive damage. Healing, shielding, or buffing an ally signals Aery to dash to them, shielding them for 20 - 120 (based on level) (+ 40% bonus AD) (+ 20% AP) for 2 seconds.',\r\n\t\t\t'Aery lingers on the target for 2 seconds before flying back to the user, and cannot be sent out again until she returns. Aery is initially very slow, but gradually accelerates, and can be picked up by moving near her.',\r\n\t\t\t'Adaptive Damage: Deals either physical or magic damage depending on your bonus stats, defaulting based on the origin of the effect.',\r\n\t\t],\r\n\t});\r\n\tconst [runeDomination, setRuneDomination] = useState<RuneInterface>({\r\n\t\tid: '7a61f821-168c-4817-bbdd-daf3ce5439dc',\r\n\t\truneName: 'Brutal',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/c/ca/Brutal_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102514',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'domination',\r\n\t\tdescription: [\r\n\t\t\t'Gain 7 AD and 2% armor penetration, or 14 AP and 2% magic penetration. (Adaptive)',\r\n\t\t],\r\n\t});\r\n\tconst [runeResolve, setRuneResolve] = useState<RuneInterface>({\r\n\t\tid: 'fc2532cb-e6d9-4577-a567-4f10fff13e0a',\r\n\t\truneName: 'Backbone',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/b/b2/Backbone_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102418',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'resolve',\r\n\t\tdescription: [\r\n\t\t\t'Gain 10 AR or 10 MR, based on whichever stat you have less of.',\r\n\t\t],\r\n\t});\r\n\tconst [runeInspiration, setRuneInspiration] = useState<RuneInterface>({\r\n\t\tid: '80216900-b198-4195-ab1c-e6e309c28ff3',\r\n\t\truneName: 'Hunter - Genius',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/e/e7/Hunter_-_Genius_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102756',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'inspiration',\r\n\t\tdescription: [\r\n\t\t\t'Gain 2.5 Ability Haste.',\r\n\t\t\t'Unique champion takedowns grant 2.5 Ability Haste. (Max Ability Haste 15)',\r\n\t\t],\r\n\t});\r\n\r\n\tconst [spells, setSpells] = useState<Array<SpellInterface>>([]);\r\n\tconst [spellOne, setSpellOne] = useState<SpellInterface>({\r\n\t\tid: 'edbd4a33-514a-4334-8e61-01c296b8a767',\r\n\t\tspellName: 'Barrier',\r\n\t\turl:\r\n\t\t\t'/uploads/league-of-legends-wild-rift/images/summoner-spells/shield.jpg',\r\n\t\tdescription: [\r\n\t\t\t'Gain a shield that absorbs 115−465 (based on level) damage for 2 seconds.',\r\n\t\t],\r\n\t\tcooldown: '90',\r\n\t});\r\n\tconst [spellTwo, setSpellTwo] = useState<SpellInterface>({\r\n\t\tid: 'edbd4a33-514a-4334-8e61-01c296b8a767',\r\n\t\tspellName: 'Barrier',\r\n\t\turl:\r\n\t\t\t'/uploads/league-of-legends-wild-rift/images/summoner-spells/shield.jpg',\r\n\t\tdescription: [\r\n\t\t\t'Gain a shield that absorbs 115−465 (based on level) damage for 2 seconds.',\r\n\t\t],\r\n\t\tcooldown: '90',\r\n\t});\r\n\r\n\tconst [itemsConfirmed, setItemsConfirmed] = useState<Array<ItemInterface>>(\r\n\t\t[]\r\n\t);\r\n\r\n\tconst [build, setBuild] = useState<BuildInterface>();\r\n\r\n\tconst [openItemDialog, setOpenItemDialog] = useState(false);\r\n\r\n\tconst [championSelected, setChampionSelected] = useState<ChampionInterface>(\r\n\t\t// Defaults to Champion: 'Ahri' - which is the first option\r\n\t\t{\r\n\t\t\tid: '48ca031a-d92e-44e6-b7b6-f3eb1dbe644c',\r\n\t\t\tchampionName: 'Ahri',\r\n\t\t\turl:\r\n\t\t\t\t'https://lolwildriftbuild.com/wp-content/uploads/2020/10/Ahri_wild_rift.png',\r\n\t\t\tlane: ['Middle'],\r\n\t\t\ttitle: 'Nine-Tailed Fox',\r\n\t\t\tcounters: {\r\n\t\t\t\tweakAgainst: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Twisted Fate',\r\n\t\t\t\t\t\tid: '85f2909d-e3c1-425b-8398-5c8b9c145633',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Fizz',\r\n\t\t\t\t\t\tid: '96a64b1c-5a70-4b6c-a8ba-cf82d474a928',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Yasuo',\r\n\t\t\t\t\t\tid: 'e9759479-e2b8-45d4-84ce-6711c7371591',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\tstrongAgainst: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Akali',\r\n\t\t\t\t\t\tid: '5a05e0d6-9c06-44af-9df9-a1fad5a2e427',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Twisted Fate',\r\n\t\t\t\t\t\tid: '85f2909d-e3c1-425b-8398-5c8b9c145633',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchampionName: 'Lux',\r\n\t\t\t\t\t\tid: 'fd23d139-1fb4-4dd7-860b-ef261bf13431',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t}\r\n\t);\r\n\tconst [itemSelected, setItemSelected] = useState<ItemInterface>(\r\n\t\t// Defaults to Item: 'Abyssal Mask' which is the first option\r\n\t\t{\r\n\t\t\tid: 'a42bcabd-290c-47f2-ae68-258d412c6d8d',\r\n\t\t\titemName: 'Abyssal Mask',\r\n\t\t\turl:\r\n\t\t\t\t'https://lolwildriftbuild.com/wp-content/uploads/2020/10/abyssalmask_wild_rift.png',\r\n\t\t\tcategory: 'defense',\r\n\t\t\ttier: 'upgraded',\r\n\t\t\tstatistics: [\r\n\t\t\t\t'+300 Max Health',\r\n\t\t\t\t'+40 Magic Resistance',\r\n\t\t\t\t'+300 Max Mana',\r\n\t\t\t\t'+10 Ability Haste',\r\n\t\t\t],\r\n\t\t\tdescription: [\r\n\t\t\t\t'Eternity: Restore Mana equal to 15% of the damage taken from champions. Regen Health equal to 20% of Mana spent. Capped at 25 Health per cast.',\r\n\t\t\t\t'Abyssal: Nearby enemy champions take 15% bonus magic damage.',\r\n\t\t\t],\r\n\t\t}\r\n\t);\r\n\tconst [rankSelected, setRankSelected] = useState<RankInterface>(\r\n\t\t// Defaults to Rank: 'Unranked' which is the first option\r\n\t\t{\r\n\t\t\tid: 'a4938a79-f11f-4ee1-9ec5-7741a12c4ef9',\r\n\t\t\trankName: 'Unranked',\r\n\t\t\turl:\r\n\t\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/3/38/Season_2019_-_Unranked.png/revision/latest/scale-to-width-down/130?cb=20190908074432',\r\n\t\t}\r\n\t);\r\n\tconst [dialogItem, setDialogItem] = useState<ItemInterface>({\r\n\t\tid: '',\r\n\t\tcategory: '',\r\n\t\tdescription: [],\r\n\t\titemName: '',\r\n\t\treason: '',\r\n\t\tstatistics: [],\r\n\t\ttier: '',\r\n\t\ttype: '',\r\n\t\turl: '',\r\n\t});\r\n\tconst [itemType, setItemType] = useState('primary');\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getChampions = axios.get(\r\n\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/champion/all'\r\n\t\t\t'/api/champion/all'\r\n\t\t);\r\n\t\tconst getItems = axios.get(\r\n\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/item/all'\r\n\t\t\t'/api/item/all'\r\n\t\t);\r\n\t\tconst getRanks = axios.get(\r\n\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/rank/all'\r\n\t\t\t'/api/rank/all'\r\n\t\t);\r\n\t\tconst getRunes = axios.get(\r\n\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/rune/all'\r\n\t\t\t'/api/rune/all'\r\n\t\t);\r\n\t\tconst getSpells = axios.get(\r\n\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/spell/all'\r\n\t\t\t'/api/spell/all'\r\n\t\t);\r\n\r\n\t\tPromise.all([getChampions, getItems, getRanks, getRunes, getSpells]).then(\r\n\t\t\t(values) => {\r\n\t\t\t\tconst [\r\n\t\t\t\t\t{ data: championsArray },\r\n\t\t\t\t\t{ data: itemsArray },\r\n\t\t\t\t\t{ data: ranksArray },\r\n\t\t\t\t\t{ data: runesArray },\r\n\t\t\t\t\t{ data: spellsArray },\r\n\t\t\t\t] = values;\r\n\r\n\t\t\t\t// Sort Champions\r\n\t\t\t\tchampionsArray.sort(function (\r\n\t\t\t\t\ta: ChampionInterface,\r\n\t\t\t\t\tb: ChampionInterface\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (a.championName < b.championName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.championName > b.championName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetChampions(championsArray);\r\n\r\n\t\t\t\t// Sort Items\r\n\t\t\t\titemsArray.sort(function (a: ItemInterface, b: ItemInterface) {\r\n\t\t\t\t\tif (a.itemName < b.itemName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.itemName > b.itemName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetItems(itemsArray);\r\n\r\n\t\t\t\tsetRanks(ranksArray);\r\n\r\n\t\t\t\t// Sort Runes\r\n\t\t\t\trunesArray.sort(function (a: RuneInterface, b: RuneInterface) {\r\n\t\t\t\t\tif (a.runeName < b.runeName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.runeName > b.runeName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetRunes(runesArray);\r\n\r\n\t\t\t\t// Sort Spells\r\n\t\t\t\tspellsArray.sort(function (a: SpellInterface, b: SpellInterface) {\r\n\t\t\t\t\tif (a.spellName < b.spellName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.spellName > b.spellName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetSpells(spellsArray);\r\n\t\t\t}\r\n\t\t);\r\n\t}, []);\r\n\r\n\t// Check for duplicate items selected\r\n\tuseEffect(() => {\r\n\t\tconst primaryItems = itemsConfirmed.filter(\r\n\t\t\t(item) => item.type === 'primary'\r\n\t\t);\r\n\t\tvar itemArray = itemsConfirmed.map((item) => {\r\n\t\t\treturn item.id;\r\n\t\t});\r\n\t\tvar isDuplicate = itemArray.some((item, index) => {\r\n\t\t\treturn itemArray.indexOf(item) != index;\r\n\t\t});\r\n\r\n\t\t// Remove duplicates from itemsConfirmed Array\r\n\t\tconst filteredItemsConfirmed = itemsConfirmed.filter(\r\n\t\t\t(item, index, arr) => arr.findIndex((t) => t.id === item.id) === index\r\n\t\t);\r\n\r\n\t\tif (isDuplicate) {\r\n\t\t\tsetItemsConfirmed(filteredItemsConfirmed);\r\n\t\t\terrorItemDuplicate();\r\n\t\t} else if (primaryItems.length > 6) {\r\n\t\t\terrorPrimaryItemsLimit();\r\n\t\t\tsetItemsConfirmed((prev) => {\r\n\t\t\t\tconst itemsConfirmedCopy = [...prev];\r\n\r\n\t\t\t\titemsConfirmedCopy.pop();\r\n\r\n\t\t\t\treturn itemsConfirmedCopy;\r\n\t\t\t});\r\n\t\t}\r\n\t}, [itemsConfirmed]);\r\n\r\n\tconst handleChampSelectChange = (e: any) => {\r\n\t\tconst getChampion = champions.find(\r\n\t\t\t(champ: ChampionInterface) => champ.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getChampion) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log(getChampion);\r\n\t\t\tsetChampionSelected(getChampion);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleRankSelectChange = (e: any) => {\r\n\t\tconst getRank = ranks.find(\r\n\t\t\t(rank: RankInterface) => rank.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getRank) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetRankSelected(getRank);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleItemSelectChange = (e: any) => {\r\n\t\tconst getItem = items.find(\r\n\t\t\t(item: ItemInterface) => item.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getItem) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetItemSelected(getItem);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleItemReasonChange = (e: any) => {\r\n\t\tconst dialogItemId = dialogItem ? dialogItem.id : null;\r\n\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t// Create a copy of current state\r\n\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t(item) => item.id === dialogItemId\r\n\t\t\t)[0];\r\n\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t// Set reason property to the input value\r\n\t\t\tgetItem.reason = e.target.value;\r\n\r\n\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\treturn itemsConfirmedCopy;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleRuneChange = (e: any, runeType: string, runePath?: string) => {\r\n\t\tconst getRune = runes.find(\r\n\t\t\t(rune: RuneInterface) => rune.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getRune) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tif (runeType === 'keystone') {\r\n\t\t\t\tsetRuneKeystone(getRune);\r\n\t\t\t}\r\n\t\t\tif (runeType === 'secondary') {\r\n\t\t\t\tswitch (runePath) {\r\n\t\t\t\t\tcase 'domination':\r\n\t\t\t\t\t\tsetRuneDomination(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'resolve':\r\n\t\t\t\t\t\tsetRuneResolve(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'inspiration':\r\n\t\t\t\t\t\tsetRuneInspiration(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleAddItemClick = () => {\r\n\t\t// Pushes item to itemsConfirmed Array\r\n\t\tsetItemsConfirmed([...itemsConfirmed, { ...itemSelected, type: itemType }]);\r\n\t};\r\n\r\n\tconst handleClickOpen = (e: any, item: ItemInterface) => {\r\n\t\tsetDialogItem(item);\r\n\t\tsetOpenItemDialog(true);\r\n\t};\r\n\r\n\tconst openedDialogItem = itemsConfirmed.filter(\r\n\t\t(item) => item.id === dialogItem.id\r\n\t)[0];\r\n\t// Handle Dialog Close\r\n\tconst handleClose = (buttonClicked?: string) => {\r\n\t\tif (buttonClicked === 'confirm') {\r\n\t\t\t// If input value is empty, remove reason property from item object\r\n\t\t\t// ex: if user types something, a reason property is added,\r\n\t\t\t//     but once user clears the input, reason property is removed.\r\n\t\t\tif (\r\n\t\t\t\topenedDialogItem.reason === '' ||\r\n\t\t\t\topenedDialogItem.reason === undefined ||\r\n\t\t\t\topenedDialogItem.reason === null\r\n\t\t\t) {\r\n\t\t\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t\t\t// Create a copy of current state\r\n\t\t\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t\t\t(item) => item.id === dialogItem.id\r\n\t\t\t\t\t)[0];\r\n\t\t\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t\t\t// Delete reason property\r\n\t\t\t\t\tdelete getItem.reason;\r\n\r\n\t\t\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\t\t\treturn itemsConfirmedCopy;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetOpenItemDialog(false);\r\n\t};\r\n\r\n\tconst handleClear = () => {\r\n\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t// Create a copy of current state\r\n\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t(item) => item.id === dialogItem.id\r\n\t\t\t)[0];\r\n\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t// Delete reason property\r\n\t\t\tdelete getItem.reason;\r\n\r\n\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\treturn itemsConfirmedCopy;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleItemTypeChange = (e: any) => {\r\n\t\tsetItemType(e.target.value);\r\n\t};\r\n\r\n\tconst handleSpellChange = (e: any, spellNumber: string) => {\r\n\t\tconst { value } = e.target;\r\n\r\n\t\tconst getSpell = spells.find((spell: SpellInterface) => spell.id === value);\r\n\r\n\t\tif (!getSpell) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tswitch (spellNumber) {\r\n\t\t\t\tcase 'spellOne':\r\n\t\t\t\t\tsetSpellOne(getSpell);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'spellTwo':\r\n\t\t\t\t\tsetSpellTwo(getSpell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst submitBuild = async () => {\r\n\t\tif (itemsConfirmed.length !== 0 && username) {\r\n\t\t\tsetOpenBackdrop(!openBackdrop);\r\n\t\t\tconst buildObject = {\r\n\t\t\t\tdateSubmitted: new Date(),\r\n\t\t\t\tusername: username,\r\n\t\t\t\tchampion: championSelected,\r\n\t\t\t\titems: itemsConfirmed,\r\n\t\t\t\trank: rankSelected,\r\n\t\t\t\trunes: {\r\n\t\t\t\t\tkeystone: runeKeystone,\r\n\t\t\t\t\tdomination: runeDomination,\r\n\t\t\t\t\tresolve: runeResolve,\r\n\t\t\t\t\tinspiration: runeInspiration,\r\n\t\t\t\t},\r\n\t\t\t\tspells: [{ ...spellOne }, { ...spellTwo }],\r\n\t\t\t};\r\n\r\n\t\t\tconst saveToDatabase = await axios\r\n\t\t\t\t.post(\r\n\t\t\t\t\t// 'https://wildriftbuilds.herokuapp.com/api/build/save',\r\n\t\t\t\t\t'/api/build/save',\r\n\t\t\t\t\tbuildObject\r\n\t\t\t\t)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsuccessBuildSaved();\r\n\t\t\t\t\tsetBuild(res.data);\r\n\t\t\t\t\tsetHasSubmittedBuild(true);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\terr.response.status === 429 &&\r\n\t\t\t\t\t\terr.response.data ===\r\n\t\t\t\t\t\t\t\"You're creating too many builds. Please try again after 30 minutes.\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\terrorBuildSaved(err.response.data);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrorBuildSaved('Something went wrong. Failed to save build.');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (itemsConfirmed.length === 0) {\r\n\t\t\t\terrorNoItemSelected();\r\n\t\t\t} else if (!username) {\r\n\t\t\t\terrorNoUsername();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tlet dialogValue = openedDialogItem\r\n\t\t? openedDialogItem.reason\r\n\t\t\t? openedDialogItem.reason\r\n\t\t\t: ''\r\n\t\t: '';\r\n\r\n\tif (hasSubmittedBuild) {\r\n\t\tif (build) {\r\n\t\t\treturn <Redirect to={`/build/${build.id}`} />;\r\n\t\t}\r\n\t}\r\n\r\n\t// =============================\r\n\r\n\tconst handleTabValueChange = (\r\n\t\tevent: React.ChangeEvent<{}>,\r\n\t\tnewValue: number\r\n\t) => {\r\n\t\tsetTabValue(newValue);\r\n\t};\r\n\r\n\tinterface TabPanelProps {\r\n\t\tchildren?: React.ReactNode;\r\n\t\tindex: any;\r\n\t\tvalue: any;\r\n\t}\r\n\r\n\tfunction TabPanel(props: TabPanelProps) {\r\n\t\tconst { children, value, index, ...other } = props;\r\n\r\n\t\treturn (\r\n\t\t\t<Grid\r\n\t\t\t\tstyle={{ padding: '0 20px' }}\r\n\t\t\t\tcontainer\r\n\t\t\t\trole='tabpanel'\r\n\t\t\t\thidden={value !== index}\r\n\t\t\t\tid={`scrollable-auto-tabpanel-${index}`}\r\n\t\t\t\taria-labelledby={`scrollable-auto-tab-${index}`}\r\n\t\t\t\t{...other}\r\n\t\t\t>\r\n\t\t\t\t{value === index && <>{children}</>}\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n\r\n\tfunction a11yProps(index: any) {\r\n\t\treturn {\r\n\t\t\tid: `scrollable-auto-tab-${index}`,\r\n\t\t\t'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n\t\t};\r\n\t}\r\n\t// =============================\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Backdrop className={classes.backdrop} open={openBackdrop}>\r\n\t\t\t\t<CircularProgress color='inherit' />\r\n\t\t\t</Backdrop>\r\n\t\t\t<Toaster />\r\n\t\t\t<Dialog\r\n\t\t\t\topen={openItemDialog}\r\n\t\t\t\tonClose={() => handleClose()}\r\n\t\t\t\taria-labelledby='form-dialog-title'\r\n\t\t\t>\r\n\t\t\t\t<DialogTitle id='form-dialog-title'>\r\n\t\t\t\t\t{dialogItem ? dialogItem.itemName : null}\r\n\t\t\t\t</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t\tLet others know why you chose this item by giving an explanation\r\n\t\t\t\t\t\tbelow.\r\n\t\t\t\t\t</DialogContentText>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\tmargin='dense'\r\n\t\t\t\t\t\tid='name'\r\n\t\t\t\t\t\tlabel='Explanation'\r\n\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvalue={dialogValue}\r\n\t\t\t\t\t\tonChange={(e) => handleItemReasonChange(e)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={handleClear} color='primary'>\r\n\t\t\t\t\t\tClear\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={() => handleClose('confirm')} color='primary'>\r\n\t\t\t\t\t\tConfirm\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<Box style={{ padding: '20px 0', marginTop: '20px' }}>\r\n\t\t\t\t\t\t\t<Typography variant='h6' gutterBottom>\r\n\t\t\t\t\t\t\t\tCreate your build\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tvariant='body2'\r\n\t\t\t\t\t\t\t\tstyle={{ color: '#666666' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tPlease note that you can only create up to 5 builds every 30\r\n\t\t\t\t\t\t\t\tminutes.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<AppBar\r\n\t\t\t\t\t\tposition='static'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tcolor: 'inherit',\r\n\t\t\t\t\t\t\tboxShadow: 'none',\r\n\t\t\t\t\t\t\tborderStyle: 'none',\r\n\t\t\t\t\t\t\tbackgroundColor: '#f7f7f7',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Tabs\r\n\t\t\t\t\t\t\tvalue={tabValue}\r\n\t\t\t\t\t\t\tonChange={handleTabValueChange}\r\n\t\t\t\t\t\t\tindicatorColor='primary'\r\n\t\t\t\t\t\t\tvariant='scrollable'\r\n\t\t\t\t\t\t\tscrollButtons='auto'\r\n\t\t\t\t\t\t\taria-label='scrollable auto tabs example'\r\n\t\t\t\t\t\t\t// style={{ color: '#ffffff' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Tab label='Champion' {...a11yProps(0)} />\r\n\t\t\t\t\t\t\t<Tab label='Items' {...a11yProps(1)} />\r\n\t\t\t\t\t\t\t<Tab label='Runes' {...a11yProps(2)} />\r\n\t\t\t\t\t\t\t<Tab label='Spells' {...a11yProps(3)} />\r\n\t\t\t\t\t\t\t<Tab label='Player Details' {...a11yProps(4)} />\r\n\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t</AppBar>\r\n\r\n\t\t\t\t\t{/* Select Champion */}\r\n\t\t\t\t\t<TabPanel value={tabValue} index={0}>\r\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSelect a Champion\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\tGet started by selecting a champion your build is for.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Divider style={{ margin: '15px 0 10px 0' }} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '16px' }}>\r\n\t\t\t\t\t\t\t\t{/* Display Champion Image */}\r\n\t\t\t\t\t\t\t\t{championSelected ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${championSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/48ca031a-d92e-44e6-b7b6-f3eb1dbe644c.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='champion-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tChampion\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={championSelected.id}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChampSelectChange}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'champion',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'champion-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{champions.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ id, championName, url }: ChampionInterface,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tindex\r\n\t\t\t\t\t\t\t\t\t\t\t\t) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option key={index} value={id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a champion</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Typography style={{ fontSize: '18px', fontWeight: 'bold' }}>\r\n\t\t\t\t\t\t\t\t\t{championSelected.championName}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\t\t\t\t\tis <span style={{ color: '#cc1f1f' }}>weak against</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t{championSelected.counters.weakAgainst.map((champion) => {\r\n\t\t\t\t\t\t\t\t\tconst { id: weakAgainstChampionId, championName } = champion;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box style={{ display: 'inline-block' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a href={`/builds/${weakAgainstChampionId}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${weakAgainstChampionId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\talt={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth='60'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '6px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\t\t\t\t\tbut <span style={{ color: '#3b9c3f' }}>strong against</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t{championSelected.counters.strongAgainst.map((champion) => {\r\n\t\t\t\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\t\t\t\tid: strongAgainstChampionId,\r\n\t\t\t\t\t\t\t\t\t\tchampionName,\r\n\t\t\t\t\t\t\t\t\t} = champion;\r\n\t\t\t\t\t\t\t\t\tconsole.log(champion);\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box style={{ display: 'inline-block' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a href={`/builds/${strongAgainstChampionId}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${strongAgainstChampionId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\talt={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth='60'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '6px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t{/* Select Item */}\r\n\t\t\t\t\t<TabPanel value={tabValue} index={1}>\r\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSelect Items\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\tPlease note that you can only select up to 6 primary items.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Divider style={{ margin: '15px 0 10px 0' }} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '16px' }}>\r\n\t\t\t\t\t\t\t\t{itemSelected ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/a42bcabd-290c-47f2-ae68-258d412c6d8d.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='item-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tItem\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleItemSelectChange}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'item',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'item-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{items.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t({ id, itemName, url }: ItemInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{itemName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Add an item to your build</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t<Typography>Item Type</Typography>\r\n\t\t\t\t\t\t\t\t\t<RadioGroup\r\n\t\t\t\t\t\t\t\t\t\trow\r\n\t\t\t\t\t\t\t\t\t\tname='position'\r\n\t\t\t\t\t\t\t\t\t\tdefaultValue='primary'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleItemTypeChange(e)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\t\tvalue='primary'\r\n\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel='Primary'\r\n\t\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ margin: '0', display: 'block' }}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\t\tvalue='optional'\r\n\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\r\n\t\t\t\t\t\t\t\t\t\t\tlabel='Optional'\r\n\t\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ margin: '0', display: 'block' }}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\t\tonClick={handleAddItemClick}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tAdd Item\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: '#517ebd' }}>\r\n\t\t\t\t\t\t\t\t\t\t{itemSelected.itemName}\r\n\t\t\t\t\t\t\t\t\t</span>{' '}\r\n\t\t\t\t\t\t\t\t\tStatistics\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\twidth: '40px',\r\n\t\t\t\t\t\t\t\t\t\theight: '5px',\r\n\t\t\t\t\t\t\t\t\t\tmargin: '10px 0 20px 0',\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor: '#517ebd',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t{itemSelected.statistics.map((stat) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography style={{ color: '#3b9c3f' }} gutterBottom>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{stat}\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t{/* Select Runes */}\r\n\t\t\t\t\t<TabPanel value={tabValue} index={2}>\r\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSelect Runes\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\tSelect the runes that best fit each category.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Divider style={{ margin: '15px 0 10px 0' }} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t\t{/* KEYSTONE Rune */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{runeKeystone ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeKeystone.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/feadf691-c740-4e7d-a4e8-9c705a48ea6a.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tKeystone\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleRuneChange(e, 'keystone')}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter((rune) => rune.type === 'keystone')\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Keystone Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t{/* Secondary: Domination */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{runeDomination ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeDomination.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/7a61f821-168c-4817-bbdd-daf3ce5439dc.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tDomination (Slot 1)\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'domination')\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trune.path === 'domination'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Domination Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t{/* Secondary: Resolve */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{runeResolve ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeResolve.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/fc2532cb-e6d9-4577-a567-4f10fff13e0a.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tResolve (Slot 2)\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'resolve')\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' && rune.path === 'resolve'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Resolve Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t{/* Secondary: Inspiration */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{runeResolve ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeInspiration.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/80216900-b198-4195-ab1c-e6e309c28ff3.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tInspiration (Slot 3)\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'inspiration')\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trune.path === 'inspiration'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Inspiration Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t{/* Select Spells */}\r\n\t\t\t\t\t<TabPanel value={tabValue} index={3}>\r\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSelect Summoner Spells\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\tSelect the summoner spells that best fit this build.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Divider style={{ margin: '15px 0 10px 0' }} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t\t{/* Spell One */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{spells ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${spellOne.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/edbd4a33-514a-4334-8e61-01c296b8a767.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='spell-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tSpell One\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleSpellChange(e, 'spellOne')}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'spell',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'spell-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{spells.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t({ id, spellName, url }: SpellInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{spellName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Spell</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t{/* Spell Two */}\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={3} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t{spells ? (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${spellTwo.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/edbd4a33-514a-4334-8e61-01c296b8a767.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='spell-select'>\r\n\t\t\t\t\t\t\t\t\t\t\tSpell Two\r\n\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleSpellChange(e, 'spellTwo')}\r\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tname: 'spell',\r\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'spell-select',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{spells.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t({ id, spellName, url }: SpellInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{spellName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Spell</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t{/* Player Details */}\r\n\t\t\t\t\t<TabPanel value={tabValue} index={4}>\r\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '18px', fontWeight: 'bold' }}\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tPlayer Details\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\tFill in the necessary information to have the build credited as\r\n\t\t\t\t\t\t\t\tyours.\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Divider style={{ margin: '15px 0 10px 0' }} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t\t<Grid item xs={12} md={6} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tpadding: '10px 0',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Typography gutterBottom style={{ fontWeight: 'bold' }}>\r\n\t\t\t\t\t\t\t\t\t\tUsername\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\tid='username'\r\n\t\t\t\t\t\t\t\t\t\tlabel='Username'\r\n\t\t\t\t\t\t\t\t\t\tplaceholder='Username'\r\n\t\t\t\t\t\t\t\t\t\tvalue={username}\r\n\t\t\t\t\t\t\t\t\t\thelperText='Please include your ID (ex: ABC#DEFGH)'\r\n\t\t\t\t\t\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12} md={6} style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tpadding: '10px 0',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Typography gutterBottom style={{ fontWeight: 'bold' }}>\r\n\t\t\t\t\t\t\t\t\t\t\tRank\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t{/* Display Champion Image */}\r\n\t\t\t\t\t\t\t\t\t\t{rankSelected ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${rankSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rank-select'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tRank\r\n\t\t\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleRankSelectChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: 'rank',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: 'rank-select',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{ranks.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t({ id, rankName, url }: RankInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{rankName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select your rank</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</TabPanel>\r\n\r\n\t\t\t\t\t{/* Items List */}\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<Box style={{ margin: '60px 0' }}>\r\n\t\t\t\t\t\t\t<Typography gutterBottom>Items List</Typography>\r\n\r\n\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: '#e6e6e6',\r\n\t\t\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{itemsConfirmed.length !== 0 ? (\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t{/* TYPE: MAIN */}\r\n\t\t\t\t\t\t\t\t\t\t<p>Primary Items</p>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t{itemsConfirmed\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map((currentItem) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grow in={true}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: '0px 3px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={currentItem.itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.itemHover}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${currentItem.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen(e, currentItem)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Grow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<p>Optional Items</p>\r\n\t\t\t\t\t\t\t\t\t\t{/* TYPE: OPTIONAL */}\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t{itemsConfirmed\r\n\t\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'primary')\r\n\t\t\t\t\t\t\t\t\t\t\t\t.map((currentItem: ItemInterface) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grow in={true}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: '0px 3px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={currentItem.itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.itemHover}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${currentItem.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen(e, currentItem)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Grow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<p>You haven't added any items to your build yet.</p>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\tClick an item to explain why it's a part of your build\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Build Box */}\r\n\t\t\t\t\t<Box style={{ marginBottom: '40px' }}>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={submitBuild}>\r\n\t\t\t\t\t\t\tSubmit Build\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\AppBar.tsx",["97","98","99","100"],"import React from 'react';\n\n// MaterialUI\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Container from '@material-ui/core/Container';\nimport Slide from '@material-ui/core/Slide';\nimport { makeStyles } from '@material-ui/core/styles';\n// Components\n// CSS\nimport styles from './appbar.module.css';\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmenuLinks: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n}));\n//Types\n\nfunction HideOnScroll(props: any) {\n\tconst { children, window } = props;\n\t// Note that you normally won't need to set the window ref as useScrollTrigger\n\t// will default to window.\n\t// This is only being set here because the demo is in an iframe.\n\tconst trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n\treturn (\n\t\t<Slide appear={false} direction='down' in={!trigger}>\n\t\t\t{children}\n\t\t</Slide>\n\t);\n}\n\nHideOnScroll.propTypes = {\n\tchildren: PropTypes.element.isRequired,\n\t/**\n\t * Injected by the documentation to work in an iframe.\n\t * You won't need it on your project.\n\t */\n\twindow: PropTypes.func,\n};\n\nexport default function AppBarComponent(props: any) {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<HideOnScroll {...props}>\n\t\t\t\t<AppBar className={styles.header}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<a href='/' className={classes.title}>\n\t\t\t\t\t\t\t<img src='/images/riftbuilds.png' style={{ width: '100px' }} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href='/' className={styles.headerLink}>\n\t\t\t\t\t\t\t<p className={classes.menuLinks}>Home</p>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href='/create' className={styles.headerLink}>\n\t\t\t\t\t\t\t<p className={classes.menuLinks}>Create</p>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t</HideOnScroll>\n\t\t\t<Toolbar />\n\t\t</div>\n\t);\n}\n",["101","102"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\PlayerBuild\\PlayerBuild.tsx",["103","104","105","106","107"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n\r\n// MaterialUI\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n// CSS\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t\toverflow: 'hidden',\r\n\t},\r\n\tlarge: {\r\n\t\twidth: theme.spacing(7),\r\n\t\theight: theme.spacing(7),\r\n\t},\r\n}));\r\n// Types\r\ninterface ChampionInterface {\r\n\tid: string;\r\n\tchampionName: string;\r\n\turl: string;\r\n\tlane: Array<String>;\r\n\ttitle: string;\r\n}\r\ninterface ItemInterface {\r\n\tid: string;\r\n\titemName: string;\r\n\treason?: string;\r\n\ttype: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RankInterface {\r\n\tid: string;\r\n\trankName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RuneInterface {\r\n\tid: string;\r\n\truneName: string;\r\n\turl: string;\r\n\ttype: string;\r\n\tpath?: string;\r\n}\r\n\r\ninterface SpellInterface {\r\n\tid: string;\r\n\tspellName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface BuildInterface {\r\n\tdateSubmitted: string;\r\n\tusername: string;\r\n\tchampion: ChampionInterface;\r\n\titems: ItemInterface[];\r\n\trank: RankInterface;\r\n\trunes: {\r\n\t\tkeystone: RuneInterface;\r\n\t\tdomination: RuneInterface;\r\n\t\tresolve: RuneInterface;\r\n\t\tinspiration: RuneInterface;\r\n\t};\r\n\tspells: {\r\n\t\tspellOne: SpellInterface;\r\n\t\tspellTwo: SpellInterface;\r\n\t};\r\n}\r\n\r\nexport default withRouter((props) => {\r\n\tconst { match } = props;\r\n\tconst [build, setBuild] = useState<BuildInterface>();\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://wildriftbuilds.herokuapp.com/api/build/${match.params.buildId}`\r\n\t\t\t\t// `/api/build/${match.params.buildId}`\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst { data } = res;\r\n\t\t\t\tsetBuild(data);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<hr />\r\n\t\t\t{build ? (\r\n\t\t\t\t<Box\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#233248',\r\n\t\t\t\t\t\tpadding: '30px',\r\n\t\t\t\t\t\tcolor: '#ffffff',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container wrap='nowrap' spacing={2}>\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${build.champion.id}.png`}\r\n\t\t\t\t\t\t\t\ttitle={build.champion.championName}\r\n\t\t\t\t\t\t\t\tstyle={{ width: '80%', float: 'left', marginRight: '20px' }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\tcolor: '#517ebd',\r\n\t\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\t\t\t\t\tfontSize: '20px',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{build.champion.championName}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: '#949494' }}>by</span>{' '}\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: '#e9eaec' }}>{build.username}</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Avatar variant='square' style={{ backgroundColor: '#38465a' }}>\r\n\t\t\t\t\t\t\t\t\t{build.rank ? (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${build.rank.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={build.rank.rankName}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc='/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle='Unranked'\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* PRIMARY ITEMS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tPrimary Items\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{build.items\r\n\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\r\n\t\t\t\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, type, reason, url } = item;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box display='flex' p={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ float: 'left', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} style={{ color: '#d3d6da' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{reason ? reason : 'N/A'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* OPTIONAL ITEMS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tOptional Items\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{build.items\r\n\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'primary')\r\n\t\t\t\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, type, reason, url } = item;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box display='flex' p={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ float: 'left', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} style={{ color: '#d3d6da' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{reason ? reason : 'N/A'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* RUNES */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRunes\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{/* KEYSTONE RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.keystone.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* DOMINATION RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.domination.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* RESOLVE RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.resolve.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* INSPIRATION RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.inspiration.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* SPELLS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSummoner Spells\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${build.spells.spellOne.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${build.spells.spellTwo.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Date/Time Submitted */}\r\n\t\t\t\t\t<Box display='flex' flexDirection='row-reverse' p={1} m={1}>\r\n\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t<Typography variant='body2' style={{ color: '#B78F41' }}>\r\n\t\t\t\t\t\t\t\t{build.dateSubmitted\r\n\t\t\t\t\t\t\t\t\t? moment(build.dateSubmitted).format('dddd, MMMM Do YYYY')\r\n\t\t\t\t\t\t\t\t\t: 'Unknown'}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t) : (\r\n\t\t\t\t<CircularProgress />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n});\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\HeroBuilds.tsx",["108","109","110","111","112","113"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\n// MaterialUI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n// Components\nimport BuildBox from './components/BuildBox';\nimport LoadingText from '../../components/LoadingText';\n// Types\nimport { ChampionInterface, BuildInterface } from '../../utils/interfaces';\n// CSS\nimport styles from './herobuilds.module.css';\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t\toverflow: 'hidden',\n\t},\n\tpaper: {\n\t\twidth: '100%',\n\t\tmargin: `${theme.spacing(1)}px auto`,\n\t\tpadding: '10px',\n\t\tbackgroundColor: '#292E38',\n\t\tcolor: '#ffffff',\n\t},\n\tlarge: {\n\t\twidth: theme.spacing(7),\n\t\theight: theme.spacing(7),\n\t},\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t},\n}));\n\nexport default withRouter((props) => {\n\tconst { match } = props;\n\tconst { championId } = match.params;\n\n\tconst classes = useStyles();\n\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst [championBuilds, setChampionBuilds] = useState({\n\t\tbuilds: [],\n\t\tbuildsCount: 0,\n\t});\n\tconst [championData, setChampionData] = useState<ChampionInterface>({\n\t\tid: '',\n\t\tchampionName: '',\n\t\tlane: [],\n\t\ttitle: '',\n\t\tcounters: {\n\t\t\tweakAgainst: [],\n\t\t\tstrongAgainst: [],\n\t\t},\n\t\turl: '',\n\t});\n\n\tuseEffect(() => {\n\t\tconst getAllBuildsForChampion = axios.post(\n\t\t\t// `/api/build/${match.params.buildId}`\n\t\t\t`/api/build/all/${championId}`,\n\t\t\t{ page: 5 }\n\t\t);\n\t\tconst getOneChampion = axios.get(`/api/champion/${championId}`);\n\n\t\tPromise.all([getAllBuildsForChampion, getOneChampion]).then((values) => {\n\t\t\tconst [{ data: buildsForChampion }, { data: dataForChampion }] = values;\n\t\t\tconst { buildsCount, builds } = buildsForChampion;\n\n\t\t\tsetChampionBuilds({ builds, buildsCount });\n\t\t\tsetChampionData(dataForChampion[0]);\n\n\t\t\tsetIsLoading(false);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<Container>\n\t\t\t<Box\n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: '30px 0',\n\t\t\t\t\tpadding: '20px 0',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Typography variant='body1'>\n\t\t\t\t\t<span style={{ fontWeight: 'bold', fontSize: '18px' }}>\n\t\t\t\t\t\t{championBuilds.buildsCount} {championData.championName} builds\n\t\t\t\t\t</span>\n\t\t\t\t</Typography>\n\n\t\t\t\t{!isLoading ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{/* Champion Data HEADER */}\n\t\t\t\t\t\t<Grid container wrap='nowrap' spacing={2}>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${championData.id}.png`}\n\t\t\t\t\t\t\t\t\talt={championData.championName}\n\t\t\t\t\t\t\t\t\ttitle={championData.championName}\n\t\t\t\t\t\t\t\t\tstyle={{ float: 'left' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t\t<Box style={{ padding: '5px 0' }}>\n\t\t\t\t\t\t\t\t\t<Typography variant='body1'>\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#517ebd',\n\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\t\t\t\t\t\t\tfontSize: '20px',\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{championData.championName}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<Typography variant='body1'>\n\t\t\t\t\t\t\t\t\t\t<span style={{ color: '#949494' }}>\n\t\t\t\t\t\t\t\t\t\t\tThe {championData.title}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tmarginTop: '17px',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{championData.lane.map((lane) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\tlabel={lane}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '4px' }}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t<Divider variant='middle' />\n\n\t\t\t\t\t\t{/* Builds List Container */}\n\t\t\t\t\t\t<BuildBox\n\t\t\t\t\t\t\tchampionBuilds={championBuilds}\n\t\t\t\t\t\t\tchampionData={championData}\n\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<LoadingText />\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t</Container>\n\t);\n});\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\Filter.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\errorPopups.js",[],["114","115"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\LoadingText.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\components\\NoBuilds.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\ChampionsList.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\HeroBuilds\\components\\BuildBox.tsx",["116","117","118"],"import React from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport moment from 'moment';\n\n// MaterialUI\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n// Components\nimport NoBuilds from './NoBuilds';\n// Types\nimport { BuildInterface } from '../../../utils/interfaces';\n// CSS\nimport styles from './buildbox.module.css';\n\nexport default function BuildBox(props: any) {\n\tconst { championBuilds, classes } = props;\n\n\treturn (\n\t\t<Box className={styles.buildContainer}>\n\t\t\t{championBuilds.builds.length !== 0 ? (\n\t\t\t\tchampionBuilds.builds.map((build: BuildInterface, index: number) => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tid: buildId,\n\t\t\t\t\t\tchampion,\n\t\t\t\t\t\tdateSubmitted,\n\t\t\t\t\t\titems,\n\t\t\t\t\t\trank,\n\t\t\t\t\t\trunes,\n\t\t\t\t\t\tspells,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t}: BuildInterface = build;\n\t\t\t\t\tconst { id: championId, championName, url } = champion;\n\n\t\t\t\t\tvar originalDate = moment(dateSubmitted);\n\t\t\t\t\tvar dateToday = moment(Date());\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t\t\t<Paper className={classes.paper}>\n\t\t\t\t\t\t\t\t<Grid container spacing={1}>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={2}>\n\t\t\t\t\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t\t\t\t\t{originalDate.diff(dateToday, 'days')} days ago\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t{/* CHAMPION AVATAR */}\n\t\t\t\t\t\t\t\t\t<Grid item xs={2} sm={1}>\n\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t<Avatar>\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${championId}.png`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.championImage}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={championName}\n\t\t\t\t\t\t\t\t\t\t\t\t\talt={championName}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t{/* ITEMS */}\n\t\t\t\t\t\t\t\t\t<Grid item xs={10} sm={3}>\n\t\t\t\t\t\t\t\t\t\t<Box style={{ minHeight: '35px' }}>\n\t\t\t\t\t\t\t\t\t\t\t{items\n\t\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\n\t\t\t\t\t\t\t\t\t\t\t\t.map((item) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName } = item;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '36px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '6px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t{/* SPELLS */}\n\t\t\t\t\t\t\t\t\t<Grid item xs={4} sm={1}>\n\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t{spells.map((spell) => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst { id: spellId, spellName } = spell;\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box style={{ display: 'inline-block' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${spellId}.jpg`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '36px', marginRight: '6px' }}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={spellName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={spellName}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t{/* RANK */}\n\t\t\t\t\t\t\t\t\t<Grid item xs={8} sm={3}>\n\t\t\t\t\t\t\t\t\t\t<Box style={{ display: 'inline-block' }}>\n\t\t\t\t\t\t\t\t\t\t\t{rank ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${rank.id}.png`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '31px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '6px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={rank.rankName}\n\t\t\t\t\t\t\t\t\t\t\t\t\talt={rank.rankName}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc='/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png'\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '31px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '6px',\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle='Unranked'\n\t\t\t\t\t\t\t\t\t\t\t\t\talt='Unranked'\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t<Typography style={{ display: 'inline-block' }}>\n\t\t\t\t\t\t\t\t\t\t\tUsername\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t{/* LEARN MORE BUTTON */}\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={2}>\n\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t// href={`https://wildriftbuilds.herokuapp.com/build/${buildId}`}\n\t\t\t\t\t\t\t\t\t\t\t\thref={`/build/${buildId}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant='contained' color='primary'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tLearn more\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t) : (\n\t\t\t\t// No Builds\n\t\t\t\t<NoBuilds />\n\t\t\t)}\n\t\t</Box>\n\t);\n}\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\interfaces.ts",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":18},{"ruleId":"123","severity":1,"message":"127","line":5,"column":8,"nodeType":"125","messageId":"126","endLine":5,"endColumn":14},{"ruleId":"123","severity":1,"message":"128","line":6,"column":8,"nodeType":"125","messageId":"126","endLine":6,"endColumn":11},{"ruleId":"123","severity":1,"message":"124","line":7,"column":8,"nodeType":"125","messageId":"126","endLine":7,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":59,"column":5,"nodeType":"131","endLine":59,"endColumn":21,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":63,"column":51,"nodeType":"135","messageId":"136","endLine":63,"endColumn":53},{"ruleId":"129","severity":1,"message":"130","line":81,"column":5,"nodeType":"131","endLine":81,"endColumn":17,"suggestions":"137"},{"ruleId":"123","severity":1,"message":"138","line":43,"column":8,"nodeType":"125","messageId":"126","endLine":43,"endColumn":14},{"ruleId":"123","severity":1,"message":"139","line":47,"column":2,"nodeType":"125","messageId":"126","endLine":47,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":341,"column":35,"nodeType":"142","messageId":"143","endLine":341,"endColumn":37},{"ruleId":"123","severity":1,"message":"144","line":563,"column":10,"nodeType":"125","messageId":"126","endLine":563,"endColumn":24},{"ruleId":"123","severity":1,"message":"124","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":18},{"ruleId":"123","severity":1,"message":"145","line":8,"column":8,"nodeType":"125","messageId":"126","endLine":8,"endColumn":19},{"ruleId":"123","severity":1,"message":"146","line":10,"column":8,"nodeType":"125","messageId":"126","endLine":10,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":61,"column":8,"nodeType":"149","endLine":61,"endColumn":71},{"ruleId":"119","replacedBy":"150"},{"ruleId":"121","replacedBy":"151"},{"ruleId":"129","severity":1,"message":"152","line":95,"column":5,"nodeType":"131","endLine":95,"endColumn":7,"suggestions":"153"},{"ruleId":"123","severity":1,"message":"154","line":180,"column":40,"nodeType":"125","messageId":"126","endLine":180,"endColumn":44},{"ruleId":"123","severity":1,"message":"155","line":180,"column":54,"nodeType":"125","messageId":"126","endLine":180,"endColumn":57},{"ruleId":"123","severity":1,"message":"154","line":230,"column":40,"nodeType":"125","messageId":"126","endLine":230,"endColumn":44},{"ruleId":"123","severity":1,"message":"155","line":230,"column":54,"nodeType":"125","messageId":"126","endLine":230,"endColumn":57},{"ruleId":"123","severity":1,"message":"156","line":8,"column":8,"nodeType":"125","messageId":"126","endLine":8,"endColumn":14},{"ruleId":"123","severity":1,"message":"127","line":10,"column":8,"nodeType":"125","messageId":"126","endLine":10,"endColumn":14},{"ruleId":"123","severity":1,"message":"157","line":15,"column":8,"nodeType":"125","messageId":"126","endLine":15,"endColumn":13},{"ruleId":"123","severity":1,"message":"158","line":21,"column":29,"nodeType":"125","messageId":"126","endLine":21,"endColumn":43},{"ruleId":"123","severity":1,"message":"159","line":23,"column":8,"nodeType":"125","messageId":"126","endLine":23,"endColumn":14},{"ruleId":"129","severity":1,"message":"160","line":86,"column":5,"nodeType":"131","endLine":86,"endColumn":7,"suggestions":"161"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"162","line":32,"column":7,"nodeType":"125","messageId":"126","endLine":32,"endColumn":12},{"ruleId":"123","severity":1,"message":"163","line":34,"column":7,"nodeType":"125","messageId":"126","endLine":34,"endColumn":15},{"ruleId":"123","severity":1,"message":"155","line":36,"column":44,"nodeType":"125","messageId":"126","endLine":36,"endColumn":47},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Box' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'champions'. Either include it or remove the dependency array.","ArrayExpression",["166"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["167"],"'Layout' is defined but never used.","'CountersInterface' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'saveToDatabase' is assigned a value but never used.","'CssBaseline' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["164"],["165"],"React Hook useEffect has a missing dependency: 'match.params.buildId'. Either include it or remove the dependency array.",["168"],"'type' is assigned a value but never used.","'url' is assigned a value but never used.","'Avatar' is defined but never used.","'Paper' is defined but never used.","'BuildInterface' is defined but never used.","'styles' is defined but never used.","React Hook useEffect has a missing dependency: 'championId'. Either include it or remove the dependency array.",["169"],"'runes' is assigned a value but never used.","'username' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [championSearch, champions]",{"range":"178","text":"179"},"Update the dependencies array to be: [champions, roleFilter]",{"range":"180","text":"181"},"Update the dependencies array to be: [match.params.buildId]",{"range":"182","text":"183"},"Update the dependencies array to be: [championId]",{"range":"184","text":"185"},[1765,1781],"[championSearch, champions]",[2312,2324],"[champions, roleFilter]",[2044,2046],"[match.params.buildId]",[2354,2356],"[championId]"]