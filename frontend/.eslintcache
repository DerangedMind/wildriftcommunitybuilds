[{"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx":"1","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\App\\App.tsx":"3","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Layout.tsx":"4","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\Header.tsx":"5","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Footer\\Footer.tsx":"6","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx":"7","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Builds.tsx":"8","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx":"9","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\SoloBuild\\SoloBuild.tsx":"10","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\errorPopups.js":"11","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\AppBar.tsx":"12"},{"size":505,"mtime":1611338810358,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":873,"mtime":1612259130598,"results":"16","hashOfConfig":"14"},{"size":561,"mtime":1612254535168,"results":"17","hashOfConfig":"14"},{"size":425,"mtime":1612258984161,"results":"18","hashOfConfig":"14"},{"size":1363,"mtime":1612269520909,"results":"19","hashOfConfig":"14"},{"size":5196,"mtime":1612276360322,"results":"20","hashOfConfig":"14"},{"size":8990,"mtime":1612181522945,"results":"21","hashOfConfig":"14"},{"size":31490,"mtime":1612185930618,"results":"22","hashOfConfig":"14"},{"size":10692,"mtime":1612181941557,"results":"23","hashOfConfig":"14"},{"size":652,"mtime":1611854072807,"results":"24","hashOfConfig":"14"},{"size":2003,"mtime":1612257750223,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"q16prs",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx",[],["58","59"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\App\\App.tsx",["60","61","62"],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// Components\r\nimport Layout from '../../components/Layout';\r\nimport Landing from '../Landing/Landing';\r\nimport Builds from '../Builds/Builds';\r\nimport CreateBuild from '../Create/Build/CreateBuild';\r\nimport SoloBuild from '../SoloBuild/SoloBuild';\r\n// CSS\r\n// Types\r\n\r\nexport default function App() {\r\n\treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path='/' render={() => <Landing />} />\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<Route exact path='/builds' render={() => <Builds />} />\r\n\r\n\t\t\t\t\t\t<Route exact path='/create' render={() => <CreateBuild />} />\r\n\r\n\t\t\t\t\t\t<Route exact path='/build/:buildId' render={() => <SoloBuild />} />\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n}\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Layout.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\Header.tsx",["63","64","65"],"import React from 'react';\n\n// MaterialUI\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport AppBar from './AppBar';\n// CSS\n//Types\n\nexport default function Header() {\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<AppBar />\n\t\t\t\t</Grid>\n\t\t\t</header>\n\t\t</>\n\t);\n}\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Footer\\Footer.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx",["66","67","68","69","70","71","72","73","74"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Builds.tsx",["75","76","77","78","79"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n\r\n// MaterialUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ninterface ItemInterface {\r\n\tid: string;\r\n\titemName: string;\r\n\treason?: string;\r\n\ttype: string;\r\n\turl: string;\r\n}\r\n\r\ninterface ChampionInterface {\r\n\tid: string;\r\n\tchampionName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RankInterface {\r\n\tid: string;\r\n\trankName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface BuildInterface {\r\n\tid: string;\r\n\tusername: string;\r\n\tchampion: ChampionInterface;\r\n\titems: ItemInterface[];\r\n\trank: RankInterface;\r\n}\r\n\r\n// https://flaviocopes.com/typescript-object-destructuring/\r\nlet page = 5;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t\toverflow: 'hidden',\r\n\t},\r\n\tpaper: {\r\n\t\twidth: '100%',\r\n\t\tmargin: `${theme.spacing(1)}px auto`,\r\n\t\tpadding: theme.spacing(2),\r\n\t\tbackgroundColor: '#233248',\r\n\t\tcolor: '#ffffff',\r\n\t},\r\n\tlarge: {\r\n\t\twidth: theme.spacing(7),\r\n\t\theight: theme.spacing(7),\r\n\t},\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t},\r\n}));\r\n\r\nexport default function Builds() {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [builds, setBuilds] = useState<Array<BuildInterface>>([]);\r\n\tconst [champions, setChampions] = useState<Array<ChampionInterface>>([]);\r\n\tconst [championFilter, setChampionFilter] = useState<ChampionInterface>({\r\n\t\tid: '',\r\n\t\tchampionName: '',\r\n\t\turl: '',\r\n\t});\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getChampions = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/champion/all'\r\n\t\t);\r\n\t\tconst getBuilds = axios.post(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/build/all',\r\n\t\t\t{\r\n\t\t\t\tpage,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tPromise.all([getChampions, getBuilds]).then((values) => {\r\n\t\t\tconst [{ data: championsArray }, { data: buildsArray }] = values;\r\n\r\n\t\t\t// Sort Champions\r\n\t\t\tchampionsArray.sort(function (\r\n\t\t\t\ta: ChampionInterface,\r\n\t\t\t\tb: ChampionInterface\r\n\t\t\t) {\r\n\t\t\t\tif (a.championName < b.championName) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.championName > b.championName) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t\tsetChampions(championsArray);\r\n\r\n\t\t\tsetBuilds((prev: BuildInterface[]) => [...prev, ...buildsArray]);\r\n\t\t});\r\n\t}, []);\r\n\r\n\t// Get all builds\r\n\tuseEffect(() => {\r\n\t\tconsole.log(championFilter);\r\n\t}, [championFilter]);\r\n\r\n\tconst getMoreBuilds = async () => {\r\n\t\tconsole.log(championFilter.id);\r\n\r\n\t\tif (championFilter.id === '') {\r\n\t\t\tpage += 5;\r\n\r\n\t\t\tconst getBuilds = await axios.post(\r\n\t\t\t\t'https://wildriftbuilds.herokuapp.com/api/build/all',\r\n\t\t\t\t{\r\n\t\t\t\t\tpage,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst { data } = getBuilds;\r\n\r\n\t\t\tsetBuilds((prev: BuildInterface[]) => [...prev, ...data]);\r\n\t\t} else {\r\n\t\t\tpage += 5;\r\n\r\n\t\t\tconst getBuildsForHero = await axios.post(\r\n\t\t\t\t`https://wildriftbuilds.herokuapp.com/api/build/all/${\r\n\t\t\t\t\tchampionFilter ? championFilter.id : ''\r\n\t\t\t\t}`,\r\n\t\t\t\t{\r\n\t\t\t\t\tpage,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst { data } = getBuildsForHero;\r\n\r\n\t\t\tsetBuilds((prev: BuildInterface[]) => [...prev, ...data]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleChampSelectChange = async (e: any) => {\r\n\t\tpage = 5;\r\n\r\n\t\tconst getChampion = champions.find(\r\n\t\t\t(champ: ChampionInterface) => champ.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getChampion) {\r\n\t\t\t// CHAMPION NOT FOUND\r\n\t\t\tsetChampionFilter({\r\n\t\t\t\tid: '',\r\n\t\t\t\tchampionName: '',\r\n\t\t\t\turl: '',\r\n\t\t\t});\r\n\r\n\t\t\tconst getBuilds = await axios.post(\r\n\t\t\t\t`https://wildriftbuilds.herokuapp.com/api/build/all/`,\r\n\t\t\t\t{\r\n\t\t\t\t\tpage,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst { data } = getBuilds;\r\n\r\n\t\t\tsetBuilds((prev: BuildInterface[]) => [...data]);\r\n\t\t} else {\r\n\t\t\t// CHAMPION FOUND\r\n\t\t\tsetChampionFilter(getChampion);\r\n\r\n\t\t\tconst getBuildsForHero = await axios.post(\r\n\t\t\t\t`https://wildriftbuilds.herokuapp.com/api/build/all/${\r\n\t\t\t\t\tgetChampion ? getChampion.id : ''\r\n\t\t\t\t}`,\r\n\t\t\t\t{\r\n\t\t\t\t\tpage,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst { data } = getBuildsForHero;\r\n\r\n\t\t\tsetBuilds((prev: BuildInterface[]) => [...data]);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<hr />\r\n\t\t\t<Typography>Filter by:</Typography>\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel shrink htmlFor='champion-select'>\r\n\t\t\t\t\tChampion\r\n\t\t\t\t</InputLabel>\r\n\t\t\t\t<NativeSelect\r\n\t\t\t\t\tonChange={handleChampSelectChange}\r\n\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\tname: 'champion',\r\n\t\t\t\t\t\tid: 'champion-select',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=''>None</option>\r\n\t\t\t\t\t{champions.map(\r\n\t\t\t\t\t\t({ id, championName, url }: ChampionInterface, index) => {\r\n\t\t\t\t\t\t\treturn <option value={id}>{championName}</option>;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)}\r\n\t\t\t\t</NativeSelect>\r\n\t\t\t\t<FormHelperText>Select a champion</FormHelperText>\r\n\t\t\t</FormControl>\r\n\r\n\t\t\t{builds.length === 0 ? (\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t<CircularProgress />\r\n\t\t\t\t</Box>\r\n\t\t\t) : (\r\n\t\t\t\t<InfiniteScroll\r\n\t\t\t\t\tdataLength={builds.length}\r\n\t\t\t\t\tnext={getMoreBuilds}\r\n\t\t\t\t\thasMore={true}\r\n\t\t\t\t\tloader={<h4>Loading...</h4>}\r\n\t\t\t\t>\r\n\t\t\t\t\t{builds.map((build, index) => {\r\n\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\tid: buildId,\r\n\t\t\t\t\t\t\tusername,\r\n\t\t\t\t\t\t\titems,\r\n\t\t\t\t\t\t\tchampion,\r\n\t\t\t\t\t\t\trank,\r\n\t\t\t\t\t\t}: BuildInterface = build;\r\n\t\t\t\t\t\tconst { id: championId, championName, url } = champion;\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className={classes.root}>\r\n\t\t\t\t\t\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t\t\t\t\t\t<Grid container wrap='nowrap' spacing={2}>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Avatar className={classes.large}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${championId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\talt={championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box display='flex'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box flexGrow={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#517ebd',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: '20px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{championName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ color: '#949494' }}>by</span>{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ color: '#e9eaec' }}>{username}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: '#38465a' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{rank ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${rank.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={rank.rankName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={rank.rankName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc='/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle='Unranked'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt='Unranked'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Box style={{ marginTop: '30px' }}>\r\n\t\t\t\t\t\t\t\t\t\t{items\r\n\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\r\n\t\t\t\t\t\t\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName } = item;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box style={{ display: 'inline-block' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '50px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\tdisplay='flex'\r\n\t\t\t\t\t\t\t\t\t\tflexDirection='row-reverse'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ margin: '20px 0 0 0' }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t// href={`https://wildriftbuilds.herokuapp.com/build/${buildId}`}\r\n\t\t\t\t\t\t\t\t\t\t\thref={`/build/${buildId}`}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button variant='contained' color='primary'>\r\n\t\t\t\t\t\t\t\t\t\t\t\tLearn more\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</InfiniteScroll>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n}\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx",["80","81","82"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport {\r\n\terrorNoUsername,\r\n\terrorNoItemSelected,\r\n\terrorItemDuplicate,\r\n\terrorBuildSaved,\r\n\terrorPrimaryItemsLimit,\r\n\tsuccessBuildSaved,\r\n} from '../../../utils/errorPopups';\r\n\r\n// MaterialUI\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Typography from '@material-ui/core/Typography';\r\n// Components\r\nimport Layout from '../../../components/Layout';\r\n// CSS\r\nimport styles from './CreateBuild.module.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t},\r\n}));\r\n// Types\r\ninterface ChampionInterface {\r\n\tid: string;\r\n\tchampionName: string;\r\n\turl: string;\r\n}\r\ninterface ItemInterface {\r\n\tid: string;\r\n\titemName: string;\r\n\treason?: string;\r\n\ttype: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RankInterface {\r\n\tid: string;\r\n\trankName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RuneInterface {\r\n\tid: string;\r\n\truneName: string;\r\n\turl: string;\r\n\ttype: string;\r\n\tpath?: string;\r\n}\r\n\r\ninterface SpellInterface {\r\n\tid: string;\r\n\tspellName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface BuildInterface {\r\n\tid?: string;\r\n\tusername: string;\r\n\tchampion: ChampionInterface;\r\n\titems: ItemInterface[];\r\n\trank: RankInterface;\r\n\trunes: {\r\n\t\tkeystone: RuneInterface;\r\n\t\tdomination: RuneInterface;\r\n\t\tresolve: RuneInterface;\r\n\t\tinspiration: RuneInterface;\r\n\t};\r\n\tspells: {\r\n\t\tspellOne: SpellInterface;\r\n\t\tspellTwo: SpellInterface;\r\n\t};\r\n}\r\n\r\nexport default function Landing() {\r\n\tconst [hasSubmittedBuild, setHasSubmittedBuild] = useState(false);\r\n\tconst [username, setUsername] = useState('');\r\n\tconst [champions, setChampions] = useState<Array<ChampionInterface>>([]);\r\n\tconst [items, setItems] = useState<Array<ItemInterface>>([]);\r\n\tconst [ranks, setRanks] = useState<Array<RankInterface>>([]);\r\n\r\n\tconst [runes, setRunes] = useState<Array<RuneInterface>>([]);\r\n\tconst [runeKeystone, setRuneKeystone] = useState<RuneInterface>({\r\n\t\tid: 'feadf691-c740-4e7d-a4e8-9c705a48ea6a',\r\n\t\truneName: 'Aery',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/c/ce/Aery_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713114442',\r\n\t\ttype: 'keystone',\r\n\t});\r\n\tconst [runeDomination, setRuneDomination] = useState<RuneInterface>({\r\n\t\tid: '7a61f821-168c-4817-bbdd-daf3ce5439dc',\r\n\t\truneName: 'Brutal',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/c/ca/Brutal_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102514',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'domination',\r\n\t});\r\n\tconst [runeResolve, setRuneResolve] = useState<RuneInterface>({\r\n\t\tid: 'fc2532cb-e6d9-4577-a567-4f10fff13e0a',\r\n\t\truneName: 'Backbone',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/b/b2/Backbone_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102418',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'resolve',\r\n\t});\r\n\tconst [runeInspiration, setRuneInspiration] = useState<RuneInterface>({\r\n\t\tid: '80216900-b198-4195-ab1c-e6e309c28ff3',\r\n\t\truneName: 'Hunter - Genius',\r\n\t\turl:\r\n\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/e/e7/Hunter_-_Genius_%28Wild_Rift%29_rune.png/revision/latest/scale-to-width-down/52?cb=20200713102756',\r\n\t\ttype: 'secondary',\r\n\t\tpath: 'inspiration',\r\n\t});\r\n\r\n\tconst [spells, setSpells] = useState<Array<SpellInterface>>([]);\r\n\tconst [spellOne, setSpellOne] = useState<SpellInterface>({\r\n\t\tid: 'edbd4a33-514a-4334-8e61-01c296b8a767',\r\n\t\tspellName: 'Barrier',\r\n\t\turl:\r\n\t\t\t'/uploads/league-of-legends-wild-rift/images/summoner-spells/shield.jpg',\r\n\t});\r\n\tconst [spellTwo, setSpellTwo] = useState<SpellInterface>({\r\n\t\tid: 'edbd4a33-514a-4334-8e61-01c296b8a767',\r\n\t\tspellName: 'Barrier',\r\n\t\turl:\r\n\t\t\t'/uploads/league-of-legends-wild-rift/images/summoner-spells/shield.jpg',\r\n\t});\r\n\r\n\tconst [itemsConfirmed, setItemsConfirmed] = useState<Array<ItemInterface>>(\r\n\t\t[]\r\n\t);\r\n\r\n\tconst [build, setBuild] = useState<BuildInterface>();\r\n\r\n\tconst [openItemDialog, setOpenItemDialog] = useState(false);\r\n\r\n\tconst [championSelected, setChampionSelected] = useState<ChampionInterface>(\r\n\t\t// Defaults to Champion: 'Ahri' - which is the first option\r\n\t\t{\r\n\t\t\tid: '48ca031a-d92e-44e6-b7b6-f3eb1dbe644c',\r\n\t\t\tchampionName: 'Ahri',\r\n\t\t\turl:\r\n\t\t\t\t'https://lolwildriftbuild.com/wp-content/uploads/2020/10/Ahri_wild_rift.png',\r\n\t\t}\r\n\t);\r\n\tconst [itemSelected, setItemSelected] = useState<ItemInterface>(\r\n\t\t// Defaults to Item: 'Abyssal Mask' which is the first option\r\n\t\t{\r\n\t\t\tid: 'a42bcabd-290c-47f2-ae68-258d412c6d8d',\r\n\t\t\titemName: 'Abyssal Mask',\r\n\t\t\ttype: 'primary',\r\n\t\t\turl:\r\n\t\t\t\t'https://lolwildriftbuild.com/wp-content/uploads/2020/10/abyssalmask_wild_rift.png',\r\n\t\t}\r\n\t);\r\n\tconst [rankSelected, setRankSelected] = useState<RankInterface>(\r\n\t\t// Defaults to Item: 'Abyssal Mask' which is the first option\r\n\t\t{\r\n\t\t\tid: 'a4938a79-f11f-4ee1-9ec5-7741a12c4ef9',\r\n\t\t\trankName: 'Unranked',\r\n\t\t\turl:\r\n\t\t\t\t'https://static.wikia.nocookie.net/leagueoflegends/images/3/38/Season_2019_-_Unranked.png/revision/latest/scale-to-width-down/130?cb=20190908074432',\r\n\t\t}\r\n\t);\r\n\tconst [dialogItem, setDialogItem] = useState<ItemInterface>({\r\n\t\tid: '',\r\n\t\titemName: '',\r\n\t\ttype: 'primary',\r\n\t\turl: '',\r\n\t});\r\n\tconst [itemType, setItemType] = useState('primary');\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getChampions = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/champion/all'\r\n\t\t);\r\n\t\tconst getItems = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/item/all'\r\n\t\t);\r\n\t\tconst getRanks = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/rank/all'\r\n\t\t);\r\n\t\tconst getRunes = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/rune/all'\r\n\t\t);\r\n\t\tconst getSpells = axios.get(\r\n\t\t\t'https://wildriftbuilds.herokuapp.com/api/spell/all'\r\n\t\t);\r\n\r\n\t\tPromise.all([getChampions, getItems, getRanks, getRunes, getSpells]).then(\r\n\t\t\t(values) => {\r\n\t\t\t\tconst [\r\n\t\t\t\t\t{ data: championsArray },\r\n\t\t\t\t\t{ data: itemsArray },\r\n\t\t\t\t\t{ data: ranksArray },\r\n\t\t\t\t\t{ data: runesArray },\r\n\t\t\t\t\t{ data: spellsArray },\r\n\t\t\t\t] = values;\r\n\r\n\t\t\t\t// Sort Champions\r\n\t\t\t\tchampionsArray.sort(function (\r\n\t\t\t\t\ta: ChampionInterface,\r\n\t\t\t\t\tb: ChampionInterface\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (a.championName < b.championName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.championName > b.championName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetChampions(championsArray);\r\n\r\n\t\t\t\t// Sort Items\r\n\t\t\t\titemsArray.sort(function (a: ItemInterface, b: ItemInterface) {\r\n\t\t\t\t\tif (a.itemName < b.itemName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.itemName > b.itemName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetItems(itemsArray);\r\n\r\n\t\t\t\tsetRanks(ranksArray);\r\n\r\n\t\t\t\t// Sort Runes\r\n\t\t\t\trunesArray.sort(function (a: RuneInterface, b: RuneInterface) {\r\n\t\t\t\t\tif (a.runeName < b.runeName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.runeName > b.runeName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetRunes(runesArray);\r\n\r\n\t\t\t\t// Sort Spells\r\n\t\t\t\tspellsArray.sort(function (a: SpellInterface, b: SpellInterface) {\r\n\t\t\t\t\tif (a.spellName < b.spellName) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (a.spellName > b.spellName) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t\tsetSpells(spellsArray);\r\n\t\t\t}\r\n\t\t);\r\n\t}, []);\r\n\r\n\t// Check for duplicate items selected\r\n\tuseEffect(() => {\r\n\t\tconst primaryItems = itemsConfirmed.filter(\r\n\t\t\t(item) => item.type === 'primary'\r\n\t\t);\r\n\t\tvar itemArray = itemsConfirmed.map((item) => {\r\n\t\t\treturn item.id;\r\n\t\t});\r\n\t\tvar isDuplicate = itemArray.some((item, index) => {\r\n\t\t\treturn itemArray.indexOf(item) != index;\r\n\t\t});\r\n\r\n\t\t// Remove duplicates from itemsConfirmed Array\r\n\t\tconst filteredItemsConfirmed = itemsConfirmed.filter(\r\n\t\t\t(item, index, arr) => arr.findIndex((t) => t.id === item.id) === index\r\n\t\t);\r\n\r\n\t\tif (isDuplicate) {\r\n\t\t\tsetItemsConfirmed(filteredItemsConfirmed);\r\n\t\t\terrorItemDuplicate();\r\n\t\t} else if (primaryItems.length > 6) {\r\n\t\t\terrorPrimaryItemsLimit();\r\n\t\t\tsetItemsConfirmed((prev) => {\r\n\t\t\t\tconst itemsConfirmedCopy = [...prev];\r\n\r\n\t\t\t\titemsConfirmedCopy.pop();\r\n\r\n\t\t\t\treturn itemsConfirmedCopy;\r\n\t\t\t});\r\n\t\t}\r\n\t}, [itemsConfirmed]);\r\n\r\n\tconst handleChampSelectChange = (e: any) => {\r\n\t\tconst getChampion = champions.find(\r\n\t\t\t(champ: ChampionInterface) => champ.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getChampion) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetChampionSelected(getChampion);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleRankSelectChange = (e: any) => {\r\n\t\tconst getRank = ranks.find(\r\n\t\t\t(rank: RankInterface) => rank.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getRank) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetRankSelected(getRank);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleItemSelectChange = (e: any) => {\r\n\t\tconst getItem = items.find(\r\n\t\t\t(item: ItemInterface) => item.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getItem) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tsetItemSelected(getItem);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleItemReasonChange = (e: any) => {\r\n\t\tconst dialogItemId = dialogItem ? dialogItem.id : null;\r\n\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t// Create a copy of current state\r\n\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t(item) => item.id === dialogItemId\r\n\t\t\t)[0];\r\n\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t// Set reason property to the input value\r\n\t\t\tgetItem.reason = e.target.value;\r\n\r\n\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\treturn itemsConfirmedCopy;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleRuneChange = (e: any, runeType: string, runePath?: string) => {\r\n\t\tconst getRune = runes.find(\r\n\t\t\t(rune: RuneInterface) => rune.id === e.target.value\r\n\t\t);\r\n\r\n\t\tif (!getRune) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tif (runeType === 'keystone') {\r\n\t\t\t\tsetRuneKeystone(getRune);\r\n\t\t\t}\r\n\t\t\tif (runeType === 'secondary') {\r\n\t\t\t\tswitch (runePath) {\r\n\t\t\t\t\tcase 'domination':\r\n\t\t\t\t\t\tsetRuneDomination(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'resolve':\r\n\t\t\t\t\t\tsetRuneResolve(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'inspiration':\r\n\t\t\t\t\t\tsetRuneInspiration(getRune);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleAddItemClick = () => {\r\n\t\t// Pushes item to itemsConfirmed Array\r\n\t\tsetItemsConfirmed([...itemsConfirmed, { ...itemSelected, type: itemType }]);\r\n\t};\r\n\r\n\tconst handleClickOpen = (e: any, item: ItemInterface) => {\r\n\t\tsetDialogItem(item);\r\n\t\tsetOpenItemDialog(true);\r\n\t};\r\n\r\n\tconst openedDialogItem = itemsConfirmed.filter(\r\n\t\t(item) => item.id === dialogItem.id\r\n\t)[0];\r\n\tconst handleClose = (buttonClicked?: string) => {\r\n\t\tif (buttonClicked === 'confirm') {\r\n\t\t\t// If input value is empty, remove reason property from item object\r\n\t\t\t// ex: if user types something, a reason property is added,\r\n\t\t\t//     but once user clears the input, reason property is removed.\r\n\t\t\tif (\r\n\t\t\t\topenedDialogItem.reason === '' ||\r\n\t\t\t\topenedDialogItem.reason === undefined ||\r\n\t\t\t\topenedDialogItem.reason === null\r\n\t\t\t) {\r\n\t\t\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t\t\t// Create a copy of current state\r\n\t\t\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t\t\t(item) => item.id === dialogItem.id\r\n\t\t\t\t\t)[0];\r\n\t\t\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t\t\t// Delete reason property\r\n\t\t\t\t\tdelete getItem.reason;\r\n\r\n\t\t\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\t\t\treturn itemsConfirmedCopy;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetOpenItemDialog(false);\r\n\t};\r\n\r\n\tconst handleClear = () => {\r\n\t\tsetItemsConfirmed((prevState) => {\r\n\t\t\t// Create a copy of current state\r\n\t\t\tconst itemsConfirmedCopy = [...prevState];\r\n\r\n\t\t\tconst getItem = itemsConfirmedCopy.filter(\r\n\t\t\t\t(item) => item.id === dialogItem.id\r\n\t\t\t)[0];\r\n\t\t\t// Get index of item in itemsConfirmedCopy Array\r\n\t\t\tconst index = itemsConfirmedCopy.indexOf(getItem);\r\n\r\n\t\t\t// Delete reason property\r\n\t\t\tdelete getItem.reason;\r\n\r\n\t\t\t// Get object at index 'index' and set to modified item object\r\n\t\t\titemsConfirmedCopy[index] = getItem;\r\n\r\n\t\t\treturn itemsConfirmedCopy;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleItemTypeChange = (e: any) => {\r\n\t\tsetItemType(e.target.value);\r\n\t};\r\n\r\n\tconst handleSpellChange = (e: any, spellNumber: string) => {\r\n\t\tconst { value } = e.target;\r\n\r\n\t\tconst getSpell = spells.find((spell: SpellInterface) => spell.id === value);\r\n\r\n\t\tif (!getSpell) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tswitch (spellNumber) {\r\n\t\t\t\tcase 'spellOne':\r\n\t\t\t\t\tsetSpellOne(getSpell);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'spellTwo':\r\n\t\t\t\t\tsetSpellTwo(getSpell);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst submitBuild = async () => {\r\n\t\tif (itemsConfirmed.length !== 0 && username) {\r\n\t\t\tconst buildObject = {\r\n\t\t\t\tdateSubmitted: new Date(),\r\n\t\t\t\tusername: username,\r\n\t\t\t\tchampion: championSelected,\r\n\t\t\t\titems: itemsConfirmed,\r\n\t\t\t\trank: rankSelected,\r\n\t\t\t\trunes: {\r\n\t\t\t\t\tkeystone: runeKeystone,\r\n\t\t\t\t\tdomination: runeDomination,\r\n\t\t\t\t\tresolve: runeResolve,\r\n\t\t\t\t\tinspiration: runeInspiration,\r\n\t\t\t\t},\r\n\t\t\t\tspells: {\r\n\t\t\t\t\tspellOne,\r\n\t\t\t\t\tspellTwo,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tconst saveToDatabase = await axios\r\n\t\t\t\t.post(\r\n\t\t\t\t\t'https://wildriftbuilds.herokuapp.com/api/build/save',\r\n\t\t\t\t\t// '/api/build/save',\r\n\t\t\t\t\tbuildObject\r\n\t\t\t\t)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsuccessBuildSaved();\r\n\t\t\t\t\tsetBuild(res.data);\r\n\t\t\t\t\tsetHasSubmittedBuild(true);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\terr.response.status === 429 &&\r\n\t\t\t\t\t\terr.response.data ===\r\n\t\t\t\t\t\t\t\"You're creating too many builds. Please try again after 5 minutes.\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\terrorBuildSaved(err.response.data);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrorBuildSaved('Something went wrong. Failed to save build.');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (itemsConfirmed.length === 0) {\r\n\t\t\t\terrorNoItemSelected();\r\n\t\t\t} else if (!username) {\r\n\t\t\t\terrorNoUsername();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tlet dialogValue = openedDialogItem\r\n\t\t? openedDialogItem.reason\r\n\t\t\t? openedDialogItem.reason\r\n\t\t\t: ''\r\n\t\t: '';\r\n\r\n\tif (hasSubmittedBuild) {\r\n\t\tif (build) {\r\n\t\t\treturn <Redirect to={`/build/${build.id}`} />;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<hr />\r\n\t\t\t<Toaster />\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Dialog\r\n\t\t\t\t\t\topen={openItemDialog}\r\n\t\t\t\t\t\tonClose={() => handleClose()}\r\n\t\t\t\t\t\taria-labelledby='form-dialog-title'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<DialogTitle id='form-dialog-title'>\r\n\t\t\t\t\t\t\t{dialogItem ? dialogItem.itemName : null}\r\n\t\t\t\t\t\t</DialogTitle>\r\n\t\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t\t\t\tLet others know why you chose this item by giving an explanation\r\n\t\t\t\t\t\t\t\tbelow.\r\n\t\t\t\t\t\t\t</DialogContentText>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\tmargin='dense'\r\n\t\t\t\t\t\t\t\tid='name'\r\n\t\t\t\t\t\t\t\tlabel='Explanation'\r\n\t\t\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tvalue={dialogValue}\r\n\t\t\t\t\t\t\t\tonChange={(e) => handleItemReasonChange(e)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t\t<Button onClick={handleClear} color='primary'>\r\n\t\t\t\t\t\t\t\tClear\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button onClick={() => handleClose('confirm')} color='primary'>\r\n\t\t\t\t\t\t\t\tConfirm\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</DialogActions>\r\n\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t{/* Select Champion */}\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<p>Select Champion</p>\r\n\t\t\t\t\t\t\t{/* Display Champion Image */}\r\n\t\t\t\t\t\t\t{championSelected ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${championSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '100px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/48ca031a-d92e-44e6-b7b6-f3eb1dbe644c.png`}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='champion-select'>\r\n\t\t\t\t\t\t\t\t\t\tChampion\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleChampSelectChange}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'champion',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'champion-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{champions.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, championName, url }: ChampionInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{championName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a champion</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Select Item */}\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t<p>Select Item</p>\r\n\r\n\t\t\t\t\t\t\t{itemSelected ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/a42bcabd-290c-47f2-ae68-258d412c6d8d.png`}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='item-select'>\r\n\t\t\t\t\t\t\t\t\t\tItem\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleItemSelectChange}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'item',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'item-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{items.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, itemName, url }: ItemInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{itemName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Add an item to your build</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t<p>Item Type</p>\r\n\t\t\t\t\t\t\t\t<RadioGroup\r\n\t\t\t\t\t\t\t\t\trow\r\n\t\t\t\t\t\t\t\t\tname='position'\r\n\t\t\t\t\t\t\t\t\tdefaultValue='primary'\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => handleItemTypeChange(e)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\tvalue='primary'\r\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\r\n\t\t\t\t\t\t\t\t\t\tlabel='Primary'\r\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ margin: '0' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\tvalue='optional'\r\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color='primary' />}\r\n\t\t\t\t\t\t\t\t\t\tlabel='Optional'\r\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ margin: '0' }}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t<br />\r\n\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\t\tonClick={handleAddItemClick}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd Item\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Typography>Select Rune</Typography>\r\n\t\t\t\t\t{/* Select Rune */}\r\n\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t{/* KEYSTONE Rune */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{runeKeystone ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeKeystone.id}.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/feadf691-c740-4e7d-a4e8-9c705a48ea6a.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\tKeystone\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleRuneChange(e, 'keystone')}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t.filter((rune) => rune.type === 'keystone')\r\n\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Keystone Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t{/* Secondary: Domination */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{runeDomination ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeDomination.id}.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/7a61f821-168c-4817-bbdd-daf3ce5439dc.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\tDomination (Slot 1)\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'domination')\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trune.path === 'domination'\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Domination Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t{/* Secondary: Resolve */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{runeResolve ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeResolve.id}.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/fc2532cb-e6d9-4577-a567-4f10fff13e0a.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\tResolve (Slot 2)\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'resolve')\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' && rune.path === 'resolve'\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Resolve Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t{/* Secondary: Inspiration */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{runeResolve ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${runeInspiration.id}.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/80216900-b198-4195-ab1c-e6e309c28ff3.png`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '95px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rune-select'>\r\n\t\t\t\t\t\t\t\t\t\tInspiration (Slot 3)\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\thandleRuneChange(e, 'secondary', 'inspiration')\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'rune',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'rune-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{runes\r\n\t\t\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(rune) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trune.type === 'secondary' &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trune.path === 'inspiration'\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t.map(({ id, runeName, url }: RuneInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{runeName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Inspiration Rune</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Typography>Select Summoner Spells</Typography>\r\n\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t{/* Spell One */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{spells ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${spellOne.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/edbd4a33-514a-4334-8e61-01c296b8a767.jpg`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='spell-select'>\r\n\t\t\t\t\t\t\t\t\t\tSpell One\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleSpellChange(e, 'spellOne')}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'spell',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'spell-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{spells.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, spellName, url }: SpellInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{spellName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Spell</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{/* Spell Two */}\r\n\t\t\t\t\t\t<Grid item xs={12} sm={3}>\r\n\t\t\t\t\t\t\t{spells ? (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${spellTwo.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/edbd4a33-514a-4334-8e61-01c296b8a767.jpg`}\r\n\t\t\t\t\t\t\t\t\tstyle={{ width: '90px' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='spell-select'>\r\n\t\t\t\t\t\t\t\t\t\tSpell Two\r\n\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleSpellChange(e, 'spellTwo')}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\tname: 'spell',\r\n\t\t\t\t\t\t\t\t\t\t\tid: 'spell-select',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{spells.map(\r\n\t\t\t\t\t\t\t\t\t\t\t({ id, spellName, url }: SpellInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{spellName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t<FormHelperText>Select a Spell</FormHelperText>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Items List */}\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h3>Items List</h3>\r\n\r\n\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor: '#e6e6e6',\r\n\t\t\t\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{itemsConfirmed.length !== 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t{/* TYPE: MAIN */}\r\n\t\t\t\t\t\t\t\t\t\t\t<p>Primary Items</p>\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemsConfirmed\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map((currentItem) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grow in={true}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: '0px 3px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={currentItem.itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.itemHover}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${currentItem.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen(e, currentItem)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Grow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<p>Optional Items</p>\r\n\t\t\t\t\t\t\t\t\t\t\t{/* TYPE: OPTIONAL */}\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemsConfirmed\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'primary')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map((currentItem: ItemInterface) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Grow in={true}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: '0px 3px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={currentItem.itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.itemHover}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${currentItem.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen(e, currentItem)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Grow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<p>You haven't added any items to your build yet.</p>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t\tClick an item to explain why it's a part of your build\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Player Details */}\r\n\t\t\t\t\t<Grid container item xs={12}>\r\n\t\t\t\t\t\t<Grid item xs={12} md={6}>\r\n\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tpadding: '10px 0',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<h3>Player Details</h3>\r\n\t\t\t\t\t\t\t\t<p>Username</p>\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tid='username'\r\n\t\t\t\t\t\t\t\t\tlabel='Username'\r\n\t\t\t\t\t\t\t\t\tplaceholder='Username'\r\n\t\t\t\t\t\t\t\t\tvalue={username}\r\n\t\t\t\t\t\t\t\t\thelperText='Please include your ID (ex: ABC#DEFGH)'\r\n\t\t\t\t\t\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} md={6}>\r\n\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tpadding: '10px 0',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<p>Rank</p>\r\n\t\t\t\t\t\t\t\t\t{/* Display Champion Image */}\r\n\t\t\t\t\t\t\t\t\t{rankSelected ? (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${rankSelected.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100px' }}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png`}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t\t<InputLabel shrink htmlFor='rank-select'>\r\n\t\t\t\t\t\t\t\t\t\t\t\tRank\r\n\t\t\t\t\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t<NativeSelect\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleRankSelectChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: 'rank',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: 'rank-select',\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{ranks.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t({ id, rankName, url }: RankInterface, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn <option value={id}>{rankName}</option>;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</NativeSelect>\r\n\t\t\t\t\t\t\t\t\t\t\t<FormHelperText>Select your rank</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t{/* Build Box */}\r\n\t\t\t\t\t<Box style={{ marginBottom: '40px' }}>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={submitBuild}>\r\n\t\t\t\t\t\t\tSubmit Build\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\SoloBuild\\SoloBuild.tsx",["83","84","85","86","87"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\n\r\n// MaterialUI\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n// CSS\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tflexGrow: 1,\r\n\t\toverflow: 'hidden',\r\n\t},\r\n\tlarge: {\r\n\t\twidth: theme.spacing(7),\r\n\t\theight: theme.spacing(7),\r\n\t},\r\n}));\r\n// Types\r\ninterface ChampionInterface {\r\n\tid: string;\r\n\tchampionName: string;\r\n\turl: string;\r\n}\r\ninterface ItemInterface {\r\n\tid: string;\r\n\titemName: string;\r\n\treason?: string;\r\n\ttype: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RankInterface {\r\n\tid: string;\r\n\trankName: string;\r\n\turl: string;\r\n}\r\n\r\ninterface RuneInterface {\r\n\tid: string;\r\n\truneName: string;\r\n\turl: string;\r\n\ttype: string;\r\n\tpath?: string;\r\n}\r\n\r\ninterface SpellInterface {\r\n\tid: string;\r\n\tspellName: string;\r\n\turl: string;\r\n}\r\ninterface BuildInterface {\r\n\tdateSubmitted: string;\r\n\tusername: string;\r\n\tchampion: ChampionInterface;\r\n\titems: ItemInterface[];\r\n\trank: RankInterface;\r\n\trunes: {\r\n\t\tkeystone: RuneInterface;\r\n\t\tdomination: RuneInterface;\r\n\t\tresolve: RuneInterface;\r\n\t\tinspiration: RuneInterface;\r\n\t};\r\n\tspells: {\r\n\t\tspellOne: SpellInterface;\r\n\t\tspellTwo: SpellInterface;\r\n\t};\r\n}\r\n\r\nexport default withRouter((props) => {\r\n\tconst { match } = props;\r\n\tconst [build, setBuild] = useState<BuildInterface>();\r\n\r\n\tconst classes = useStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://wildriftbuilds.herokuapp.com/api/build/${match.params.buildId}`\r\n\t\t\t\t// `/api/build/${match.params.buildId}`\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst { data } = res;\r\n\t\t\t\tsetBuild(data);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<hr />\r\n\t\t\t{build ? (\r\n\t\t\t\t<Box\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#233248',\r\n\t\t\t\t\t\tpadding: '30px',\r\n\t\t\t\t\t\tcolor: '#ffffff',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container wrap='nowrap' spacing={2}>\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\tsrc={`/images/wildriftchampions/${build.champion.id}.png`}\r\n\t\t\t\t\t\t\t\ttitle={build.champion.championName}\r\n\t\t\t\t\t\t\t\tstyle={{ width: '80%', float: 'left', marginRight: '20px' }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\tcolor: '#517ebd',\r\n\t\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\r\n\t\t\t\t\t\t\t\t\t\t\tfontSize: '20px',\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{build.champion.championName}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t<Typography variant='body1'>\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: '#949494' }}>by</span>{' '}\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: '#e9eaec' }}>{build.username}</span>\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<Box style={{ marginTop: '10px' }}>\r\n\t\t\t\t\t\t\t\t<Avatar variant='square' style={{ backgroundColor: '#38465a' }}>\r\n\t\t\t\t\t\t\t\t\t{build.rank ? (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftranks/${build.rank.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={build.rank.rankName}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\tsrc='/images/wildriftranks/a4938a79-f11f-4ee1-9ec5-7741a12c4ef9.png'\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle='Unranked'\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* PRIMARY ITEMS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tPrimary Items\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{build.items\r\n\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'optional')\r\n\t\t\t\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, type, reason, url } = item;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box display='flex' p={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ float: 'left', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} style={{ color: '#d3d6da' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{reason ? reason : 'N/A'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* OPTIONAL ITEMS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tOptional Items\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{build.items\r\n\t\t\t\t\t\t\t\t.filter((item) => item.type !== 'primary')\r\n\t\t\t\t\t\t\t\t.map((item) => {\r\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, type, reason, url } = item;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Box display='flex' p={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ float: 'left', marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemId}.png`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box p={1} style={{ color: '#d3d6da' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{reason ? reason : 'N/A'}\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* RUNES */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRunes\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t{/* KEYSTONE RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.keystone.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.keystone.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* DOMINATION RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.domination.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.domination.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* RESOLVE RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.resolve.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.resolve.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t{/* INSPIRATION RUNE BOX */}\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftrunes/${build.runes.inspiration.id}.png`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.runes.inspiration.runeName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* SPELLS */}\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor: '#656f7e',\r\n\t\t\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\t\t\tmargin: '20px 0',\r\n\t\t\t\t\t\t\tpadding: '20px',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant='subtitle1'\r\n\t\t\t\t\t\t\tstyle={{ fontWeight: 'bolder', color: '#e9eaec' }}\r\n\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSummoner Spells\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${build.spells.spellOne.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.spells.spellOne.spellName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\tvariant='square'\r\n\t\t\t\t\t\t\t\t\tclassName={classes.large}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<LazyLoadImage\r\n\t\t\t\t\t\t\t\t\t\tsrc={`/images/wildriftspells/${build.spells.spellTwo.id}.jpg`}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t\t\t\t\t\t\t\ttitle={build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t\t\t\talt={build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t{build.spells.spellTwo.spellName}\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t{/* Date/Time Submitted */}\r\n\t\t\t\t\t<Box display='flex' flexDirection='row-reverse' p={1} m={1}>\r\n\t\t\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t\t\t<Typography variant='body2' style={{ color: '#B78F41' }}>\r\n\t\t\t\t\t\t\t\t{build.dateSubmitted\r\n\t\t\t\t\t\t\t\t\t? moment(build.dateSubmitted).format('dddd, MMMM Do YYYY')\r\n\t\t\t\t\t\t\t\t\t: 'Unknown'}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t) : (\r\n\t\t\t\t<CircularProgress />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n});\r\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\utils\\errorPopups.js",[],["88","89"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\components\\Header\\AppBar.tsx",["90","91","92","93"],"import React from 'react';\n\n// MaterialUI\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Container from '@material-ui/core/Container';\nimport Slide from '@material-ui/core/Slide';\nimport { makeStyles } from '@material-ui/core/styles';\n// Components\n// CSS\nimport styles from './appbar.module.css';\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmenuLinks: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n}));\n//Types\n\nfunction HideOnScroll(props: any) {\n\tconst { children, window } = props;\n\t// Note that you normally won't need to set the window ref as useScrollTrigger\n\t// will default to window.\n\t// This is only being set here because the demo is in an iframe.\n\tconst trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n\treturn (\n\t\t<Slide appear={false} direction='down' in={!trigger}>\n\t\t\t{children}\n\t\t</Slide>\n\t);\n}\n\nHideOnScroll.propTypes = {\n\tchildren: PropTypes.element.isRequired,\n\t/**\n\t * Injected by the documentation to work in an iframe.\n\t * You won't need it on your project.\n\t */\n\twindow: PropTypes.func,\n};\n\nexport default function AppBarComponent(props: any) {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<HideOnScroll {...props}>\n\t\t\t\t<AppBar className={styles.header}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<a href='/' className={classes.title}>\n\t\t\t\t\t\t\t<img src='/images/riftbuilds.png' style={{ width: '100px' }} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href='/' className={styles.headerLink}>\n\t\t\t\t\t\t\t<p className={classes.menuLinks}>Home</p>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href='/create' className={styles.headerLink}>\n\t\t\t\t\t\t\t<p className={classes.menuLinks}>Create</p>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t</HideOnScroll>\n\t\t\t<Toolbar />\n\t\t</div>\n\t);\n}\n",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"102","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"103","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":13},{"ruleId":"98","severity":1,"message":"104","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":18},{"ruleId":"98","severity":1,"message":"105","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":14},{"ruleId":"98","severity":1,"message":"106","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":11},{"ruleId":"98","severity":1,"message":"107","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":22},{"ruleId":"98","severity":1,"message":"108","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":13},{"ruleId":"98","severity":1,"message":"105","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":14},{"ruleId":"98","severity":1,"message":"109","line":14,"column":8,"nodeType":"100","messageId":"101","endLine":14,"endColumn":19},{"ruleId":"98","severity":1,"message":"110","line":15,"column":8,"nodeType":"100","messageId":"101","endLine":15,"endColumn":14},{"ruleId":"98","severity":1,"message":"111","line":16,"column":8,"nodeType":"100","messageId":"101","endLine":16,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":76,"column":5,"nodeType":"114","endLine":76,"endColumn":21,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":79,"column":51,"nodeType":"118","messageId":"119","endLine":79,"endColumn":53},{"ruleId":"112","severity":1,"message":"113","line":96,"column":5,"nodeType":"114","endLine":96,"endColumn":17,"suggestions":"120"},{"ruleId":"98","severity":1,"message":"121","line":14,"column":8,"nodeType":"100","messageId":"101","endLine":14,"endColumn":17},{"ruleId":"98","severity":1,"message":"122","line":16,"column":8,"nodeType":"100","messageId":"101","endLine":16,"endColumn":24},{"ruleId":"98","severity":1,"message":"123","line":76,"column":9,"nodeType":"100","messageId":"101","endLine":76,"endColumn":16},{"ruleId":"98","severity":1,"message":"124","line":76,"column":18,"nodeType":"100","messageId":"101","endLine":76,"endColumn":28},{"ruleId":"98","severity":1,"message":"125","line":243,"column":45,"nodeType":"100","messageId":"101","endLine":243,"endColumn":48},{"ruleId":"98","severity":1,"message":"126","line":37,"column":8,"nodeType":"100","messageId":"101","endLine":37,"endColumn":14},{"ruleId":"127","severity":1,"message":"128","line":293,"column":35,"nodeType":"129","messageId":"130","endLine":293,"endColumn":37},{"ruleId":"98","severity":1,"message":"131","line":515,"column":10,"nodeType":"100","messageId":"101","endLine":515,"endColumn":24},{"ruleId":"112","severity":1,"message":"132","line":92,"column":5,"nodeType":"114","endLine":92,"endColumn":7,"suggestions":"133"},{"ruleId":"98","severity":1,"message":"134","line":177,"column":40,"nodeType":"100","messageId":"101","endLine":177,"endColumn":44},{"ruleId":"98","severity":1,"message":"125","line":177,"column":54,"nodeType":"100","messageId":"101","endLine":177,"endColumn":57},{"ruleId":"98","severity":1,"message":"134","line":227,"column":40,"nodeType":"100","messageId":"101","endLine":227,"endColumn":44},{"ruleId":"98","severity":1,"message":"125","line":227,"column":54,"nodeType":"100","messageId":"101","endLine":227,"endColumn":57},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"104","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":18},{"ruleId":"98","severity":1,"message":"135","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":19},{"ruleId":"98","severity":1,"message":"136","line":10,"column":8,"nodeType":"100","messageId":"101","endLine":10,"endColumn":17},{"ruleId":"137","severity":1,"message":"138","line":61,"column":8,"nodeType":"139","endLine":61,"endColumn":71},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'axios' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'ArrowRightIcon' is defined but never used.","'Badge' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'NativeSelect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'champions'. Either include it or remove the dependency array.","ArrayExpression",["142"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["143"],"'TextField' is defined but never used.","'FormControlLabel' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'url' is assigned a value but never used.","'Layout' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'saveToDatabase' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.buildId'. Either include it or remove the dependency array.",["144"],"'type' is assigned a value but never used.","'CssBaseline' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [championSearch, champions]",{"range":"151","text":"152"},"Update the dependencies array to be: [champions, roleFilter]",{"range":"153","text":"154"},"Update the dependencies array to be: [match.params.buildId]",{"range":"155","text":"156"},[2260,2276],"[championSearch, champions]",[2686,2698],"[champions, roleFilter]",[2002,2004],"[match.params.buildId]"]