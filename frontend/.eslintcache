[{"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx":"1","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx":"3","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\App\\App.tsx":"4","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\FilterBy\\FilterBy.tsx":"5","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\Champions\\Champions.tsx":"6","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx":"7","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\Stepper\\Stepper.tsx":"8","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\BuildInformation.tsx":"9","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\BuildSelection.tsx":"10","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\PlayerInformation.tsx":"11","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\CreateBuildHeader\\CreateBuildHeader.tsx":"12","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ChampionSelect\\ChampionSelect.tsx":"13","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelect\\ItemsSelect.tsx":"14","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelected\\ItemsSelected.tsx":"15","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\RunesSelect.tsx":"16","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Keystone.tsx":"17","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Domination.tsx":"18","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Resolve.tsx":"19","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Inspiration.tsx":"20","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\SpellsSelect\\SpellsSelect.tsx":"21","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\SpellsSelect\\components\\Spell.tsx":"22","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\ChampionBuilds.tsx":"23","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\PlayerBuild.tsx":"24","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildHeader\\PlayerBuildHeader.tsx":"25","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\SectionDivider\\SectionDivider.tsx":"26","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\RuneItem\\RuneItem.tsx":"27","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\Spellitem\\SpellItem.tsx":"28","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\PlayerBuildFooter.tsx":"29","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\BuildItem\\BuildItem.tsx":"30","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\ChampionData.tsx":"31","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\BuildsList.tsx":"32","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\NoBuilds\\NoBuilds.tsx":"33","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\BuildBox.tsx":"34","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildDate\\BuildDate.tsx":"35","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildSpell\\BuildSpell.tsx":"36","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildRune\\BuildRune.tsx":"37","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildRankUser\\BuildRankUser.tsx":"38","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\components\\Lanes\\Lanes.tsx":"39","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\components\\Counters\\Counters.tsx":"40","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQ\\FAQ.tsx":"41","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQ\\components\\AccordionFAQ.tsx":"42","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildItem\\BuildItem.tsx":"43","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\BuildRole\\BuildRole.tsx":"44","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\Stepper\\components\\StepperButtons.tsx":"45","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\ReCaptcha\\ReCaptcha.tsx":"46","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\validations.ts":"47","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildHeader\\components\\BuildChip\\BuildChip.tsx":"48","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\components\\CopyBuildLink\\CopyBuildLink.tsx":"49","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\components\\ViewMoreBuilds\\ViewMoreBuilds.tsx":"50","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\BuildTitle\\BuildTitle.tsx":"51","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\GameMode\\GameMode.tsx":"52","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\Description\\Description.tsx":"53","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Username\\PlayerUsername.tsx":"54","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Rank\\PlayerRank.tsx":"55","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Region\\PlayerRegion.tsx":"56","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\BuildDescription\\BuildDescription.tsx":"57","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\requiredLength.ts":"58","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\config\\config.ts":"59","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\constants.ts":"60","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\defaultSelectedState.ts":"61","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\validationMessages.ts":"62","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\build.ts":"63","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\gameData.ts":"64","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\reCaptcha.ts":"65","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\snackbarControls.ts":"66","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\actions.ts":"67","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\AlertDialog\\AlertDialog.tsx":"68","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\PrivacyPolicy\\PrivacyPolicy.tsx":"69","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelected\\components\\BuildItem\\BuildItem.tsx":"70","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\About\\About.tsx":"71","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\interfaces\\interfaces.ts":"72","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\ItemPopover.tsx":"73","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\RunePopover.tsx":"74","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\SpellPopover.tsx":"75","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Snackbars\\Snackbars.tsx":"76","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\Backdrop.tsx":"77","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\ComponentLoading.tsx":"78","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Layout.tsx":"79","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Footer\\Footer.tsx":"80","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Header\\Header.tsx":"81","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Header\\AppBar\\AppBar.tsx":"82","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageError\\PageNotFound\\PageNotFound.tsx":"83"},{"size":1519,"mtime":1617874531626,"results":"84","hashOfConfig":"85"},{"size":425,"mtime":499162500000,"results":"86","hashOfConfig":"85"},{"size":2813,"mtime":1619086782531,"results":"87","hashOfConfig":"85"},{"size":6121,"mtime":1619087291464,"results":"88","hashOfConfig":"85"},{"size":2828,"mtime":1618199444864,"results":"89","hashOfConfig":"85"},{"size":1444,"mtime":1617538043372,"results":"90","hashOfConfig":"85"},{"size":7432,"mtime":1619086693343,"results":"91","hashOfConfig":"85"},{"size":2028,"mtime":1618190864330,"results":"92","hashOfConfig":"85"},{"size":997,"mtime":1617364657351,"results":"93","hashOfConfig":"85"},{"size":1080,"mtime":1617172401566,"results":"94","hashOfConfig":"85"},{"size":641,"mtime":1617414740895,"results":"95","hashOfConfig":"85"},{"size":736,"mtime":1618645412936,"results":"96","hashOfConfig":"85"},{"size":2474,"mtime":1617538043019,"results":"97","hashOfConfig":"85"},{"size":5909,"mtime":1618469706038,"results":"98","hashOfConfig":"85"},{"size":5935,"mtime":1618579154207,"results":"99","hashOfConfig":"85"},{"size":4380,"mtime":1617538043020,"results":"100","hashOfConfig":"85"},{"size":3224,"mtime":1619086350493,"results":"101","hashOfConfig":"85"},{"size":3273,"mtime":1619086331944,"results":"102","hashOfConfig":"85"},{"size":3225,"mtime":1619086355589,"results":"103","hashOfConfig":"85"},{"size":3330,"mtime":1619086344058,"results":"104","hashOfConfig":"85"},{"size":3193,"mtime":1617587972957,"results":"105","hashOfConfig":"85"},{"size":2261,"mtime":1619086376807,"results":"106","hashOfConfig":"85"},{"size":4270,"mtime":1619087450098,"results":"107","hashOfConfig":"85"},{"size":4443,"mtime":1619087277028,"results":"108","hashOfConfig":"85"},{"size":3049,"mtime":1618572542249,"results":"109","hashOfConfig":"85"},{"size":477,"mtime":1614783336555,"results":"110","hashOfConfig":"85"},{"size":1983,"mtime":1619086419890,"results":"111","hashOfConfig":"85"},{"size":1771,"mtime":1619086437674,"results":"112","hashOfConfig":"85"},{"size":798,"mtime":1616730348984,"results":"113","hashOfConfig":"85"},{"size":2161,"mtime":1619086410812,"results":"114","hashOfConfig":"85"},{"size":2037,"mtime":1618284636792,"results":"115","hashOfConfig":"85"},{"size":858,"mtime":1618579223516,"results":"116","hashOfConfig":"85"},{"size":1472,"mtime":1618580354276,"results":"117","hashOfConfig":"85"},{"size":4194,"mtime":1619087484297,"results":"118","hashOfConfig":"85"},{"size":733,"mtime":1618566573919,"results":"119","hashOfConfig":"85"},{"size":1197,"mtime":1619086200490,"results":"120","hashOfConfig":"85"},{"size":1828,"mtime":1619086167218,"results":"121","hashOfConfig":"85"},{"size":968,"mtime":1618572331612,"results":"122","hashOfConfig":"85"},{"size":1714,"mtime":1617246138160,"results":"123","hashOfConfig":"85"},{"size":3797,"mtime":1617173469027,"results":"124","hashOfConfig":"85"},{"size":1383,"mtime":1616729553389,"results":"125","hashOfConfig":"85"},{"size":5724,"mtime":1618479492393,"results":"126","hashOfConfig":"85"},{"size":1184,"mtime":1619086081502,"results":"127","hashOfConfig":"85"},{"size":3515,"mtime":1618644590306,"results":"128","hashOfConfig":"85"},{"size":1275,"mtime":1618190228745,"results":"129","hashOfConfig":"85"},{"size":1494,"mtime":1617843102766,"results":"130","hashOfConfig":"85"},{"size":16493,"mtime":1617873861896,"results":"131","hashOfConfig":"85"},{"size":547,"mtime":1618554302276,"results":"132","hashOfConfig":"85"},{"size":1349,"mtime":1617843573539,"results":"133","hashOfConfig":"85"},{"size":1103,"mtime":1616751162477,"results":"134","hashOfConfig":"85"},{"size":2088,"mtime":1617538891942,"results":"135","hashOfConfig":"85"},{"size":2856,"mtime":1618568541950,"results":"136","hashOfConfig":"85"},{"size":1931,"mtime":1617538916911,"results":"137","hashOfConfig":"85"},{"size":1821,"mtime":1617538951232,"results":"138","hashOfConfig":"85"},{"size":2272,"mtime":1617538043020,"results":"139","hashOfConfig":"85"},{"size":2095,"mtime":1617876480292,"results":"140","hashOfConfig":"85"},{"size":1688,"mtime":1618572215856,"results":"141","hashOfConfig":"85"},{"size":342,"mtime":1617614795611,"results":"142","hashOfConfig":"85"},{"size":298,"mtime":1618818162476,"results":"143","hashOfConfig":"85"},{"size":1184,"mtime":1618552812425,"results":"144","hashOfConfig":"85"},{"size":3895,"mtime":1618818913506,"results":"145","hashOfConfig":"85"},{"size":2388,"mtime":1617875669211,"results":"146","hashOfConfig":"85"},{"size":2132,"mtime":1617877446290,"results":"147","hashOfConfig":"85"},{"size":1018,"mtime":1617877442688,"results":"148","hashOfConfig":"85"},{"size":566,"mtime":1617877439915,"results":"149","hashOfConfig":"85"},{"size":398,"mtime":1617877434257,"results":"150","hashOfConfig":"85"},{"size":1919,"mtime":1617877464919,"results":"151","hashOfConfig":"85"},{"size":1440,"mtime":1618194618233,"results":"152","hashOfConfig":"85"},{"size":4379,"mtime":1618552010880,"results":"153","hashOfConfig":"85"},{"size":1704,"mtime":1619086129131,"results":"154","hashOfConfig":"85"},{"size":2101,"mtime":1618552364081,"results":"155","hashOfConfig":"85"},{"size":2430,"mtime":1617802086265,"results":"156","hashOfConfig":"85"},{"size":2629,"mtime":1619086966741,"results":"157","hashOfConfig":"85"},{"size":2242,"mtime":1619086997520,"results":"158","hashOfConfig":"85"},{"size":2852,"mtime":1619086827676,"results":"159","hashOfConfig":"85"},{"size":2110,"mtime":1619087013271,"results":"160","hashOfConfig":"85"},{"size":614,"mtime":1618569757965,"results":"161","hashOfConfig":"85"},{"size":545,"mtime":1619086704533,"results":"162","hashOfConfig":"85"},{"size":886,"mtime":1614769422065,"results":"163","hashOfConfig":"85"},{"size":2088,"mtime":1619086912825,"results":"164","hashOfConfig":"85"},{"size":274,"mtime":1619086942700,"results":"165","hashOfConfig":"85"},{"size":2080,"mtime":1619085882375,"results":"166","hashOfConfig":"85"},{"size":1744,"mtime":1618196622451,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},"q16prs",{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"171"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"171"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"171"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"171"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"171"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"171"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"171"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"171"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"171"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"171"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"171"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"171"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"171"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"171"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\index.tsx",["350","351","352"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport buildReducer from './store/reducers/build';\nimport gameDataReducer from './store/reducers/gameData';\nimport recaptchaReducer from './store/reducers/reCaptcha';\nimport snackbarControlsReducer from './store/reducers/snackbarControls';\n\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage: storage,\n};\n\nconst rootReducer = combineReducers({\n\tbuild: buildReducer,\n\tgameData: gameDataReducer,\n\trecaptcha: recaptchaReducer,\n\tsnackbarControls: snackbarControlsReducer,\n});\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(rootReducer);\n\nconst persistor = persistStore(store);\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t{/* <PersistGate loading={null} persistor={persistor}> */}\n\t\t\t<App />\n\t\t\t{/* </PersistGate> */}\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["353","354"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\Landing.tsx",["355","356","357"],"import React, { useState, useEffect } from 'react';\n\nimport { RoleFilter } from '../../shared/constants/constants';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\n// Components\nimport Champions from './components/Champions/Champions';\nimport FilterBy from './components/FilterBy/FilterBy';\nimport ComponentLoading from '../../shared/components/Loading/ComponentLoading';\n// CSS\nimport styles from './landing.module.css';\n// Types\nimport {\n\tChampionInterface,\n\tRootState,\n} from '../../shared/interfaces/interfaces';\n\nconst Landing = (props: LandingProps) => {\n\t// Game Data PROPS\n\tconst { champions } = props;\n\n\tconst [championSearch, setChampionSearch] = useState('');\n\tconst [filteredChampions, setFilteredChampions] = useState<\n\t\tArray<ChampionInterface>\n\t>([]);\n\tconst [roleFilter, setRoleFilter] = useState(RoleFilter.ALL);\n\n\t// HANDLER for \"Search for a champion\" input\n\tconst handleChampionSearchChange = (\n\t\te: React.ChangeEvent<HTMLInputElement> // ChangeEvent more suitable for typing form events.\n\t) => {\n\t\tconst { value } = e.target;\n\t\tsetChampionSearch(value);\n\t};\n\n\tuseEffect(() => {\n\t\tsetFilteredChampions(champions);\n\t}, [champions]);\n\n\t// Change state based on \"All, Top, Jungle, Middle, Bottom, Support\"\n\tuseEffect(() => {\n\t\tconst filterRoles = champions.filter((champion: ChampionInterface) => {\n\t\t\tconst { lane } = champion;\n\n\t\t\t// Check if champion has \"lane\" property\n\t\t\tif (lane) {\n\t\t\t\t// Return every champion if filter is \"all\"\n\t\t\t\tif (roleFilter === RoleFilter.ALL) {\n\t\t\t\t\treturn champion;\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < lane.length; i++) {\n\t\t\t\t\t\tif (lane[i].toLocaleLowerCase() === roleFilter) {\n\t\t\t\t\t\t\treturn champion;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsetFilteredChampions(filterRoles);\n\t}, [roleFilter]);\n\n\t// Change state based on \"Search for a champion\"\n\tuseEffect(() => {\n\t\tconst filterChampions = champions.filter((champion: ChampionInterface) =>\n\t\t\tchampion.championName\n\t\t\t\t.toLocaleLowerCase()\n\t\t\t\t.includes(championSearch.toLocaleLowerCase())\n\t\t);\n\n\t\tsetFilteredChampions(filterChampions);\n\t}, [championSearch]);\n\n\treturn (\n\t\t<>\n\t\t\t<Box className={styles.landingContainer}>\n\t\t\t\t<FilterBy\n\t\t\t\t\tchampionSearch={championSearch}\n\t\t\t\t\thandleChampionSearchChange={handleChampionSearchChange}\n\t\t\t\t\troleFilter={roleFilter}\n\t\t\t\t\tsetRoleFilter={setRoleFilter}\n\t\t\t\t/>\n\n\t\t\t\t{champions.length !== 0 ? (\n\t\t\t\t\t<Champions filteredChampions={filteredChampions} />\n\t\t\t\t) : (\n\t\t\t\t\t<ComponentLoading />\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t</>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tchampions: state.gameData.champions,\n\t};\n};\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype LandingProps = PropsFromRedux;\n\nexport default connector(Landing);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\App\\App.tsx",["358"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\FilterBy\\FilterBy.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Landing\\components\\Champions\\Champions.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\CreateBuild.tsx",["359","360","361"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n// @ts-ignore - No types for this module\nimport { Helmet } from 'react-helmet';\n\nimport { URL } from '../../../shared/config/config';\nimport { Message } from '../../../shared/constants/validationMessages';\nimport { ValidateHelper } from '../../../shared/utils/validations';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../store/actions';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\n// Components\nimport Stepper from './components/Stepper/Stepper';\nimport Snackbars from '../../../shared/components/Snackbars/Snackbars';\nimport BackdropLoading from '../../../shared/components/Loading/Backdrop';\nimport BuildInformation from './components/BuildInformation/BuildInformation';\nimport BuildSelection from './components/BuildSelection/BuildSelection';\nimport CreateBuildHeader from './components/CreateBuildHeader/CreateBuildHeader';\nimport PlayerInformation from './components/PlayerInformation/PlayerInformation';\n// CSS\nimport styles from './createbuild.module.css';\n// Types\nimport {\n\tChampionInterface,\n\tRootState,\n\tsnackbarControlsInterface,\n\tValidationResult,\n} from '../../../shared/interfaces/interfaces';\n\nconst CreateBuild = (props: CreateBuildProps) => {\n\t// Game Data PROPS\n\tconst { gameData } = props;\n\tconst { roles, champions, items, runes, spells, ranks } = gameData;\n\t// Build PROPS\n\tconst { completeBuild, resetState, setChampionSelected } = props;\n\t// ReCaptcha PROPS\n\tconst { recaptcha } = props;\n\tconst { recaptchaRef, recaptchaToken } = recaptcha;\n\tconst { resetRecaptchToken } = props;\n\t// Snackbar Controls PROPS\n\tconst { setSnackbarControls } = props;\n\n\t// Stores build data from database after successful creation\n\tconst [savedBuild, setSavedBuild] = useState({\n\t\t// has \"id\" property for page redirection ( if(hasSubmittedBuild) )\n\t\t// else gives an error that savedBuild.id isn't defined\n\t\tid: '',\n\t});\n\tconst [activeStep, setActiveStep] = useState(0);\n\tconst [openBackdrop, setOpenBackdrop] = useState<boolean>(false);\n\tconst [hasSubmittedBuild, setHasSubmittedBuild] = useState(false);\n\n\tconst [openRecaptcha, setOpenRecaptcha] = useState(false);\n\n\tconst resetCaptcha = () => {\n\t\t// recaptchaRef.current is possibly null so it needs to be validated before reset\n\t\tif (recaptchaRef.current) {\n\t\t\trecaptchaRef.current.reset();\n\t\t\tresetRecaptchToken('');\n\t\t}\n\t};\n\n\tlet componentToDisplay;\n\tif (activeStep === 0) {\n\t\tcomponentToDisplay = <BuildInformation />;\n\t} else if (activeStep === 1) {\n\t\tcomponentToDisplay = <BuildSelection />;\n\t} else if (activeStep === 2) {\n\t\tcomponentToDisplay = <PlayerInformation />;\n\t}\n\n\tconst validateStep = () => {\n\t\t// Validations for EACH step\n\t\t// isValidStep returns ValidationResult Interface\n\t\tconst isValidStep: ValidationResult = ValidateHelper.validateStep(\n\t\t\tactiveStep,\n\t\t\tcompleteBuild,\n\t\t\tchampions,\n\t\t\titems,\n\t\t\trunes,\n\t\t\tspells,\n\t\t\troles\n\t\t);\n\n\t\t// Check if step is not valid\n\t\t// If not valid, return false - show error snackbar\n\t\t// If valid, return true\n\t\tif (!isValidStep.result) {\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: isValidStep.message,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst submitBuild = async () => {\n\t\t// Validations for WHOLE build\n\t\t// isValidBuild returns ValidationResult Interface\n\t\tconst isValidBuild: ValidationResult = ValidateHelper.validateBuild(\n\t\t\tcompleteBuild,\n\t\t\tchampions,\n\t\t\titems,\n\t\t\trunes,\n\t\t\tspells,\n\t\t\tranks,\n\t\t\troles\n\t\t);\n\n\t\tif (isValidBuild.result) {\n\t\t\tsetOpenRecaptcha(true);\n\n\t\t\tif (!recaptchaToken) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetOpenBackdrop(true);\n\n\t\t\tconst saveToDatabase = await axios\n\t\t\t\t.post(`${URL.SERVER}/api/build/save`, {\n\t\t\t\t\tbuild: {\n\t\t\t\t\t\t...ValidateHelper.sanitizeBuildTexts(completeBuild),\n\t\t\t\t\t\tdateSubmitted: new Date(),\n\t\t\t\t\t},\n\t\t\t\t\trecaptchaToken,\n\t\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tsetSavedBuild(res.data);\n\t\t\t\t\tsetHasSubmittedBuild(true);\n\t\t\t\t\tresetState();\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tsetOpenBackdrop(false);\n\n\t\t\t\t\t// Check what's the error\n\t\t\t\t\t// If error is from rate limiter, return creating too many builds message,\n\t\t\t\t\t// else, return generic error message\n\t\t\t\t\tif (\n\t\t\t\t\t\terr.response.status === 429 &&\n\t\t\t\t\t\t// Check if error message is the same as ERROR.CREATING_TOO_MANY_BUILDS\n\t\t\t\t\t\terr.response.data === Message.ERROR.CREATING_TOO_MANY_BUILDS\n\t\t\t\t\t) {\n\t\t\t\t\t\tsetSnackbarControls({\n\t\t\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\t\t\tmessage: Message.ERROR.CREATING_TOO_MANY_BUILDS,\n\t\t\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetSnackbarControls({\n\t\t\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\t\t\tmessage: Message.ERROR.FAILED_TO_SAVE_BUILD,\n\t\t\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\t// Check if there's a value for message property,\n\t\t\t// else, use a generic error message\n\t\t\tif (isValidBuild.message) {\n\t\t\t\tsetSnackbarControls({\n\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\tmessage: isValidBuild.message,\n\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetSnackbarControls({\n\t\t\t\t\tsnackbarControls: {\n\t\t\t\t\t\tmessage: Message.ERROR.FAILED_TO_SAVE_BUILD,\n\t\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresetCaptcha();\n\n\t\t\treturn;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\t// Retrieve session data for the champion a user will create a build for\n\t\t// This session item is set in NoBuilds.tsx\n\t\t// This one is used if there are no builds for a champion and a user wants to create a build for that champion\n\t\tconst championToCreateBuild: string | null = sessionStorage.getItem(\n\t\t\t'championToCreateBuild'\n\t\t);\n\t\tif (championToCreateBuild) {\n\t\t\tsetChampionSelected(JSON.parse(championToCreateBuild));\n\t\t}\n\n\t\treturn sessionStorage.removeItem('championToCreateBuild');\n\t}, []);\n\n\tif (hasSubmittedBuild) {\n\t\treturn <Redirect to={`/build/${savedBuild.id}`} />;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Helmet>\n\t\t\t\t<title>Create a build - Rift Builds</title>\n\t\t\t</Helmet>\n\t\t\t<Box>\n\t\t\t\t<BackdropLoading openBackdrop={openBackdrop} />\n\t\t\t\t<Snackbars />\n\t\t\t\t<CreateBuildHeader />\n\n\t\t\t\t<Stepper\n\t\t\t\t\tactiveStep={activeStep}\n\t\t\t\t\tcomponentToDisplay={componentToDisplay}\n\t\t\t\t\topenRecaptcha={openRecaptcha}\n\t\t\t\t\tresetCaptcha={resetCaptcha}\n\t\t\t\t\tsetActiveStep={setActiveStep}\n\t\t\t\t\tsubmitBuild={submitBuild}\n\t\t\t\t\tvalidateStep={validateStep}\n\t\t\t\t/>\n\t\t\t</Box>\n\t\t</>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tgameData: state.gameData,\n\t\tcompleteBuild: state.build,\n\t\trecaptcha: state.recaptcha,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tresetState: () => dispatch({ type: actionTypes.BUILD_RESET }),\n\t\tresetRecaptchToken: (token: string) =>\n\t\t\tdispatch({ type: actionTypes.RECAPTCHA_SET_TOKEN, data: token }),\n\t\tsetSnackbarControls: (newControls: snackbarControlsInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.SNACKBAR_SET_CONTROLS,\n\t\t\t\tdata: newControls.snackbarControls,\n\t\t\t}),\n\t\tsetChampionSelected: (newChampionSelected: ChampionInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.BUILD_SET_CHAMPIONSELECTED,\n\t\t\t\tdata: newChampionSelected,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype CreateBuildProps = PropsFromRedux;\n\nexport default connector(CreateBuild);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\Stepper\\Stepper.tsx",["362"],"import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\n// Components\nimport ReCaptcha from '../ReCaptcha/ReCaptcha';\nimport StepperButtons from './components/StepperButtons';\n// CSS\nimport globalstyles from '../../createbuild.module.css';\n// Types\ntype StepperProps = {\n\tactiveStep: number;\n\tcomponentToDisplay: React.ReactNode;\n\topenRecaptcha: boolean;\n\tresetCaptcha: () => void;\n\tsetActiveStep: (step: any) => void;\n\tsubmitBuild: () => void;\n\tvalidateStep: () => boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\twidth: '100%',\n\t\t},\n\t})\n);\n\nconst getSteps = () => {\n\treturn ['Build Information', 'Create Build', 'Player Information'];\n};\n\nconst HorizontalLabelPositionBelowStepper = (props: StepperProps) => {\n\tconst {\n\t\tactiveStep,\n\t\tcomponentToDisplay,\n\t\tsetActiveStep,\n\t\tsubmitBuild,\n\t\tvalidateStep,\n\t} = props;\n\tconst { openRecaptcha, resetCaptcha } = props;\n\tconst classes = useStyles();\n\n\t// ===== Stepper ===== //\n\tconst steps = getSteps();\n\n\tconst handleNext = () => {\n\t\tconst stepIsValid = validateStep();\n\n\t\tif (stepIsValid) {\n\t\t\tsetActiveStep((prevActiveStep: number) => prevActiveStep + 1);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t};\n\tconst handleBack = () => {\n\t\tsetActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t{/* Build Components */}\n\t\t\t<Box style={{ padding: '10px 0' }}>{componentToDisplay}</Box>\n\t\t\t{/* ReCAPTCHA */}\n\t\t\t<Box display='flex' flexDirection='row-reverse'>\n\t\t\t\t{openRecaptcha && activeStep === steps.length - 1 ? (\n\t\t\t\t\t<ReCaptcha resetCaptcha={resetCaptcha} />\n\t\t\t\t) : null}\n\t\t\t</Box>\n\t\t\t{/* Buttons */}\n\t\t\t<Box display='flex' flexDirection='row-reverse'>\n\t\t\t\t<StepperButtons\n\t\t\t\t\tactiveStep={activeStep}\n\t\t\t\t\tsubmitBuild={submitBuild}\n\t\t\t\t\thandleNext={handleNext}\n\t\t\t\t\thandleBack={handleBack}\n\t\t\t\t\tsteps={steps}\n\t\t\t\t/>\n\t\t\t</Box>\n\t\t</div>\n\t);\n};\n\nexport default HorizontalLabelPositionBelowStepper;\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\BuildInformation.tsx",["363"],"import React from 'react';\n\n// MaterialUI\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport BuildRole from './components/BuildRole/BuildRole';\nimport BuildTitle from './components/BuildTitle/BuildTitle';\nimport BuildGameMode from './components/GameMode/GameMode';\nimport BuildDescription from './components/Description/Description';\n// CSS\nimport globalstyles from '../../createbuild.module.css';\nimport styles from './buildinformation.module.css';\n\nconst BuildInformation = () => {\n\treturn (\n\t\t<Grid container spacing={3} className={globalstyles.gridContainer}>\n\t\t\t<Grid item xs={12} sm={12}>\n\t\t\t\t<p className={globalstyles.buildStepHeader}>Tell us about your build</p>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12} sm={12}>\n\t\t\t\t<BuildTitle />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t<BuildRole />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t<BuildGameMode />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12} sm={12}>\n\t\t\t\t<BuildDescription />\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default BuildInformation;\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\BuildSelection.tsx",["364"],"import React from 'react';\n\n// MaterialUI\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport ChampionSelect from './components/ChampionSelect/ChampionSelect';\nimport ItemsSelect from './components/ItemsSelect/ItemsSelect';\nimport RunesSelect from './components/RunesSelect/RunesSelect';\nimport SpellsSelect from './components/SpellsSelect/SpellsSelect';\n// CSS\nimport globalstyles from '../../createbuild.module.css';\nimport styles from './buildselection.module.css';\n// Types\ntype BuildSelectionProps = {};\n\nconst BuildSelection = (props: BuildSelectionProps) => {\n\treturn (\n\t\t<Grid container spacing={3} className={globalstyles.gridContainer}>\n\t\t\t<Grid item xs={12} sm={12}>\n\t\t\t\t<p className={globalstyles.buildStepHeader}>\n\t\t\t\t\tChoose your champion, items, runes, and spells\n\t\t\t\t</p>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<ChampionSelect />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<ItemsSelect />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<RunesSelect />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<SpellsSelect />\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default BuildSelection;\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\PlayerInformation.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\CreateBuildHeader\\CreateBuildHeader.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ChampionSelect\\ChampionSelect.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelect\\ItemsSelect.tsx",["365"],"import React, { useState } from 'react';\n// @ts-ignore - No types for this module\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nimport {\n\tItemType,\n\tItemStatus,\n} from '../../../../../../../shared/constants/constants';\nimport { DefaultSelectedState } from '../../../../../../../shared/constants/defaultSelectedState';\nimport { RequiredLength } from '../../../../../../../shared/constants/requiredLength';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../../../store/actions';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n// Components\nimport ItemsSelected from '../ItemsSelected/ItemsSelected';\n// CSS\nimport globalstyles from '../../../../createbuild.module.css';\nimport styles from './itemsselect.module.css';\n// Types\nimport {\n\tItemInterface,\n\tRootState,\n} from '../../../../../../../shared/interfaces/interfaces';\n\nconst ItemsSelect = (props: ItemsSelectProps) => {\n\t// Game Data PROPS\n\tconst { items } = props;\n\t// Build PROPS\n\tconst { itemsConfirmed, setItemsConfirmed } = props;\n\n\tconst [itemSelected, setItemSelected] = useState<ItemInterface>(\n\t\t// Defaults to Item: 'Abyssal Mask' which is the first option\n\t\tDefaultSelectedState.ITEM\n\t);\n\tconst [itemType, setItemType] = useState(ItemType.PRIMARY);\n\tconst [itemReason, setItemReason] = useState('');\n\n\tconst handleItemSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tconst { value: itemId } = e.target;\n\n\t\tconst getItem = items.find((item: ItemInterface) => item.id === itemId);\n\n\t\tif (getItem) {\n\t\t\tsetItemSelected(getItem);\n\t\t}\n\t};\n\n\tconst handleItemTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetItemType(e.target.value);\n\t};\n\n\tconst handleItemExplanationChange = (\n\t\te: React.ChangeEvent<HTMLTextAreaElement>\n\t) => {\n\t\tsetItemReason(e.target.value);\n\t};\n\n\tconst handleDeleteItemClick = (itemId: string) => {\n\t\tconst filteredItems = itemsConfirmed.filter(\n\t\t\t(item: ItemInterface) => item.id !== itemId\n\t\t);\n\n\t\tif (filteredItems) {\n\t\t\tsetItemsConfirmed(filteredItems);\n\t\t}\n\t};\n\n\tconst handleAddItemClick = () => {\n\t\t// Pushes item to itemsConfirmed Array\n\t\tsetItemsConfirmed([\n\t\t\t...itemsConfirmed,\n\t\t\t{ ...itemSelected, type: itemType, reason: itemReason },\n\t\t]);\n\t\tsetItemReason('');\n\t};\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>\n\t\t\t\t6. Items <span className={globalstyles.requiredInput}>*</span>\n\t\t\t</p>\n\t\t\t<p className={globalstyles.inputDescription}>\n\t\t\t\tSelect the items for your build&nbsp;\n\t\t\t</p>\n\n\t\t\t<Box>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t{/* ITEM IMAGE */}\n\t\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\t\tsrc={`/images/wildriftitems/${itemSelected.id}.png`}\n\t\t\t\t\t\t\t\tclassName={styles.itemImage}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{/* <SELECT> */}\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tonChange={handleItemSelectChange}\n\t\t\t\t\t\t\t\tclassName={globalstyles.buildSelectInput}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{items.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\tconst { id: itemId, itemName, status } = item;\n\n\t\t\t\t\t\t\t\t\tif (status !== ItemStatus.REMOVED) {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={itemId}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={globalstyles.buildSelectOption}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{itemName}\n\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\n\t\t\t\t\t\t\t{/* ITEM TYPE */}\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\t\t\trow\n\t\t\t\t\t\t\t\t\tname='position'\n\t\t\t\t\t\t\t\t\tdefaultValue={ItemType.PRIMARY}\n\t\t\t\t\t\t\t\t\tclassName={styles.radioGroup}\n\t\t\t\t\t\t\t\t\tonChange={handleItemTypeChange}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue={ItemType.PRIMARY}\n\t\t\t\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t\t\t\t<Radio color='primary' className={styles.radioButton} />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tlabel='Primary'\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\n\t\t\t\t\t\t\t\t\t\tclassName={styles.radioButtonContainer}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue={ItemType.OPTIONAL}\n\t\t\t\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t\t\t\t<Radio color='primary' className={styles.radioButton} />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tlabel='Optional'\n\t\t\t\t\t\t\t\t\t\tlabelPlacement='end'\n\t\t\t\t\t\t\t\t\t\tclassName={styles.radioButtonContainer}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t{/* Item Explanation */}\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\tid='itemReason'\n\t\t\t\t\t\t\t\tname='itemReason'\n\t\t\t\t\t\t\t\trows={5}\n\t\t\t\t\t\t\t\tvalue={itemReason}\n\t\t\t\t\t\t\t\tplaceholder='Explanation'\n\t\t\t\t\t\t\t\tclassName={styles.explanationTextArea}\n\t\t\t\t\t\t\t\tmaxLength={RequiredLength.REASON.MAX_LENGTH}\n\t\t\t\t\t\t\t\tonChange={(e) => handleItemExplanationChange(e)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\tdisplay='flex'\n\t\t\t\t\t\t\t\tflexDirection='row-reverse'\n\t\t\t\t\t\t\t\tclassName={styles.addItemButtonContainer}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: '#326cac' }}\n\t\t\t\t\t\t\t\t\tonClick={handleAddItemClick}\n\t\t\t\t\t\t\t\t\tclassName={styles.addItemButton}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd Item\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t{/* Items List */}\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t<ItemsSelected handleDeleteItemClick={handleDeleteItemClick} />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\titemsConfirmed: state.build.itemsConfirmed,\n\t\titems: state.gameData.items,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetItemsConfirmed: (items: Array<ItemInterface>) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_ITEMSCONFIRMED, data: items }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype ItemsSelectProps = PropsFromRedux;\n\nexport default connector(ItemsSelect);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelected\\ItemsSelected.tsx",["366"],"import React, { useEffect } from 'react';\n\nimport { ItemType } from '../../../../../../../shared/constants/constants';\nimport { RequiredLength } from '../../../../../../../shared/constants/requiredLength';\nimport { Message } from '../../../../../../../shared/constants/validationMessages';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../../../store/actions';\n\n// MaterialUI\nimport { Theme, makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport Tooltip from '@material-ui/core/Tooltip';\n// Components\nimport BuildItem from './components/BuildItem/BuildItem';\n// Types\nimport {\n\tItemInterface,\n\tsnackbarControlsInterface,\n\tRootState,\n} from '../../../../../../../shared/interfaces/interfaces';\n// CSS\nimport styles from './itemsselected.module.css';\nconst useStylesBootstrap = makeStyles((theme: Theme) => ({\n\ttooltip: {\n\t\tletterSpacing: '0.1px',\n\t\tbackgroundColor: '#171717',\n\t\tfontSize: '12px',\n\t\tpadding: '12px',\n\t},\n}));\n\nconst ItemsSelected = (props: ItemsSelectedProps) => {\n\tconst { handleDeleteItemClick } = props;\n\t// Build PROPS\n\tconst { itemsConfirmed, setItemsConfirmed } = props;\n\t// Snackbar Control PROPS\n\tconst { setSnackbarControls } = props;\n\n\tconst classes = useStylesBootstrap();\n\n\t// Check for duplicate items selected\n\t// Check for primary items limit\n\tuseEffect(() => {\n\t\tconst primaryItems = itemsConfirmed.filter(\n\t\t\t(item) => item.type === ItemType.PRIMARY\n\t\t);\n\n\t\tvar itemArray = itemsConfirmed.map((item) => {\n\t\t\treturn item.id;\n\t\t});\n\t\tvar isDuplicate = itemArray.some((item, index) => {\n\t\t\treturn itemArray.indexOf(item) !== index;\n\t\t});\n\n\t\t// Remove duplicates from itemsConfirmed Array\n\t\tconst filteredItemsConfirmed = itemsConfirmed.filter(\n\t\t\t(item, index, arr) => arr.findIndex((t) => t.id === item.id) === index\n\t\t);\n\n\t\tif (isDuplicate) {\n\t\t\tsetItemsConfirmed(filteredItemsConfirmed);\n\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: Message.ERROR.ITEM_IS_ALREADY_IN_BUILD,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\t\t} else if (primaryItems.length > RequiredLength.ITEMS.PRIMARY.MAX_LENGTH) {\n\t\t\tsetSnackbarControls({\n\t\t\t\tsnackbarControls: {\n\t\t\t\t\tmessage: Message.ERROR.CAN_ONLY_HAVE_SIX_PRIMARY_ITEMS,\n\t\t\t\t\tshouldOpen: true,\n\t\t\t\t\tsnackbarType: 'error',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst itemsConfirmedCopy = [...itemsConfirmed];\n\n\t\t\t// Remove last item added to array\n\t\t\titemsConfirmedCopy.pop();\n\n\t\t\tsetItemsConfirmed(itemsConfirmedCopy);\n\t\t}\n\t}, [itemsConfirmed]);\n\n\treturn (\n\t\t<Box>\n\t\t\t<Box className={styles.itemsSelectedContainer}>\n\t\t\t\t{itemsConfirmed.length !== 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{/* TYPE: MAIN */}\n\t\t\t\t\t\t<Box display='flex'>\n\t\t\t\t\t\t\t<Box flexGrow={1}>\n\t\t\t\t\t\t\t\t<p className={styles.itemsSelectedHeader}>Primary Items</p>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t\t<div className={styles.tooltipContainer}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tPrimary:&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.PRIMARY.MIN_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.PRIMARY.MAX_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;items\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\tOptional:&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.OPTIONAL.MIN_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={styles.tooltipHighlight}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{RequiredLength.ITEMS.OPTIONAL.MAX_LENGTH}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;items\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p className={styles.tooltipWarning}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tClick on an item to <i>delete</i> it from your list\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tplacement='top'\n\t\t\t\t\t\t\t\t\tclasses={classes}\n\t\t\t\t\t\t\t\t\tarrow\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<InfoIcon className={styles.infoIcon} />\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t{/* TYPE: PRIMARY */}\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t{itemsConfirmed\n\t\t\t\t\t\t\t\t.filter((item: ItemInterface) => item.type === ItemType.PRIMARY)\n\t\t\t\t\t\t\t\t.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<BuildItem\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\t\t\thandleDeleteItemClick={handleDeleteItemClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t{/* TYPE: OPTIONAL */}\n\t\t\t\t\t\t<p className={styles.itemsSelectedHeader}>Optional Items</p>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t{itemsConfirmed\n\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t(item: ItemInterface) => item.type === ItemType.OPTIONAL\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.map((item: ItemInterface, index: number) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<BuildItem\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\t\t\t\thandleDeleteItemClick={handleDeleteItemClick}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p>You haven't added any items to your build yet.</p>\n\t\t\t\t)}\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\titemsConfirmed: state.build.itemsConfirmed,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetItemsConfirmed: (newItemsConfirmed: Array<ItemInterface>) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.BUILD_SET_ITEMSCONFIRMED,\n\t\t\t\tdata: newItemsConfirmed,\n\t\t\t}),\n\t\tsetSnackbarControls: (newControls: snackbarControlsInterface) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.SNACKBAR_SET_CONTROLS,\n\t\t\t\tdata: newControls.snackbarControls,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype ItemsSelectedProps = PropsFromRedux & {\n\thandleDeleteItemClick: (itemId: string) => void;\n};\n\nexport default connector(ItemsSelected);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\RunesSelect.tsx",["367"],"import React from 'react';\n\nimport { Rune } from '../../../../../../../shared/constants/constants';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../../../store/actions';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport Domination from './components/Domination';\nimport Inspiration from './components/Inspiration';\nimport Keystone from './components/Keystone';\nimport Resolve from './components/Resolve';\n// CSS\nimport globalstyles from '../../../../createbuild.module.css';\nimport styles from './runesselect.module.css';\n// Types\nimport {\n\tRuneInterface,\n\tRootState,\n} from '../../../../../../../shared/constants/interfaces';\n\nconst RunesSelect = (props: RunesSelectProps) => {\n\t// Game Data PROPS\n\tconst { runes } = props;\n\t// Build PROPS\n\tconst { runesSelected, setRunesSelected } = props;\n\n\t// Everytime user changes a rune, this function gets executed\n\t// - sets new rune\n\t// - sets reason property\n\tconst handleRuneSelectChange = (\n\t\te: React.ChangeEvent<HTMLSelectElement>,\n\t\truneType: string,\n\t\trunePath?: string\n\t) => {\n\t\tconst getRune = runes.find(\n\t\t\t(rune: RuneInterface) => rune.id === e.target.value\n\t\t);\n\n\t\tif (getRune) {\n\t\t\t/*\n\n\t\t\t\t\t- \"{...getRune}\" spreads the previous state of the rune\n\t\t\t\t\t- \"reason: prevRunesSelected[runeName].reason\" gets the 'reason' property of the previous rune and sets it to the new rune\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...prev,\n\t\t\t\t\t\tkeystone: { ...getRune, reason: prevRunesSelected[runeName].reason || '' },\n\t\t\t\t\t};\n\n\t\t\t*/\n\n\t\t\tconst runesSelectStateHandler = (runeName: string) => {\n\t\t\t\tconst prevRunesSelected: { [key: string]: RuneInterface } = {\n\t\t\t\t\t...runesSelected,\n\t\t\t\t};\n\n\t\t\t\tconst modifiedRunesSelected = {\n\t\t\t\t\t...prevRunesSelected,\n\t\t\t\t\t[runeName]: {\n\t\t\t\t\t\t...getRune,\n\t\t\t\t\t\treason: prevRunesSelected[runeName].reason || '',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tsetRunesSelected(runeName, modifiedRunesSelected);\n\t\t\t};\n\n\t\t\tif (runeType === Rune.TYPE.KEYSTONE) {\n\t\t\t\trunesSelectStateHandler(Rune.TYPE.KEYSTONE);\n\t\t\t}\n\t\t\tif (runeType === Rune.TYPE.SECONDARY) {\n\t\t\t\tswitch (runePath) {\n\t\t\t\t\tcase Rune.PATH.DOMINATION:\n\t\t\t\t\t\trunesSelectStateHandler(Rune.PATH.DOMINATION);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Rune.PATH.RESOLVE:\n\t\t\t\t\t\trunesSelectStateHandler(Rune.PATH.RESOLVE);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Rune.PATH.INSPIRATION:\n\t\t\t\t\t\trunesSelectStateHandler(Rune.PATH.INSPIRATION);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleRuneExplanationChange = (\n\t\te: React.ChangeEvent<HTMLTextAreaElement>,\n\t\truneName: string\n\t) => {\n\t\tconst prevRunesSelected: { [key: string]: RuneInterface } = {\n\t\t\t...runesSelected,\n\t\t};\n\n\t\tlet getRune = prevRunesSelected[runeName];\n\n\t\tconst modifiedRunesSelected = {\n\t\t\t...prevRunesSelected,\n\t\t\t[runeName]: {\n\t\t\t\t...getRune,\n\t\t\t\treason: e.target.value,\n\t\t\t},\n\t\t};\n\n\t\tsetRunesSelected(runeName, modifiedRunesSelected);\n\t};\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>7. Runes</p>\n\t\t\t<p className={globalstyles.inputDescription}>\n\t\t\t\tSelect the runes for your build\n\t\t\t</p>\n\n\t\t\t<Grid container item xs={12} spacing={1}>\n\t\t\t\t{/* KEYSTONE Rune */}\n\t\t\t\t<Keystone\n\t\t\t\t\thandleRuneSelectChange={handleRuneSelectChange}\n\t\t\t\t\thandleRuneExplanationChange={handleRuneExplanationChange}\n\t\t\t\t/>\n\n\t\t\t\t{/* Secondary: Domination */}\n\t\t\t\t<Domination\n\t\t\t\t\thandleRuneSelectChange={handleRuneSelectChange}\n\t\t\t\t\thandleRuneExplanationChange={handleRuneExplanationChange}\n\t\t\t\t/>\n\n\t\t\t\t{/* Secondary: Resolve */}\n\t\t\t\t<Resolve\n\t\t\t\t\thandleRuneSelectChange={handleRuneSelectChange}\n\t\t\t\t\thandleRuneExplanationChange={handleRuneExplanationChange}\n\t\t\t\t/>\n\n\t\t\t\t{/* Secondary: Inspiration */}\n\t\t\t\t<Inspiration\n\t\t\t\t\thandleRuneSelectChange={handleRuneSelectChange}\n\t\t\t\t\thandleRuneExplanationChange={handleRuneExplanationChange}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\trunesSelected: state.build.runes,\n\t\trunes: state.gameData.runes,\n\t};\n};\n\nconst mapDispatchToprops = (dispatch: any) => {\n\treturn {\n\t\tsetRunesSelected: (\n\t\t\truneName: string,\n\t\t\tdata: { [key: string]: RuneInterface }\n\t\t) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_RUNESSELECTED, runeName, data }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToprops);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype RunesSelectProps = PropsFromRedux;\n\nexport default connector(RunesSelect);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Keystone.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Domination.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Resolve.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\RunesSelect\\components\\Inspiration.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\SpellsSelect\\SpellsSelect.tsx",["368","369"],"import React from 'react';\n\nimport {\n\tGameMode,\n\tMaps,\n\tSpellNumber,\n} from '../../../../../../../shared/constants/constants';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../../../store/actions';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport Spell from './components/Spell';\n// CSS\nimport globalstyles from '../../../../createbuild.module.css';\nimport styles from './spellsselect.module.css';\n// Types\nimport {\n\tSpellInterface,\n\tRootState,\n} from '../../../../../../../shared/interfaces/interfaces';\n\nconst SpellsSelect = (props: SpellsSelectProps) => {\n\t// Game Data PROPS\n\tconst { spells } = props;\n\t// Build PROPS\n\tconst { gameMode, spellsSelected, setSpellsSelected } = props;\n\n\tconst handleSpellSelectChange = (\n\t\te: React.ChangeEvent<HTMLSelectElement>,\n\t\tspellNumber: number\n\t) => {\n\t\tconst { value: spellId } = e.target;\n\n\t\tconst getSpell = spells.find(\n\t\t\t(spell: SpellInterface) => spell.id === spellId\n\t\t);\n\n\t\tif (getSpell) {\n\t\t\tswitch (spellNumber) {\n\t\t\t\tcase 1:\n\t\t\t\t\tsetSpellsSelected(SpellNumber.SPELL_ONE, getSpell);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsetSpellsSelected(SpellNumber.SPELL_TWO, getSpell);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Filter spells to display based on game mode selected\n\t// Gamemode = NORMAL ? w/o Mark n Dash, Clarity\n\t// Gamemode = ARAM ? w/o Smite\n\t// GameMode = NORMAL ? Display spells that has wild_rift applicable map\n\t// GameMode = ARAM ? Display spells that has howling_abyss applicable map\n\tconst buildSpellsToDisplay = spells.filter((spell: SpellInterface) => {\n\t\tconst { applicableMaps } = spell;\n\n\t\tconst hasHowlingAbyss = applicableMaps.some(\n\t\t\t(map) => map === Maps.HOWLING_ABYSS\n\t\t);\n\t\tconst hasWildRift = applicableMaps.some((map) => map === Maps.WILD_RIFT);\n\n\t\tif (gameMode === GameMode.NORMAL && hasWildRift) {\n\t\t\treturn spell;\n\t\t} else if (gameMode === GameMode.ARAM && hasHowlingAbyss) {\n\t\t\treturn spell;\n\t\t}\n\t});\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>8. Summoner Spells</p>\n\t\t\t<p className={globalstyles.inputDescription}>\n\t\t\t\tSelect the spells for your build\n\t\t\t</p>\n\n\t\t\t<Grid container item xs={12}>\n\t\t\t\t{/* Spell One */}\n\t\t\t\t<Spell\n\t\t\t\t\tspells={buildSpellsToDisplay}\n\t\t\t\t\tspellNumber={1}\n\t\t\t\t\tspellsSelected={spellsSelected}\n\t\t\t\t\thandleSpellSelectChange={handleSpellSelectChange}\n\t\t\t\t/>\n\n\t\t\t\t{/* Spell Two */}\n\t\t\t\t<Spell\n\t\t\t\t\tspells={buildSpellsToDisplay}\n\t\t\t\t\tspellNumber={2}\n\t\t\t\t\tspellsSelected={spellsSelected}\n\t\t\t\t\thandleSpellSelectChange={handleSpellSelectChange}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tgameMode: state.build.gameMode,\n\t\tspellsSelected: state.build.spells,\n\t\tspells: state.gameData.spells,\n\t};\n};\n\nconst mapDispatchToprops = (dispatch: any) => {\n\treturn {\n\t\tsetSpellsSelected: (spellKey: string, data: SpellInterface) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_SPELLSSELECTED, spellKey, data }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToprops);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype SpellsSelectProps = PropsFromRedux;\n\nexport default connector(SpellsSelect);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\SpellsSelect\\components\\Spell.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\ChampionBuilds.tsx",["370"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\PlayerBuild.tsx",["371"],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildHeader\\PlayerBuildHeader.tsx",["372","373"],"import React from 'react';\nimport moment from 'moment';\n// @ts-ignore - No types for this module\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nimport { GameMode } from '../../../../../shared/constants/constants';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\n// Components\nimport BuildChip from './components/BuildChip/BuildChip';\n// CSS\nimport styles from './playerbuildheader.module.css';\n// Types\nimport { BuildInterface } from '../../../../../shared/interfaces/interfaces';\ntype PlayerBuildHeaderProps = {\n\tbuild: BuildInterface;\n};\n\nconst PlayerBuildHeader = (props: PlayerBuildHeaderProps) => {\n\tconst { build } = props;\n\tconst {\n\t\tbuildTitle,\n\t\tbuildRole,\n\t\tchampion,\n\t\tdateSubmitted,\n\t\tgameMode,\n\t\tpatchVersion,\n\t\trank,\n\t\tregion,\n\t\tusername,\n\t} = build;\n\tconst { id: roleId, roleName } = buildRole;\n\n\tlet gameModeToDisplay;\n\tswitch (gameMode) {\n\t\tcase GameMode.NORMAL:\n\t\t\tgameModeToDisplay = 'Normal';\n\t\t\tbreak;\n\t\tcase GameMode.ARAM:\n\t\t\tgameModeToDisplay = 'ARAM';\n\t\t\tbreak;\n\t}\n\n\treturn (\n\t\t<Grid container spacing={2} className={styles.playerBuildHeaderContainer}>\n\t\t\t{/* Champion Image */}\n\t\t\t<Grid item>\n\t\t\t\t<Box className={styles.championImageContainer}>\n\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\tsrc={`/images/wildriftchampions/${champion.id}.jpg`}\n\t\t\t\t\t\tclassName={styles.championImage}\n\t\t\t\t\t\ttitle={champion.championName}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <Box\n\t\t\t\t\t\tclassName={styles.buildChampionContainer}\n\t\t\t\t\t\tdisplay='flex'\n\t\t\t\t\t\tjustifyContent='center'\n\t\t\t\t\t>\n\t\t\t\t\t\t<LazyLoadImage\n\t\t\t\t\t\t\tsrc={`/images/wildriftroles/${roleId}.png`}\n\t\t\t\t\t\t\tclassName={styles.buildRoleImage}\n\t\t\t\t\t\t\ttitle={roleName}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span className={styles.buildChampionText}>\n\t\t\t\t\t\t\t{champion.championName}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Box> */}\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\n\t\t\t{/* Champion Name, Build Title, and Username */}\n\t\t\t<Grid item xs={12} sm>\n\t\t\t\t<Box\n\t\t\t\t\tclassName={`${styles.buildInformationContainer} playerBuildBuildInformationContainer`}\n\t\t\t\t>\n\t\t\t\t\t<p className={styles.buildTitleText}>{buildTitle.toString()}&nbsp;</p>\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<p className={styles.usernameText}>Build by {username}</p>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<Box className={styles.buildChipsContainer}>\n\t\t\t\t\t\t\t{/* Capitalize first letter of Game Mode */}\n\t\t\t\t\t\t\t<BuildChip property='Mode' value={gameModeToDisplay} />\n\t\t\t\t\t\t\t<BuildChip property='Lane' value={buildRole.roleName} />\n\t\t\t\t\t\t\t<BuildChip property='Rank' value={rank.rankName} />\n\t\t\t\t\t\t\t<BuildChip property='Region' value={region.toUpperCase()} />\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\n\t\t\t<Grid item xs={12} sm className='playerBuildHeaderMiscDataGrid'>\n\t\t\t\t<Box\n\t\t\t\t\tclassName={`${styles.miscellaneousDataContainer} playerBuildHeaderMiscDataContainer`}\n\t\t\t\t>\n\t\t\t\t\t<p className={`${styles.patchText} buildPatchText`}>\n\t\t\t\t\t\tPatch {patchVersion}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className={`${styles.buildDateSubmitted} buildDateSubmittedText`}>\n\t\t\t\t\t\t{moment(dateSubmitted).format('MM/DD/YYYY')}\n\t\t\t\t\t</p>\n\t\t\t\t</Box>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport default PlayerBuildHeader;\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\SectionDivider\\SectionDivider.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\RuneItem\\RuneItem.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\Spellitem\\SpellItem.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\PlayerBuildFooter.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\BuildItem\\BuildItem.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\ChampionData.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\BuildsList.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\NoBuilds\\NoBuilds.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\BuildBox.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildDate\\BuildDate.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildSpell\\BuildSpell.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildRune\\BuildRune.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildRankUser\\BuildRankUser.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\components\\Lanes\\Lanes.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\ChampionData\\components\\Counters\\Counters.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQ\\FAQ.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\FAQ\\components\\AccordionFAQ.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Champion\\components\\BuildsList\\components\\BuildBox\\components\\BuildItem\\BuildItem.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\BuildRole\\BuildRole.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\Stepper\\components\\StepperButtons.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\ReCaptcha\\ReCaptcha.tsx",["374"],"import React, { useEffect, useRef, RefObject } from 'react';\nimport { ReCaptcha } from '../../../../../shared/config/config';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../store/actions';\n\nconst ReCaptchaComponent = (props: ReCaptchaComponentProps) => {\n\tconst { resetCaptcha } = props;\n\t// RECAPTCHA Props\n\tconst { setRecaptchRef, setRecaptchaToken } = props;\n\n\t// ===== ReCaptcha ===== //\n\tlet ref = useRef<ReCAPTCHA | null>(null);\n\n\tconst recaptchaHandleChange = (value: string | null) => {\n\t\tsetRecaptchaToken(value);\n\t};\n\n\tuseEffect(() => {\n\t\tsetRecaptchRef(ref);\n\t}, []);\n\n\treturn (\n\t\t<ReCAPTCHA\n\t\t\tref={(r) => (ref.current = r)}\n\t\t\tsitekey={ReCaptcha.PUBLIC_KEY!} // Always has a value hence !\n\t\t\tonChange={recaptchaHandleChange}\n\t\t\tonExpired={() => resetCaptcha()}\n\t\t/>\n\t);\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetRecaptchRef: (recaptchaRef: RefObject<ReCAPTCHA | null>) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.RECAPTCHA_SET_REF,\n\t\t\t\tdata: recaptchaRef,\n\t\t\t}),\n\t\tsetRecaptchaToken: (recaptchaToken: string | null) =>\n\t\t\tdispatch({\n\t\t\t\ttype: actionTypes.RECAPTCHA_SET_TOKEN,\n\t\t\t\tdata: recaptchaToken,\n\t\t\t}),\n\t};\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector> & {\n\tresetCaptcha: () => void;\n};\n\ntype ReCaptchaComponentProps = PropsFromRedux;\n\nexport default connector(ReCaptchaComponent);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\utils\\validations.ts",["375","376"],"import {\n\tBuildInterface,\n\tChampionInterface,\n\tItemInterface,\n\tRankInterface,\n\tRoleInterface,\n\tRuneInterface,\n\tSpellInterface,\n\tValidationResult,\n} from '../interfaces/interfaces';\nimport { ItemType, GameMode, GameRegion } from '../constants/constants';\nimport { RequiredLength } from '../constants/requiredLength';\nimport { Message } from '../constants/validationMessages';\n\n// === START: Global Functions === //\n\n// resultHandler is the object that gets returned for each validation\n// and the value of CreateBuild.tsx's isValidBuild variable\nconst resultHandler = (message: string | null, result: boolean) => {\n\treturn {\n\t\tmessage,\n\t\tresult,\n\t};\n};\n\nconst turnToString = (text: string) => {\n\treturn String(text);\n};\n\nconst isValidString = (text: string) => {\n\treturn typeof text === 'string';\n};\n\nconst isValidReasonLength = (text: string) => {\n\tconst isValidReasonLength =\n\t\ttext.length >= RequiredLength.REASON.MIN_LENGTH &&\n\t\ttext.length <= RequiredLength.REASON.MAX_LENGTH;\n\n\treturn isValidReasonLength;\n};\n\nconst isValidReasonTypeAndLength = (\n\tobjectToCheck: RuneInterface | ItemInterface\n) => {\n\tconst { reason } = objectToCheck;\n\n\t// If there's a reason property, check if it's the right type\n\t// and right length\n\t// This will always return true if it doesn't fail any of the\n\t// two conditions\n\tif (reason) {\n\t\tconst isValidType = isValidString(reason);\n\t\tconst isValidLength = isValidReasonLength(reason);\n\n\t\tif (!(isValidType && isValidLength)) return false;\n\t}\n\n\treturn true;\n};\n\n// Find all validations that returned false\n// Return first validation that failed, hence [0]\nconst findValidationErrorAndReturn = (\n\tvalidationsCollection: Array<ValidationResult>\n) => {\n\treturn validationsCollection.filter((validation) => {\n\t\tconst { result } = validation;\n\n\t\tif (result === false) {\n\t\t\treturn validation;\n\t\t}\n\t})[0];\n};\n\nconst checkAllValidationsAreValid = (\n\tvalidationsCollection: Array<ValidationResult>\n) => {\n\treturn validationsCollection.every((validation: ValidationResult) => {\n\t\tconst { result } = validation;\n\n\t\treturn result === true;\n\t});\n};\n\nconst sanitizeBuildTexts = (build: BuildInterface) => {\n\tconst { itemsConfirmed } = build;\n\n\t// run turnToString() on each item reason property, if it's defined\n\tconst sanitizedItemsConfirmedReasons = itemsConfirmed.map(\n\t\t(item: ItemInterface) => {\n\t\t\tconst { reason } = item;\n\n\t\t\tif (reason) {\n\t\t\t\treturn {\n\t\t\t\t\t...item,\n\t\t\t\t\treason: turnToString(reason).trim(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// return item if there's no reason property\n\t\t\treturn item;\n\t\t}\n\t);\n\n\treturn {\n\t\t...build,\n\t\tbuildTitle: turnToString(build.buildTitle).trim(),\n\t\tdescription: turnToString(build.description).trim(),\n\t\tusername: turnToString(build.username).trim(),\n\t\titemsConfirmed: sanitizedItemsConfirmedReasons,\n\t};\n};\n\n// Validations for each step\nconst validateStep = (\n\tactiveStep: number,\n\tcompleteBuild: BuildInterface,\n\tchampions: Array<ChampionInterface>,\n\titems: Array<ItemInterface>,\n\trunes: Array<RuneInterface>,\n\tspells: Array<SpellInterface>,\n\troles: Array<RoleInterface>\n) => {\n\tlet allValidationsAreValid = false;\n\tlet validationsCollection: Array<ValidationResult> = [];\n\n\tif (activeStep === 0) {\n\t\tconst HAS_BUILD_TITLE = Validate.HAS_BUILD_TITLE(completeBuild);\n\t\tconst IS_VALID_BUILD_TITLE = Validate.IS_VALID_BUILD_TITLE(completeBuild);\n\t\tconst IS_VALID_ROLE = Validate.IS_VALID_ROLE(completeBuild, roles);\n\t\tconst IS_VALID_GAME_MODE = Validate.IS_VALID_GAME_MODE(completeBuild);\n\t\tconst IS_VALID_BUILD_DESCRIPTION = Validate.IS_VALID_BUILD_DESCRIPTION(\n\t\t\tcompleteBuild\n\t\t);\n\n\t\tvalidationsCollection = [\n\t\t\tHAS_BUILD_TITLE,\n\t\t\tIS_VALID_BUILD_TITLE,\n\t\t\tIS_VALID_ROLE,\n\t\t\tIS_VALID_GAME_MODE,\n\t\t\tIS_VALID_BUILD_DESCRIPTION,\n\t\t];\n\n\t\tallValidationsAreValid = ValidateHelper.checkAllValidationsAreValid(\n\t\t\tvalidationsCollection\n\t\t);\n\t} else if (activeStep === 1) {\n\t\tconst IS_VALID_CHAMPION = Validate.IS_VALID_CHAMPION(\n\t\t\tcompleteBuild,\n\t\t\tchampions\n\t\t);\n\t\tconst HAS_ITEMS_SELECTED = Validate.HAS_ITEMS_SELECTED(completeBuild);\n\t\tconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = Validate.HAS_THREE_TO_SIX_PRIMARY_ITEMS(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_ITEMS_SELECTED = Validate.IS_VALID_ITEMS_SELECTED(\n\t\t\tcompleteBuild,\n\t\t\titems\n\t\t);\n\t\tconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = Validate.IS_VALID_NUMBER_OF_ITEMS_SELECTED(\n\t\t\tcompleteBuild\n\t\t);\n\t\tconst IS_VALID_RUNES = Validate.IS_VALID_RUNES(completeBuild, runes);\n\t\tconst IS_VALID_SPELLS = Validate.IS_VALID_SPELLS(completeBuild, spells);\n\n\t\tvalidationsCollection = [\n\t\t\tIS_VALID_CHAMPION,\n\t\t\tHAS_ITEMS_SELECTED,\n\t\t\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\t\tIS_VALID_ITEMS_SELECTED,\n\t\t\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\t\t\tIS_VALID_RUNES,\n\t\t\tIS_VALID_SPELLS,\n\t\t];\n\n\t\tallValidationsAreValid = ValidateHelper.checkAllValidationsAreValid(\n\t\t\tvalidationsCollection\n\t\t);\n\t}\n\n\tif (allValidationsAreValid) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\t// Find all validations that returned false\n\t// Return first validation that failed, hence [0]\n\tconst invalidValidation = ValidateHelper.findValidationErrorAndReturn(\n\t\tvalidationsCollection\n\t);\n\n\treturn resultHandler(invalidValidation.message, false);\n};\n\n// For FINAL validation\nconst validateBuild = (\n\tcompleteBuild: BuildInterface,\n\tchampions: Array<ChampionInterface>,\n\titems: Array<ItemInterface>,\n\trunes: Array<RuneInterface>,\n\tspells: Array<SpellInterface>,\n\tranks: Array<RankInterface>,\n\troles: Array<RoleInterface>\n) => {\n\tconst HAS_BUILD_TITLE = Validate.HAS_BUILD_TITLE(completeBuild);\n\tconst IS_VALID_BUILD_TITLE = Validate.IS_VALID_BUILD_TITLE(completeBuild);\n\tconst HAS_ITEMS_SELECTED = Validate.HAS_ITEMS_SELECTED(completeBuild);\n\tconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = Validate.HAS_THREE_TO_SIX_PRIMARY_ITEMS(\n\t\tcompleteBuild\n\t);\n\tconst HAS_USERNAME = Validate.HAS_USERNAME(completeBuild);\n\tconst IS_VALID_USERNAME = Validate.IS_VALID_USERNAME(completeBuild);\n\tconst IS_VALID_ROLE = Validate.IS_VALID_ROLE(completeBuild, roles);\n\tconst IS_VALID_GAME_MODE = Validate.IS_VALID_GAME_MODE(completeBuild);\n\tconst IS_VALID_BUILD_DESCRIPTION = Validate.IS_VALID_BUILD_DESCRIPTION(\n\t\tcompleteBuild\n\t);\n\tconst IS_VALID_CHAMPION = Validate.IS_VALID_CHAMPION(\n\t\tcompleteBuild,\n\t\tchampions\n\t);\n\tconst IS_VALID_ITEMS_SELECTED = Validate.IS_VALID_ITEMS_SELECTED(\n\t\tcompleteBuild,\n\t\titems\n\t);\n\tconst IS_VALID_RUNES = Validate.IS_VALID_RUNES(completeBuild, runes);\n\tconst IS_VALID_SPELLS = Validate.IS_VALID_SPELLS(completeBuild, spells);\n\tconst IS_VALID_RANK = Validate.IS_VALID_RANK(completeBuild, ranks);\n\tconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = Validate.IS_VALID_NUMBER_OF_ITEMS_SELECTED(\n\t\tcompleteBuild\n\t);\n\tconst IS_VALID_REGION = Validate.IS_VALID_REGION(completeBuild);\n\n\tconst validationsCollection = [\n\t\tHAS_BUILD_TITLE,\n\t\tIS_VALID_BUILD_TITLE,\n\t\tHAS_ITEMS_SELECTED,\n\t\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\tHAS_USERNAME,\n\t\tIS_VALID_USERNAME,\n\t\tIS_VALID_ROLE,\n\t\tIS_VALID_GAME_MODE,\n\t\tIS_VALID_BUILD_DESCRIPTION,\n\t\tIS_VALID_CHAMPION,\n\t\tIS_VALID_ITEMS_SELECTED,\n\t\tIS_VALID_RUNES,\n\t\tIS_VALID_SPELLS,\n\t\tIS_VALID_RANK,\n\t\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\t\tIS_VALID_REGION,\n\t];\n\n\tconst allValidationsAreValid = ValidateHelper.checkAllValidationsAreValid(\n\t\tvalidationsCollection\n\t);\n\n\tif (allValidationsAreValid) {\n\t\treturn {\n\t\t\tmessage: null,\n\t\t\tresult: true,\n\t\t};\n\t}\n\n\treturn findValidationErrorAndReturn(validationsCollection);\n};\n\n// === END: Global Functions === //\n\nconst HAS_BUILD_TITLE = (build: BuildInterface) => {\n\tif (build.buildTitle) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NO_BUILD_TITLE, false);\n};\n\nconst HAS_ITEMS_SELECTED = (build: BuildInterface) => {\n\tif (build.itemsConfirmed.length !== 0) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NO_ITEMS_SELECTED, false);\n};\n\nconst HAS_THREE_TO_SIX_PRIMARY_ITEMS = (build: BuildInterface) => {\n\tconst lengthOfPrimaryItems = build.itemsConfirmed.filter(\n\t\t(item: ItemInterface) => item.type === 'primary'\n\t).length;\n\n\tconst hasThreeToSixPrimaryItems =\n\t\tlengthOfPrimaryItems >= RequiredLength.ITEMS.PRIMARY.MIN_LENGTH &&\n\t\tlengthOfPrimaryItems <= RequiredLength.ITEMS.PRIMARY.MAX_LENGTH;\n\n\tif (hasThreeToSixPrimaryItems) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(\n\t\tMessage.ERROR.DOES_NOT_HAVE_THREE_TO_SIX_PRIMARY_ITEMS,\n\t\tfalse\n\t);\n};\n\nconst HAS_USERNAME = (build: BuildInterface) => {\n\tif (build.username) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NO_USERNAME, false);\n};\n\nconst IS_VALID_BUILD_TITLE = (build: BuildInterface) => {\n\tconst { buildTitle } = build;\n\n\tconst isTypeString = isValidString(buildTitle);\n\tconst isValidLength =\n\t\tbuildTitle.length >= RequiredLength.BUILD_TITLE.MIN_LENGTH &&\n\t\tbuildTitle.length <= RequiredLength.BUILD_TITLE.MAX_LENGTH;\n\n\tif (isTypeString && isValidLength) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_BUILD_TITLE, false);\n};\n\nconst IS_VALID_USERNAME = (build: BuildInterface) => {\n\tconst { username } = build;\n\n\tconst isTypeString = isValidString(username);\n\tconst isValidLength =\n\t\tusername.length >= RequiredLength.USERNAME.MIN_LENGTH &&\n\t\tusername.length <= RequiredLength.USERNAME.MAX_LENGTH;\n\n\tif (isTypeString && isValidLength) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_USERNAME, false);\n};\n\nconst IS_VALID_ROLE = (build: BuildInterface, roles: Array<RoleInterface>) => {\n\tconst { buildRole } = build;\n\n\t// Checks if buildRole.id and buildRole.roleName has a corresponding object to roles\n\tconst isValidRole =\n\t\troles.filter((role) => {\n\t\t\treturn JSON.stringify(buildRole) === JSON.stringify(role);\n\t\t}).length === 1;\n\n\tif (isValidRole) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_ROLE, false);\n};\n\nconst IS_VALID_GAME_MODE = (build: BuildInterface) => {\n\tconst { gameMode } = build;\n\n\tconst isValidGameMode =\n\t\tgameMode === GameMode.NORMAL || gameMode === GameMode.ARAM;\n\tconst isTypeString = isValidString(gameMode);\n\n\tif (isValidGameMode && isTypeString) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_GAME_MODE, false);\n};\n\nconst IS_VALID_BUILD_DESCRIPTION = (build: BuildInterface) => {\n\tconst { description } = build;\n\n\tconst isTypeString = isValidString(description);\n\tconst isValidLength = isValidReasonLength(description);\n\n\tif (isTypeString && isValidLength) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_BUILD_DESCRIPTION, false);\n};\n\nconst IS_VALID_CHAMPION = (\n\tbuild: BuildInterface,\n\tchampions: Array<ChampionInterface>\n) => {\n\tconst { champion: buildChampion } = build;\n\n\tconst isValidChampion =\n\t\tchampions.filter((champion) => {\n\t\t\t// Checks if both objects have same properties and corresponding values\n\t\t\t// THE ORDER OF PROPERTIES IS IMPORTANT\n\t\t\t// Source: https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n\n\t\t\treturn JSON.stringify(buildChampion) === JSON.stringify(champion);\n\t\t}).length === 1;\n\n\tif (isValidChampion) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_CHAMPION, false);\n};\n\nconst IS_VALID_ITEMS_SELECTED = (\n\tbuild: BuildInterface,\n\titems: Array<ItemInterface>\n) => {\n\tconst { itemsConfirmed } = build;\n\n\t// Checks if every reason property of an item is type string and has valid length\n\tconst validReasonTypeAndLength = itemsConfirmed\n\t\t.map((item: ItemInterface) => isValidReasonTypeAndLength(item))\n\t\t.every((boolIsTrue) => boolIsTrue);\n\n\t// Removes \"reason\" and \"type\" property which is defined by user\n\tconst modifiedItemsConfirmed = itemsConfirmed.map((item: ItemInterface) => {\n\t\tconst { reason, type, ...modifiedObject } = item;\n\n\t\treturn modifiedObject;\n\t});\n\n\t// Return items from ITEMSCONFIRMED that are in ITEMS\n\tconst validatedItems = items.filter((item) => {\n\t\t// Check if \"some\" items from MODIFIEDITEMSCONFIRMED are found in ITEMS\n\t\tif (\n\t\t\tmodifiedItemsConfirmed.some(\n\t\t\t\t(buildItem) => JSON.stringify(buildItem) === JSON.stringify(item)\n\t\t\t)\n\t\t) {\n\t\t\treturn item;\n\t\t}\n\t});\n\n\t// Check if valid items' (items that are in ITEMS array) length is\n\t// equal to length of ITEMSCONFIRMED\n\tif (\n\t\tvalidatedItems.length === itemsConfirmed.length &&\n\t\tvalidReasonTypeAndLength\n\t) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_ITEMS_SELECTED, false);\n};\n\nconst IS_VALID_NUMBER_OF_ITEMS_SELECTED = (build: BuildInterface) => {\n\tconst { itemsConfirmed } = build;\n\n\tconst primaryItems = itemsConfirmed.filter(\n\t\t(item) => item.type === ItemType.PRIMARY\n\t).length;\n\tconst optionalItems = itemsConfirmed.filter(\n\t\t(item) => item.type === ItemType.OPTIONAL\n\t).length;\n\n\tconst isValidPrimaryItemsLength =\n\t\tprimaryItems >= RequiredLength.ITEMS.PRIMARY.MIN_LENGTH &&\n\t\tprimaryItems <= RequiredLength.ITEMS.PRIMARY.MAX_LENGTH;\n\tconst isValidOptionalItemsLength =\n\t\toptionalItems >= RequiredLength.ITEMS.OPTIONAL.MIN_LENGTH &&\n\t\toptionalItems <= RequiredLength.ITEMS.OPTIONAL.MAX_LENGTH;\n\n\tif (isValidPrimaryItemsLength && isValidOptionalItemsLength) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_NUMBER_OF_ITEMS_SELECTED, false);\n};\n\nconst IS_VALID_RUNES = (build: BuildInterface, runes: Array<RuneInterface>) => {\n\tconst { runes: buildRunes } = build;\n\tconst { keystone, domination, resolve, inspiration } = buildRunes;\n\n\tconst VALID_KEYSTONE =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...keystoneCopy } = keystone;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(keystoneCopy);\n\t\t}).length === 1 && isValidReasonTypeAndLength(keystone);\n\n\tconst VALID_DOMINATION =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...dominationCopy } = domination;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(dominationCopy);\n\t\t}).length === 1 && isValidReasonTypeAndLength(domination);\n\n\tconst VALID_RESOLVE =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...resolveCopy } = resolve;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(resolveCopy);\n\t\t}).length === 1 && isValidReasonTypeAndLength(resolve);\n\n\tconst VALID_INSPIRATION =\n\t\trunes.filter((rune) => {\n\t\t\t// Remove reason property from build rune;\n\t\t\tconst { reason, ...inspirationCopy } = inspiration;\n\n\t\t\treturn JSON.stringify(rune) === JSON.stringify(inspirationCopy);\n\t\t}).length === 1 && isValidReasonTypeAndLength(inspiration);\n\n\tif (\n\t\tVALID_KEYSTONE &&\n\t\tVALID_DOMINATION &&\n\t\tVALID_RESOLVE &&\n\t\tVALID_INSPIRATION\n\t) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_RUNES, false);\n};\n\nconst IS_VALID_SPELLS = (\n\tbuild: BuildInterface,\n\tspells: Array<SpellInterface>\n) => {\n\tconst { spells: buildSpells } = build;\n\tconst { spellOne, spellTwo } = buildSpells;\n\n\tconst VALID_SPELL_ONE =\n\t\tspells.filter((spell) => {\n\t\t\treturn JSON.stringify(spell) === JSON.stringify(spellOne);\n\t\t}).length === 1;\n\n\tconst VALID_SPELL_TWO =\n\t\tspells.filter((spell) => {\n\t\t\treturn JSON.stringify(spell) === JSON.stringify(spellTwo);\n\t\t}).length === 1;\n\n\tif (VALID_SPELL_ONE && VALID_SPELL_TWO) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_SPELLS, false);\n};\n\nconst IS_VALID_RANK = (build: BuildInterface, ranks: Array<RankInterface>) => {\n\tconst { rank: buildRank } = build;\n\n\tconst isValidRank =\n\t\tranks.filter((rank) => {\n\t\t\treturn JSON.stringify(rank) === JSON.stringify(buildRank);\n\t\t}).length === 1;\n\n\tif (isValidRank) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_RANK, false);\n};\n\nconst IS_VALID_REGION = (build: BuildInterface) => {\n\tconst { region } = build;\n\n\tconst isValidRegion =\n\t\tregion === GameRegion.SEA ||\n\t\tregion === GameRegion.NA ||\n\t\tregion === GameRegion.EUW;\n\tconst isTypeString = isValidString(region);\n\n\tif (isValidRegion && isTypeString) {\n\t\treturn resultHandler(null, true);\n\t}\n\n\treturn resultHandler(Message.ERROR.NOT_VALID_REGION, false);\n};\n\nexport const Validate = {\n\tHAS_BUILD_TITLE,\n\tHAS_ITEMS_SELECTED,\n\tHAS_THREE_TO_SIX_PRIMARY_ITEMS,\n\tHAS_USERNAME,\n\tIS_VALID_BUILD_TITLE,\n\tIS_VALID_USERNAME,\n\tIS_VALID_ROLE,\n\tIS_VALID_GAME_MODE,\n\tIS_VALID_BUILD_DESCRIPTION,\n\tIS_VALID_CHAMPION,\n\tIS_VALID_ITEMS_SELECTED,\n\tIS_VALID_NUMBER_OF_ITEMS_SELECTED,\n\tIS_VALID_RUNES,\n\tIS_VALID_SPELLS,\n\tIS_VALID_RANK,\n\tIS_VALID_REGION,\n};\n\nexport const ValidateHelper = {\n\tvalidateBuild,\n\tvalidateStep,\n\tfindValidationErrorAndReturn,\n\tcheckAllValidationsAreValid,\n\tsanitizeBuildTexts,\n};\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildHeader\\components\\BuildChip\\BuildChip.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\components\\CopyBuildLink\\CopyBuildLink.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\PlayerBuildFooter\\components\\ViewMoreBuilds\\ViewMoreBuilds.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\BuildTitle\\BuildTitle.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\GameMode\\GameMode.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildInformation\\components\\Description\\Description.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Username\\PlayerUsername.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Rank\\PlayerRank.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\PlayerInformation\\components\\Region\\PlayerRegion.tsx",["377"],"import React from 'react';\n\nimport { GameRegion } from '../../../../../../../shared/constants/constants';\n\n// Redux\nimport { connect, ConnectedProps } from 'react-redux';\nimport actionTypes from '../../../../../../../store/actions';\n\n// MaterialUI\nimport Box from '@material-ui/core/Box';\n// Components\n// Types\nimport { RootState } from '../../../../../../../shared/interfaces/interfaces';\n// CSS\nimport globalstyles from '../../../../createbuild.module.css';\nimport styles from './playerregion.module.css';\n\nconst PlayerRegion = (props: PlayerRegionProps) => {\n\t// Build PROPS\n\tconst { regionSelected, setRegionSelected } = props;\n\n\t// =============== Rank =============== //\n\tconst handleServerSelectChange = (\n\t\te: React.ChangeEvent<HTMLSelectElement>\n\t) => {\n\t\tconst { value } = e.target;\n\n\t\tsetRegionSelected(value);\n\t};\n\n\treturn (\n\t\t<Box>\n\t\t\t<p className={globalstyles.inputLabel}>11. Region</p>\n\t\t\t<p className={globalstyles.inputDescription}>Select your region</p>\n\n\t\t\t<Box>\n\t\t\t\t<select\n\t\t\t\t\tvalue={regionSelected}\n\t\t\t\t\tonChange={handleServerSelectChange}\n\t\t\t\t\tclassName={globalstyles.buildSelectInput}\n\t\t\t\t>\n\t\t\t\t\t<option\n\t\t\t\t\t\tvalue={GameRegion.SEA}\n\t\t\t\t\t\tclassName={globalstyles.buildSelectOption}\n\t\t\t\t\t>\n\t\t\t\t\t\t{GameRegion.SEA.toUpperCase()}\n\t\t\t\t\t</option>\n\t\t\t\t\t<option\n\t\t\t\t\t\tvalue={GameRegion.NA}\n\t\t\t\t\t\tclassName={globalstyles.buildSelectOption}\n\t\t\t\t\t>\n\t\t\t\t\t\t{GameRegion.NA.toUpperCase()}\n\t\t\t\t\t</option>\n\t\t\t\t\t<option\n\t\t\t\t\t\tvalue={GameRegion.EUW}\n\t\t\t\t\t\tclassName={globalstyles.buildSelectOption}\n\t\t\t\t\t>\n\t\t\t\t\t\t{GameRegion.EUW.toUpperCase()}\n\t\t\t\t\t</option>\n\t\t\t\t</select>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => {\n\treturn {\n\t\tregionSelected: state.build.region,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tsetRegionSelected: (newRegion: string) =>\n\t\t\tdispatch({ type: actionTypes.BUILD_SET_REGION, data: newRegion }),\n\t};\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype PlayerRegionProps = PropsFromRedux;\n\nexport default connector(PlayerRegion);\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Builds\\Player\\components\\BuildDescription\\BuildDescription.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\requiredLength.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\config\\config.ts",["378"],"const {\n\tREACT_APP_CLIENT_URL,\n\tREACT_APP_SERVER_URL,\n\tREACT_APP_RECAPTCHA_PUBLIC_KEY,\n} = process.env;\n\nexport const URL = {\n\t// SERVER: REACT_APP_SERVER_URL, // PROD\n\tSERVER: '', // DEV\n\tCLIENT: REACT_APP_CLIENT_URL,\n};\n\nexport const ReCaptcha = {\n\tPUBLIC_KEY: REACT_APP_RECAPTCHA_PUBLIC_KEY,\n};\n","C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\constants.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\defaultSelectedState.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\constants\\validationMessages.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\build.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\gameData.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\reCaptcha.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\reducers\\snackbarControls.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\store\\actions.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\AlertDialog\\AlertDialog.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\PrivacyPolicy\\PrivacyPolicy.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\Create\\Build\\components\\BuildSelection\\components\\ItemsSelected\\components\\BuildItem\\BuildItem.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\pages\\About\\About.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\interfaces\\interfaces.ts",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\ItemPopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\RunePopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Popover\\SpellPopover.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Snackbars\\Snackbars.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\Backdrop.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Loading\\ComponentLoading.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Layout.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Footer\\Footer.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Header\\Header.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\Header\\AppBar\\AppBar.tsx",[],"C:\\Users\\Workstation\\Desktop\\Programming\\wildriftbuildsdatabase\\frontend\\src\\shared\\components\\PageError\\PageNotFound\\PageNotFound.tsx",[],{"ruleId":"379","severity":1,"message":"380","line":8,"column":10,"nodeType":"381","messageId":"382","endLine":8,"endColumn":21},{"ruleId":"379","severity":1,"message":"383","line":31,"column":7,"nodeType":"381","messageId":"382","endLine":31,"endColumn":15},{"ruleId":"379","severity":1,"message":"384","line":35,"column":7,"nodeType":"381","messageId":"382","endLine":35,"endColumn":16},{"ruleId":"385","replacedBy":"386"},{"ruleId":"387","replacedBy":"388"},{"ruleId":"389","severity":1,"message":"390","line":46,"column":70,"nodeType":"391","messageId":"392","endLine":46,"endColumn":72},{"ruleId":"393","severity":1,"message":"394","line":65,"column":5,"nodeType":"395","endLine":65,"endColumn":17,"suggestions":"396"},{"ruleId":"393","severity":1,"message":"394","line":76,"column":5,"nodeType":"395","endLine":76,"endColumn":21,"suggestions":"397"},{"ruleId":"393","severity":1,"message":"398","line":166,"column":5,"nodeType":"395","endLine":166,"endColumn":7,"suggestions":"399"},{"ruleId":"379","severity":1,"message":"400","line":26,"column":8,"nodeType":"381","messageId":"382","endLine":26,"endColumn":14},{"ruleId":"379","severity":1,"message":"401","line":130,"column":10,"nodeType":"381","messageId":"382","endLine":130,"endColumn":24},{"ruleId":"393","severity":1,"message":"402","line":210,"column":5,"nodeType":"395","endLine":210,"endColumn":7,"suggestions":"403"},{"ruleId":"379","severity":1,"message":"404","line":10,"column":8,"nodeType":"381","messageId":"382","endLine":10,"endColumn":20},{"ruleId":"379","severity":1,"message":"400","line":12,"column":8,"nodeType":"381","messageId":"382","endLine":12,"endColumn":14},{"ruleId":"379","severity":1,"message":"400","line":12,"column":8,"nodeType":"381","messageId":"382","endLine":12,"endColumn":14},{"ruleId":"389","severity":1,"message":"405","line":110,"column":57,"nodeType":"391","messageId":"392","endLine":110,"endColumn":59},{"ruleId":"393","severity":1,"message":"406","line":91,"column":5,"nodeType":"395","endLine":91,"endColumn":21,"suggestions":"407"},{"ruleId":"379","severity":1,"message":"400","line":19,"column":8,"nodeType":"381","messageId":"382","endLine":19,"endColumn":14},{"ruleId":"379","severity":1,"message":"400","line":20,"column":8,"nodeType":"381","messageId":"382","endLine":20,"endColumn":14},{"ruleId":"389","severity":1,"message":"390","line":60,"column":69,"nodeType":"391","messageId":"392","endLine":60,"endColumn":71},{"ruleId":"393","severity":1,"message":"408","line":108,"column":5,"nodeType":"395","endLine":108,"endColumn":7,"suggestions":"409"},{"ruleId":"393","severity":1,"message":"410","line":67,"column":5,"nodeType":"395","endLine":67,"endColumn":7,"suggestions":"411"},{"ruleId":"379","severity":1,"message":"412","line":34,"column":14,"nodeType":"381","messageId":"382","endLine":34,"endColumn":20},{"ruleId":"379","severity":1,"message":"413","line":34,"column":22,"nodeType":"381","messageId":"382","endLine":34,"endColumn":30},{"ruleId":"393","severity":1,"message":"414","line":23,"column":5,"nodeType":"395","endLine":23,"endColumn":7,"suggestions":"415"},{"ruleId":"389","severity":1,"message":"390","line":66,"column":51,"nodeType":"391","messageId":"392","endLine":66,"endColumn":53},{"ruleId":"389","severity":1,"message":"390","line":425,"column":45,"nodeType":"391","messageId":"392","endLine":425,"endColumn":47},{"ruleId":"379","severity":1,"message":"400","line":16,"column":8,"nodeType":"381","messageId":"382","endLine":16,"endColumn":14},{"ruleId":"379","severity":1,"message":"416","line":3,"column":2,"nodeType":"381","messageId":"382","endLine":3,"endColumn":22},"@typescript-eslint/no-unused-vars","'PersistGate' is defined but never used.","Identifier","unusedVar","'pReducer' is assigned a value but never used.","'persistor' is assigned a value but never used.","no-native-reassign",["417"],"no-negated-in-lhs",["418"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'champions'. Either include it or remove the dependency array.","ArrayExpression",["419"],["420"],"React Hook useEffect has missing dependencies: 'setChampions', 'setItems', 'setRanks', 'setRoles', 'setRunes', and 'setSpells'. Either include them or remove the dependency array.",["421"],"'styles' is defined but never used.","'saveToDatabase' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setChampionSelected'. Either include it or remove the dependency array.",["422"],"'globalstyles' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'setItemsConfirmed' and 'setSnackbarControls'. Either include them or remove the dependency array.",["423"],"React Hook useEffect has missing dependencies: 'championName', 'getBuildsForChampion', and 'isLoading'. Either include them or remove the dependency array. You can also do a functional update 'setIsLoading(i => ...)' if you only need 'isLoading' in the 'setIsLoading' call.",["424"],"React Hook useEffect has missing dependencies: 'isLoading' and 'match.params.buildId'. Either include them or remove the dependency array. You can also do a functional update 'setIsLoading(i => ...)' if you only need 'isLoading' in the 'setIsLoading' call.",["425"],"'roleId' is assigned a value but never used.","'roleName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setRecaptchRef'. Either include it or remove the dependency array.",["426"],"'REACT_APP_SERVER_URL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},"Update the dependencies array to be: [champions, roleFilter]",{"range":"443","text":"444"},"Update the dependencies array to be: [championSearch, champions]",{"range":"445","text":"446"},"Update the dependencies array to be: [setChampions, setItems, setRanks, setRoles, setRunes, setSpells]",{"range":"447","text":"448"},"Update the dependencies array to be: [setChampionSelected]",{"range":"449","text":"450"},"Update the dependencies array to be: [itemsConfirmed, setItemsConfirmed, setSnackbarControls]",{"range":"451","text":"452"},"Update the dependencies array to be: [championName, getBuildsForChampion, isLoading]",{"range":"453","text":"454"},"Update the dependencies array to be: [isLoading, match.params.buildId]",{"range":"455","text":"456"},"Update the dependencies array to be: [setRecaptchRef]",{"range":"457","text":"458"},[1802,1814],"[champions, roleFilter]",[2114,2130],"[championSearch, champions]",[4330,4332],"[setChampions, setItems, setRanks, setRoles, setRunes, setSpells]",[5928,5930],"[setChampionSelected]",[2602,2618],"[itemsConfirmed, setItemsConfirmed, setSnackbarControls]",[3154,3156],"[championName, getBuildsForChampion, isLoading]",[2069,2071],"[isLoading, match.params.buildId]",[680,682],"[setRecaptchRef]"]